
controlMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aa8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08007bb8  08007bb8  00017bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ef8  08007ef8  00020220  2**0
                  CONTENTS
  4 .ARM          00000000  08007ef8  08007ef8  00020220  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ef8  08007ef8  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ef8  08007ef8  00017ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007efc  08007efc  00017efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08007f00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000220  08008120  00020220  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  08008120  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9a5  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cbb  00000000  00000000  0002cbee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd8  00000000  00000000  0002e8b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf0  00000000  00000000  0002f588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d7a  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009b97  00000000  00000000  00048ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c46a  00000000  00000000  00052a89  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000deef3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004348  00000000  00000000  000def70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000220 	.word	0x20000220
 800012c:	00000000 	.word	0x00000000
 8000130:	08007ba0 	.word	0x08007ba0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000224 	.word	0x20000224
 800014c:	08007ba0 	.word	0x08007ba0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <interpreteComando>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void interpreteComando(uint8_t *consigna_buffer) {
 8000b3c:	b5b0      	push	{r4, r5, r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]

	//uint32_t duty_cycle;
	double consigna;

	switch (consigna_buffer[0]) {
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	3b44      	subs	r3, #68	; 0x44
 8000b4a:	2b33      	cmp	r3, #51	; 0x33
 8000b4c:	f200 8285 	bhi.w	800105a <interpreteComando+0x51e>
 8000b50:	a201      	add	r2, pc, #4	; (adr r2, 8000b58 <interpreteComando+0x1c>)
 8000b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b56:	bf00      	nop
 8000b58:	08000fe1 	.word	0x08000fe1
 8000b5c:	0800105b 	.word	0x0800105b
 8000b60:	0800105b 	.word	0x0800105b
 8000b64:	0800105b 	.word	0x0800105b
 8000b68:	0800105b 	.word	0x0800105b
 8000b6c:	08000f67 	.word	0x08000f67
 8000b70:	0800105b 	.word	0x0800105b
 8000b74:	0800105b 	.word	0x0800105b
 8000b78:	0800105b 	.word	0x0800105b
 8000b7c:	0800105b 	.word	0x0800105b
 8000b80:	0800105b 	.word	0x0800105b
 8000b84:	0800105b 	.word	0x0800105b
 8000b88:	08000ec3 	.word	0x08000ec3
 8000b8c:	0800105b 	.word	0x0800105b
 8000b90:	0800105b 	.word	0x0800105b
 8000b94:	0800105b 	.word	0x0800105b
 8000b98:	0800105b 	.word	0x0800105b
 8000b9c:	0800105b 	.word	0x0800105b
 8000ba0:	0800105b 	.word	0x0800105b
 8000ba4:	08000c29 	.word	0x08000c29
 8000ba8:	0800105b 	.word	0x0800105b
 8000bac:	0800105b 	.word	0x0800105b
 8000bb0:	0800105b 	.word	0x0800105b
 8000bb4:	0800105b 	.word	0x0800105b
 8000bb8:	0800105b 	.word	0x0800105b
 8000bbc:	0800105b 	.word	0x0800105b
 8000bc0:	0800105b 	.word	0x0800105b
 8000bc4:	0800105b 	.word	0x0800105b
 8000bc8:	0800105b 	.word	0x0800105b
 8000bcc:	0800105b 	.word	0x0800105b
 8000bd0:	0800105b 	.word	0x0800105b
 8000bd4:	0800105b 	.word	0x0800105b
 8000bd8:	08000fe1 	.word	0x08000fe1
 8000bdc:	0800105b 	.word	0x0800105b
 8000be0:	0800105b 	.word	0x0800105b
 8000be4:	0800105b 	.word	0x0800105b
 8000be8:	0800105b 	.word	0x0800105b
 8000bec:	08000f67 	.word	0x08000f67
 8000bf0:	0800105b 	.word	0x0800105b
 8000bf4:	0800105b 	.word	0x0800105b
 8000bf8:	0800105b 	.word	0x0800105b
 8000bfc:	0800105b 	.word	0x0800105b
 8000c00:	0800105b 	.word	0x0800105b
 8000c04:	0800105b 	.word	0x0800105b
 8000c08:	08000ec3 	.word	0x08000ec3
 8000c0c:	0800105b 	.word	0x0800105b
 8000c10:	0800105b 	.word	0x0800105b
 8000c14:	0800105b 	.word	0x0800105b
 8000c18:	0800105b 	.word	0x0800105b
 8000c1c:	0800105b 	.word	0x0800105b
 8000c20:	0800105b 	.word	0x0800105b
 8000c24:	08000c29 	.word	0x08000c29
	case 'W':
	case 'w':
		switch (consigna_buffer[1]) {
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b32      	cmp	r3, #50	; 0x32
 8000c30:	f000 8099 	beq.w	8000d66 <interpreteComando+0x22a>
 8000c34:	2b3f      	cmp	r3, #63	; 0x3f
 8000c36:	f000 813c 	beq.w	8000eb2 <interpreteComando+0x376>
 8000c3a:	2b31      	cmp	r3, #49	; 0x31
 8000c3c:	d000      	beq.n	8000c40 <interpreteComando+0x104>
			indexBuf = 0;
			// HAL_SPI_TransmitReceive_IT(&hspi2, &out_buffer[indexBuf], &byte, 1);
			//HAL__IT(&hspi2, out_buffer, 14);
			break;
		}
		break;
 8000c3e:	e20c      	b.n	800105a <interpreteComando+0x51e>
			if (consigna_buffer[2]) {
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	3302      	adds	r3, #2
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f000 8137 	beq.w	8000eba <interpreteComando+0x37e>
				if (consigna_buffer[2] == 43) {
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3302      	adds	r3, #2
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b2b      	cmp	r3, #43	; 0x2b
 8000c54:	d130      	bne.n	8000cb8 <interpreteComando+0x17c>
					stop1 = 0;
 8000c56:	4bab      	ldr	r3, [pc, #684]	; (8000f04 <interpreteComando+0x3c8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2110      	movs	r1, #16
 8000c60:	48a9      	ldr	r0, [pc, #676]	; (8000f08 <interpreteComando+0x3cc>)
 8000c62:	f001 ff89 	bl	8002b78 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2120      	movs	r1, #32
 8000c6a:	48a7      	ldr	r0, [pc, #668]	; (8000f08 <interpreteComando+0x3cc>)
 8000c6c:	f001 ff84 	bl	8002b78 <HAL_GPIO_WritePin>
					if (consigna_buffer[3]) {
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	3303      	adds	r3, #3
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f000 811f 	beq.w	8000eba <interpreteComando+0x37e>
						consigna = atof((char*) &consigna_buffer[3]);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	3303      	adds	r3, #3
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 fd4a 	bl	800571a <atof>
 8000c86:	e9c7 0104 	strd	r0, r1, [r7, #16]
						if (consigna < 35) {
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	4b9f      	ldr	r3, [pc, #636]	; (8000f0c <interpreteComando+0x3d0>)
 8000c90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c94:	f7ff fe92 	bl	80009bc <__aeabi_dcmplt>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d005      	beq.n	8000caa <interpreteComando+0x16e>
							velocidad_consigna = consigna;
 8000c9e:	4a9c      	ldr	r2, [pc, #624]	; (8000f10 <interpreteComando+0x3d4>)
 8000ca0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000ca4:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8000ca8:	e107      	b.n	8000eba <interpreteComando+0x37e>
							velocidad_consigna = 35;
 8000caa:	4a99      	ldr	r2, [pc, #612]	; (8000f10 <interpreteComando+0x3d4>)
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	4c96      	ldr	r4, [pc, #600]	; (8000f0c <interpreteComando+0x3d0>)
 8000cb2:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8000cb6:	e100      	b.n	8000eba <interpreteComando+0x37e>
				} else if (consigna_buffer[2] == 45) {
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	3302      	adds	r3, #2
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b2d      	cmp	r3, #45	; 0x2d
 8000cc0:	d136      	bne.n	8000d30 <interpreteComando+0x1f4>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	4890      	ldr	r0, [pc, #576]	; (8000f08 <interpreteComando+0x3cc>)
 8000cc8:	f001 ff56 	bl	8002b78 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2120      	movs	r1, #32
 8000cd0:	488d      	ldr	r0, [pc, #564]	; (8000f08 <interpreteComando+0x3cc>)
 8000cd2:	f001 ff51 	bl	8002b78 <HAL_GPIO_WritePin>
					stop1 = 0;
 8000cd6:	4b8b      	ldr	r3, [pc, #556]	; (8000f04 <interpreteComando+0x3c8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
					if (consigna_buffer[3]) {
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	3303      	adds	r3, #3
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 80e9 	beq.w	8000eba <interpreteComando+0x37e>
						consigna = atof((char*) &consigna_buffer[3]);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3303      	adds	r3, #3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f004 fd14 	bl	800571a <atof>
 8000cf2:	e9c7 0104 	strd	r0, r1, [r7, #16]
						if (consigna < 35) {
 8000cf6:	f04f 0200 	mov.w	r2, #0
 8000cfa:	4b84      	ldr	r3, [pc, #528]	; (8000f0c <interpreteComando+0x3d0>)
 8000cfc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d00:	f7ff fe5c 	bl	80009bc <__aeabi_dcmplt>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d00b      	beq.n	8000d22 <interpreteComando+0x1e6>
							velocidad_consigna = -consigna;
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b7e      	ldr	r3, [pc, #504]	; (8000f10 <interpreteComando+0x3d4>)
 8000d18:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000d1c:	e9c3 1200 	strd	r1, r2, [r3]
			break;
 8000d20:	e0cb      	b.n	8000eba <interpreteComando+0x37e>
							velocidad_consigna = -35;
 8000d22:	4a7b      	ldr	r2, [pc, #492]	; (8000f10 <interpreteComando+0x3d4>)
 8000d24:	f04f 0300 	mov.w	r3, #0
 8000d28:	4c7a      	ldr	r4, [pc, #488]	; (8000f14 <interpreteComando+0x3d8>)
 8000d2a:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8000d2e:	e0c4      	b.n	8000eba <interpreteComando+0x37e>
				} else if (consigna_buffer[2] == 48) {
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	3302      	adds	r3, #2
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b30      	cmp	r3, #48	; 0x30
 8000d38:	f040 80bf 	bne.w	8000eba <interpreteComando+0x37e>
					velocidad_consigna = 0;
 8000d3c:	4a74      	ldr	r2, [pc, #464]	; (8000f10 <interpreteComando+0x3d4>)
 8000d3e:	f04f 0300 	mov.w	r3, #0
 8000d42:	f04f 0400 	mov.w	r4, #0
 8000d46:	e9c2 3400 	strd	r3, r4, [r2]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	486e      	ldr	r0, [pc, #440]	; (8000f08 <interpreteComando+0x3cc>)
 8000d50:	f001 ff12 	bl	8002b78 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2120      	movs	r1, #32
 8000d58:	486b      	ldr	r0, [pc, #428]	; (8000f08 <interpreteComando+0x3cc>)
 8000d5a:	f001 ff0d 	bl	8002b78 <HAL_GPIO_WritePin>
					stop1 = 1;
 8000d5e:	4b69      	ldr	r3, [pc, #420]	; (8000f04 <interpreteComando+0x3c8>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	601a      	str	r2, [r3, #0]
			break;
 8000d64:	e0a9      	b.n	8000eba <interpreteComando+0x37e>
			if (consigna_buffer[2]) {
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	3302      	adds	r3, #2
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f000 80a6 	beq.w	8000ebe <interpreteComando+0x382>
				if (consigna_buffer[2] == 43) {
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3302      	adds	r3, #2
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b2b      	cmp	r3, #43	; 0x2b
 8000d7a:	d132      	bne.n	8000de2 <interpreteComando+0x2a6>
					stop2 = 0;
 8000d7c:	4b66      	ldr	r3, [pc, #408]	; (8000f18 <interpreteComando+0x3dc>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000d82:	2201      	movs	r2, #1
 8000d84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d88:	485f      	ldr	r0, [pc, #380]	; (8000f08 <interpreteComando+0x3cc>)
 8000d8a:	f001 fef5 	bl	8002b78 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d94:	485c      	ldr	r0, [pc, #368]	; (8000f08 <interpreteComando+0x3cc>)
 8000d96:	f001 feef 	bl	8002b78 <HAL_GPIO_WritePin>
					if (consigna_buffer[3]) {
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3303      	adds	r3, #3
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f000 808c 	beq.w	8000ebe <interpreteComando+0x382>
						consigna = atof((char*) &consigna_buffer[3]);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	3303      	adds	r3, #3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f004 fcb5 	bl	800571a <atof>
 8000db0:	e9c7 0104 	strd	r0, r1, [r7, #16]
						if (consigna < 35) {
 8000db4:	f04f 0200 	mov.w	r2, #0
 8000db8:	4b54      	ldr	r3, [pc, #336]	; (8000f0c <interpreteComando+0x3d0>)
 8000dba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000dbe:	f7ff fdfd 	bl	80009bc <__aeabi_dcmplt>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d005      	beq.n	8000dd4 <interpreteComando+0x298>
							velocidad_consigna2 = consigna;
 8000dc8:	4a54      	ldr	r2, [pc, #336]	; (8000f1c <interpreteComando+0x3e0>)
 8000dca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000dce:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8000dd2:	e074      	b.n	8000ebe <interpreteComando+0x382>
							velocidad_consigna2 = 35;
 8000dd4:	4a51      	ldr	r2, [pc, #324]	; (8000f1c <interpreteComando+0x3e0>)
 8000dd6:	f04f 0300 	mov.w	r3, #0
 8000dda:	4c4c      	ldr	r4, [pc, #304]	; (8000f0c <interpreteComando+0x3d0>)
 8000ddc:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8000de0:	e06d      	b.n	8000ebe <interpreteComando+0x382>
				} else if (consigna_buffer[2] == 45) {
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3302      	adds	r3, #2
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b2d      	cmp	r3, #45	; 0x2d
 8000dea:	d146      	bne.n	8000e7a <interpreteComando+0x33e>
					stop2 = 0;
 8000dec:	4b4a      	ldr	r3, [pc, #296]	; (8000f18 <interpreteComando+0x3dc>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df8:	4843      	ldr	r0, [pc, #268]	; (8000f08 <interpreteComando+0x3cc>)
 8000dfa:	f001 febd 	bl	8002b78 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e04:	4840      	ldr	r0, [pc, #256]	; (8000f08 <interpreteComando+0x3cc>)
 8000e06:	f001 feb7 	bl	8002b78 <HAL_GPIO_WritePin>
					if (consigna_buffer[3]) {
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3303      	adds	r3, #3
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d054      	beq.n	8000ebe <interpreteComando+0x382>
						consigna = atof((char*) &consigna_buffer[3]);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	3303      	adds	r3, #3
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f004 fc7e 	bl	800571a <atof>
 8000e1e:	e9c7 0104 	strd	r0, r1, [r7, #16]
						if (consigna == 0) {
 8000e22:	f04f 0200 	mov.w	r2, #0
 8000e26:	f04f 0300 	mov.w	r3, #0
 8000e2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e2e:	f7ff fdbb 	bl	80009a8 <__aeabi_dcmpeq>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d007      	beq.n	8000e48 <interpreteComando+0x30c>
							velocidad_consigna2 = 0;
 8000e38:	4a38      	ldr	r2, [pc, #224]	; (8000f1c <interpreteComando+0x3e0>)
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	f04f 0400 	mov.w	r4, #0
 8000e42:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8000e46:	e03a      	b.n	8000ebe <interpreteComando+0x382>
						} else if (consigna < 35) {
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <interpreteComando+0x3d0>)
 8000e4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e52:	f7ff fdb3 	bl	80009bc <__aeabi_dcmplt>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d007      	beq.n	8000e6c <interpreteComando+0x330>
							velocidad_consigna2 = -consigna;
 8000e5c:	693c      	ldr	r4, [r7, #16]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000e64:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <interpreteComando+0x3e0>)
 8000e66:	e9c3 4500 	strd	r4, r5, [r3]
			break;
 8000e6a:	e028      	b.n	8000ebe <interpreteComando+0x382>
							velocidad_consigna2 = -35;
 8000e6c:	4a2b      	ldr	r2, [pc, #172]	; (8000f1c <interpreteComando+0x3e0>)
 8000e6e:	f04f 0300 	mov.w	r3, #0
 8000e72:	4c28      	ldr	r4, [pc, #160]	; (8000f14 <interpreteComando+0x3d8>)
 8000e74:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8000e78:	e021      	b.n	8000ebe <interpreteComando+0x382>
				} else if (consigna_buffer[2] == 48) {
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b30      	cmp	r3, #48	; 0x30
 8000e82:	d11c      	bne.n	8000ebe <interpreteComando+0x382>
					velocidad_consigna2 = 0;
 8000e84:	4a25      	ldr	r2, [pc, #148]	; (8000f1c <interpreteComando+0x3e0>)
 8000e86:	f04f 0300 	mov.w	r3, #0
 8000e8a:	f04f 0400 	mov.w	r4, #0
 8000e8e:	e9c2 3400 	strd	r3, r4, [r2]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000e92:	2201      	movs	r2, #1
 8000e94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e98:	481b      	ldr	r0, [pc, #108]	; (8000f08 <interpreteComando+0x3cc>)
 8000e9a:	f001 fe6d 	bl	8002b78 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea4:	4818      	ldr	r0, [pc, #96]	; (8000f08 <interpreteComando+0x3cc>)
 8000ea6:	f001 fe67 	bl	8002b78 <HAL_GPIO_WritePin>
					stop2 = 0;
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <interpreteComando+0x3dc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
			break;
 8000eb0:	e005      	b.n	8000ebe <interpreteComando+0x382>
			indexBuf = 0;
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <interpreteComando+0x3e4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
			break;
 8000eb8:	e002      	b.n	8000ec0 <interpreteComando+0x384>
			break;
 8000eba:	bf00      	nop
 8000ebc:	e0cd      	b.n	800105a <interpreteComando+0x51e>
			break;
 8000ebe:	bf00      	nop
		break;
 8000ec0:	e0cb      	b.n	800105a <interpreteComando+0x51e>
//		case 'C':
//			control=1;
//			break;
	case 'p':
	case 'P':
		switch (consigna_buffer[1]) {
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b31      	cmp	r3, #49	; 0x31
 8000eca:	d002      	beq.n	8000ed2 <interpreteComando+0x396>
 8000ecc:	2b32      	cmp	r3, #50	; 0x32
 8000ece:	d02d      	beq.n	8000f2c <interpreteComando+0x3f0>
 8000ed0:	e044      	b.n	8000f5c <interpreteComando+0x420>
		/*codigo ascii de '1' = 49*/
		case 49:
			consigna = atof((char*) &consigna_buffer[2]);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f004 fc1f 	bl	800571a <atof>
 8000edc:	e9c7 0104 	strd	r0, r1, [r7, #16]
			KP1 = (float) consigna;
 8000ee0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000ee4:	f7ff fdda 	bl	8000a9c <__aeabi_d2f>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fa9c 	bl	8000428 <__aeabi_f2d>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	460c      	mov	r4, r1
 8000ef4:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <interpreteComando+0x3e8>)
 8000ef6:	e9c2 3400 	strd	r3, r4, [r2]
			printf("\r\n");
 8000efa:	480b      	ldr	r0, [pc, #44]	; (8000f28 <interpreteComando+0x3ec>)
 8000efc:	f004 fc9e 	bl	800583c <puts>
			break;
 8000f00:	e030      	b.n	8000f64 <interpreteComando+0x428>
 8000f02:	bf00      	nop
 8000f04:	2000003c 	.word	0x2000003c
 8000f08:	40010800 	.word	0x40010800
 8000f0c:	40418000 	.word	0x40418000
 8000f10:	200002a0 	.word	0x200002a0
 8000f14:	c0418000 	.word	0xc0418000
 8000f18:	20000040 	.word	0x20000040
 8000f1c:	200002a8 	.word	0x200002a8
 8000f20:	2000027c 	.word	0x2000027c
 8000f24:	20000008 	.word	0x20000008
 8000f28:	08007bb8 	.word	0x08007bb8
			/*codigo ascii de '2' = 50*/
		case 50:
			consigna = atof((char*) &consigna_buffer[2]);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3302      	adds	r3, #2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f004 fbf2 	bl	800571a <atof>
 8000f36:	e9c7 0104 	strd	r0, r1, [r7, #16]
			KP2 = (float) consigna;
 8000f3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f3e:	f7ff fdad 	bl	8000a9c <__aeabi_d2f>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fa6f 	bl	8000428 <__aeabi_f2d>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460c      	mov	r4, r1
 8000f4e:	4a45      	ldr	r2, [pc, #276]	; (8001064 <interpreteComando+0x528>)
 8000f50:	e9c2 3400 	strd	r3, r4, [r2]
			printf("\r\n");
 8000f54:	4844      	ldr	r0, [pc, #272]	; (8001068 <interpreteComando+0x52c>)
 8000f56:	f004 fc71 	bl	800583c <puts>
			break;
 8000f5a:	e003      	b.n	8000f64 <interpreteComando+0x428>
		default:
			printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8000f5c:	4843      	ldr	r0, [pc, #268]	; (800106c <interpreteComando+0x530>)
 8000f5e:	f004 fc6d 	bl	800583c <puts>
			break;
 8000f62:	bf00      	nop

		}
		break;
 8000f64:	e079      	b.n	800105a <interpreteComando+0x51e>
	case 'i':
	case 'I':
		switch (consigna_buffer[1]) {
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b31      	cmp	r3, #49	; 0x31
 8000f6e:	d002      	beq.n	8000f76 <interpreteComando+0x43a>
 8000f70:	2b32      	cmp	r3, #50	; 0x32
 8000f72:	d018      	beq.n	8000fa6 <interpreteComando+0x46a>
 8000f74:	e02f      	b.n	8000fd6 <interpreteComando+0x49a>
		/*codigo ascii de '1' = 49*/
		case 49:
			consigna = atof((char*) &consigna_buffer[2]);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3302      	adds	r3, #2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f004 fbcd 	bl	800571a <atof>
 8000f80:	e9c7 0104 	strd	r0, r1, [r7, #16]
			KI1 = (float) consigna;
 8000f84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f88:	f7ff fd88 	bl	8000a9c <__aeabi_d2f>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fa4a 	bl	8000428 <__aeabi_f2d>
 8000f94:	4603      	mov	r3, r0
 8000f96:	460c      	mov	r4, r1
 8000f98:	4a35      	ldr	r2, [pc, #212]	; (8001070 <interpreteComando+0x534>)
 8000f9a:	e9c2 3400 	strd	r3, r4, [r2]
			printf("\r\n");
 8000f9e:	4832      	ldr	r0, [pc, #200]	; (8001068 <interpreteComando+0x52c>)
 8000fa0:	f004 fc4c 	bl	800583c <puts>
			break;
 8000fa4:	e01b      	b.n	8000fde <interpreteComando+0x4a2>
			/*codigo ascii de '2' = 50*/
		case 50:
			consigna = atof((char*) &consigna_buffer[2]);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3302      	adds	r3, #2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f004 fbb5 	bl	800571a <atof>
 8000fb0:	e9c7 0104 	strd	r0, r1, [r7, #16]
			KI2 = (float) consigna;
 8000fb4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fb8:	f7ff fd70 	bl	8000a9c <__aeabi_d2f>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fa32 	bl	8000428 <__aeabi_f2d>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	460c      	mov	r4, r1
 8000fc8:	4a2a      	ldr	r2, [pc, #168]	; (8001074 <interpreteComando+0x538>)
 8000fca:	e9c2 3400 	strd	r3, r4, [r2]
			printf("\r\n");
 8000fce:	4826      	ldr	r0, [pc, #152]	; (8001068 <interpreteComando+0x52c>)
 8000fd0:	f004 fc34 	bl	800583c <puts>
			break;
 8000fd4:	e003      	b.n	8000fde <interpreteComando+0x4a2>
		default:
			printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8000fd6:	4825      	ldr	r0, [pc, #148]	; (800106c <interpreteComando+0x530>)
 8000fd8:	f004 fc30 	bl	800583c <puts>
			break;
 8000fdc:	bf00      	nop
		}
		break;
 8000fde:	e03c      	b.n	800105a <interpreteComando+0x51e>
	case 'd':
	case 'D':
		switch (consigna_buffer[1]) {
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b31      	cmp	r3, #49	; 0x31
 8000fe8:	d002      	beq.n	8000ff0 <interpreteComando+0x4b4>
 8000fea:	2b32      	cmp	r3, #50	; 0x32
 8000fec:	d018      	beq.n	8001020 <interpreteComando+0x4e4>
 8000fee:	e02f      	b.n	8001050 <interpreteComando+0x514>
		/*codigo ascii de '1' = 49*/
		case 49:
			consigna = atof((char*) &consigna_buffer[2]);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f004 fb90 	bl	800571a <atof>
 8000ffa:	e9c7 0104 	strd	r0, r1, [r7, #16]
			KD1 = (float) consigna;
 8000ffe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001002:	f7ff fd4b 	bl	8000a9c <__aeabi_d2f>
 8001006:	4603      	mov	r3, r0
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fa0d 	bl	8000428 <__aeabi_f2d>
 800100e:	4603      	mov	r3, r0
 8001010:	460c      	mov	r4, r1
 8001012:	4a19      	ldr	r2, [pc, #100]	; (8001078 <interpreteComando+0x53c>)
 8001014:	e9c2 3400 	strd	r3, r4, [r2]
			printf("\r\n");
 8001018:	4813      	ldr	r0, [pc, #76]	; (8001068 <interpreteComando+0x52c>)
 800101a:	f004 fc0f 	bl	800583c <puts>
			break;
 800101e:	e01b      	b.n	8001058 <interpreteComando+0x51c>
			/*codigo ascii de '2' = 50*/
		case 50:
			consigna = atof((char*) &consigna_buffer[2]);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3302      	adds	r3, #2
 8001024:	4618      	mov	r0, r3
 8001026:	f004 fb78 	bl	800571a <atof>
 800102a:	e9c7 0104 	strd	r0, r1, [r7, #16]
			KD2 = (float) consigna;
 800102e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001032:	f7ff fd33 	bl	8000a9c <__aeabi_d2f>
 8001036:	4603      	mov	r3, r0
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f9f5 	bl	8000428 <__aeabi_f2d>
 800103e:	4603      	mov	r3, r0
 8001040:	460c      	mov	r4, r1
 8001042:	4a0e      	ldr	r2, [pc, #56]	; (800107c <interpreteComando+0x540>)
 8001044:	e9c2 3400 	strd	r3, r4, [r2]
			printf("\r\n");
 8001048:	4807      	ldr	r0, [pc, #28]	; (8001068 <interpreteComando+0x52c>)
 800104a:	f004 fbf7 	bl	800583c <puts>
			break;
 800104e:	e003      	b.n	8001058 <interpreteComando+0x51c>
		default:
			printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8001050:	4806      	ldr	r0, [pc, #24]	; (800106c <interpreteComando+0x530>)
 8001052:	f004 fbf3 	bl	800583c <puts>
			break;
 8001056:	bf00      	nop
		}
		break;
 8001058:	bf00      	nop
//			control=0;
//			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
//			break;
	}

}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bdb0      	pop	{r4, r5, r7, pc}
 8001062:	bf00      	nop
 8001064:	20000020 	.word	0x20000020
 8001068:	08007bb8 	.word	0x08007bb8
 800106c:	08007bbc 	.word	0x08007bbc
 8001070:	20000010 	.word	0x20000010
 8001074:	20000028 	.word	0x20000028
 8001078:	20000018 	.word	0x20000018
 800107c:	20000030 	.word	0x20000030

08001080 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001084:	b087      	sub	sp, #28
 8001086:	af00      	add	r7, sp, #0
 8001088:	6178      	str	r0, [r7, #20]
	if (htim->Instance == TIM1) {
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a96      	ldr	r2, [pc, #600]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001090:	4293      	cmp	r3, r2
 8001092:	f040 82e8 	bne.w	8001666 <HAL_TIM_PeriodElapsedCallback+0x5e6>

		//pulsosAct = contOUFlow*(htim3.Instance->ARR) + __HAL_TIM_GET_COUNTER(&htim3);
		pulsosAct = (contOUFlow * 65000) + __HAL_TIM_GET_COUNTER(&htim3);
 8001096:	4b95      	ldr	r3, [pc, #596]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800109e:	fb02 f303 	mul.w	r3, r2, r3
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b92      	ldr	r3, [pc, #584]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	4413      	add	r3, r2
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b91      	ldr	r3, [pc, #580]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80010b0:	601a      	str	r2, [r3, #0]
		velocidadPulsos = (pulsosAct - pulsosAnt) / deltaT;
 80010b2:	4b90      	ldr	r3, [pc, #576]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4b90      	ldr	r3, [pc, #576]	; (80012f8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f9a1 	bl	8000404 <__aeabi_i2d>
 80010c2:	4b8e      	ldr	r3, [pc, #568]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80010c4:	cb18      	ldmia	r3, {r3, r4}
 80010c6:	461a      	mov	r2, r3
 80010c8:	4623      	mov	r3, r4
 80010ca:	f7ff fb2f 	bl	800072c <__aeabi_ddiv>
 80010ce:	4603      	mov	r3, r0
 80010d0:	460c      	mov	r4, r1
 80010d2:	4a8b      	ldr	r2, [pc, #556]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80010d4:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM = velocidadPulsos / (168 * 44) * 60;
 80010d8:	4b89      	ldr	r3, [pc, #548]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80010da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010de:	a380      	add	r3, pc, #512	; (adr r3, 80012e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	f7ff fb22 	bl	800072c <__aeabi_ddiv>
 80010e8:	4603      	mov	r3, r0
 80010ea:	460c      	mov	r4, r1
 80010ec:	4618      	mov	r0, r3
 80010ee:	4621      	mov	r1, r4
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	4b83      	ldr	r3, [pc, #524]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80010f6:	f7ff f9ef 	bl	80004d8 <__aeabi_dmul>
 80010fa:	4603      	mov	r3, r0
 80010fc:	460c      	mov	r4, r1
 80010fe:	4a82      	ldr	r2, [pc, #520]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001100:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt = pulsosAct;
 8001104:	4b7b      	ldr	r3, [pc, #492]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a7b      	ldr	r2, [pc, #492]	; (80012f8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800110a:	6013      	str	r3, [r2, #0]

		pulsosAct2 = (contOUFlow2 * 65000) + __HAL_TIM_GET_COUNTER(&htim4);
 800110c:	4b7f      	ldr	r3, [pc, #508]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001114:	fb02 f303 	mul.w	r3, r2, r3
 8001118:	461a      	mov	r2, r3
 800111a:	4b7d      	ldr	r3, [pc, #500]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	4413      	add	r3, r2
 8001122:	461a      	mov	r2, r3
 8001124:	4b7b      	ldr	r3, [pc, #492]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001126:	601a      	str	r2, [r3, #0]
		velocidadPulsos2 = (pulsosAct2 - pulsosAnt2) / deltaT;
 8001128:	4b7a      	ldr	r3, [pc, #488]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b7a      	ldr	r3, [pc, #488]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f966 	bl	8000404 <__aeabi_i2d>
 8001138:	4b70      	ldr	r3, [pc, #448]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800113a:	cb18      	ldmia	r3, {r3, r4}
 800113c:	461a      	mov	r2, r3
 800113e:	4623      	mov	r3, r4
 8001140:	f7ff faf4 	bl	800072c <__aeabi_ddiv>
 8001144:	4603      	mov	r3, r0
 8001146:	460c      	mov	r4, r1
 8001148:	4a74      	ldr	r2, [pc, #464]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800114a:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM2 = velocidadPulsos2 / (168 * 44) * 60;
 800114e:	4b73      	ldr	r3, [pc, #460]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001150:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001154:	a362      	add	r3, pc, #392	; (adr r3, 80012e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115a:	f7ff fae7 	bl	800072c <__aeabi_ddiv>
 800115e:	4603      	mov	r3, r0
 8001160:	460c      	mov	r4, r1
 8001162:	4618      	mov	r0, r3
 8001164:	4621      	mov	r1, r4
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	4b66      	ldr	r3, [pc, #408]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800116c:	f7ff f9b4 	bl	80004d8 <__aeabi_dmul>
 8001170:	4603      	mov	r3, r0
 8001172:	460c      	mov	r4, r1
 8001174:	4a6a      	ldr	r2, [pc, #424]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001176:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt2 = pulsosAct2;
 800117a:	4b66      	ldr	r3, [pc, #408]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a66      	ldr	r2, [pc, #408]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001180:	6013      	str	r3, [r2, #0]

		//para el control
		if (control == 1) {
 8001182:	4b68      	ldr	r3, [pc, #416]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b01      	cmp	r3, #1
 8001188:	f040 82a0 	bne.w	80016cc <HAL_TIM_PeriodElapsedCallback+0x64c>
			//calculo PID:
			/*
			 *----------------  control motor 1
			 */
			error_vel_act = velocidad_consigna - velocidadRPM;
 800118c:	4b66      	ldr	r3, [pc, #408]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800118e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001192:	4b5d      	ldr	r3, [pc, #372]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001194:	cb18      	ldmia	r3, {r3, r4}
 8001196:	461a      	mov	r2, r3
 8001198:	4623      	mov	r3, r4
 800119a:	f7fe ffe5 	bl	8000168 <__aeabi_dsub>
 800119e:	4603      	mov	r3, r0
 80011a0:	460c      	mov	r4, r1
 80011a2:	4a62      	ldr	r2, [pc, #392]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80011a4:	e9c2 3400 	strd	r3, r4, [r2]
//			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
//			}
//			else if(error_vel_act==0){
//				Ui_anterior=0;
//			}
			if (stop1 == 1) {
 80011a8:	4b61      	ldr	r3, [pc, #388]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d106      	bne.n	80011be <HAL_TIM_PeriodElapsedCallback+0x13e>
				Ui_anterior = 0;
 80011b0:	4a60      	ldr	r2, [pc, #384]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	f04f 0400 	mov.w	r4, #0
 80011ba:	e9c2 3400 	strd	r3, r4, [r2]
			}
//			error_vel_acterror_vel_act);
			Up = KP1 * error_vel_act;
 80011be:	4b5e      	ldr	r3, [pc, #376]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80011c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011c4:	4b59      	ldr	r3, [pc, #356]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80011c6:	cb18      	ldmia	r3, {r3, r4}
 80011c8:	461a      	mov	r2, r3
 80011ca:	4623      	mov	r3, r4
 80011cc:	f7ff f984 	bl	80004d8 <__aeabi_dmul>
 80011d0:	4603      	mov	r3, r0
 80011d2:	460c      	mov	r4, r1
 80011d4:	4a59      	ldr	r2, [pc, #356]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80011d6:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual = Ui_anterior + (KI1 * deltaT * error_vel_ant);
 80011da:	4b59      	ldr	r3, [pc, #356]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80011dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011e0:	4b46      	ldr	r3, [pc, #280]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80011e2:	cb18      	ldmia	r3, {r3, r4}
 80011e4:	461a      	mov	r2, r3
 80011e6:	4623      	mov	r3, r4
 80011e8:	f7ff f976 	bl	80004d8 <__aeabi_dmul>
 80011ec:	4603      	mov	r3, r0
 80011ee:	460c      	mov	r4, r1
 80011f0:	4618      	mov	r0, r3
 80011f2:	4621      	mov	r1, r4
 80011f4:	4b53      	ldr	r3, [pc, #332]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80011f6:	cb18      	ldmia	r3, {r3, r4}
 80011f8:	461a      	mov	r2, r3
 80011fa:	4623      	mov	r3, r4
 80011fc:	f7ff f96c 	bl	80004d8 <__aeabi_dmul>
 8001200:	4603      	mov	r3, r0
 8001202:	460c      	mov	r4, r1
 8001204:	4618      	mov	r0, r3
 8001206:	4621      	mov	r1, r4
 8001208:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800120a:	cb18      	ldmia	r3, {r3, r4}
 800120c:	461a      	mov	r2, r3
 800120e:	4623      	mov	r3, r4
 8001210:	f7fe ffac 	bl	800016c <__adddf3>
 8001214:	4603      	mov	r3, r0
 8001216:	460c      	mov	r4, r1
 8001218:	4a4b      	ldr	r2, [pc, #300]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800121a:	e9c2 3400 	strd	r3, r4, [r2]
			Ud = (KD1 / deltaT) * (error_vel_act - error_vel_ant);
 800121e:	4b4b      	ldr	r3, [pc, #300]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001220:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001224:	4b35      	ldr	r3, [pc, #212]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001226:	cb18      	ldmia	r3, {r3, r4}
 8001228:	461a      	mov	r2, r3
 800122a:	4623      	mov	r3, r4
 800122c:	f7ff fa7e 	bl	800072c <__aeabi_ddiv>
 8001230:	4603      	mov	r3, r0
 8001232:	460c      	mov	r4, r1
 8001234:	461d      	mov	r5, r3
 8001236:	4626      	mov	r6, r4
 8001238:	4b3c      	ldr	r3, [pc, #240]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800123a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800123e:	4b41      	ldr	r3, [pc, #260]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001240:	cb18      	ldmia	r3, {r3, r4}
 8001242:	461a      	mov	r2, r3
 8001244:	4623      	mov	r3, r4
 8001246:	f7fe ff8f 	bl	8000168 <__aeabi_dsub>
 800124a:	4603      	mov	r3, r0
 800124c:	460c      	mov	r4, r1
 800124e:	461a      	mov	r2, r3
 8001250:	4623      	mov	r3, r4
 8001252:	4628      	mov	r0, r5
 8001254:	4631      	mov	r1, r6
 8001256:	f7ff f93f 	bl	80004d8 <__aeabi_dmul>
 800125a:	4603      	mov	r3, r0
 800125c:	460c      	mov	r4, r1
 800125e:	4a3c      	ldr	r2, [pc, #240]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001260:	e9c2 3400 	strd	r3, r4, [r2]
			if (velocidad_consigna > 0) {
 8001264:	4b30      	ldr	r3, [pc, #192]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001266:	e9d3 0100 	ldrd	r0, r1, [r3]
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	f04f 0300 	mov.w	r3, #0
 8001272:	f7ff fbc1 	bl	80009f8 <__aeabi_dcmpgt>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d06d      	beq.n	8001358 <HAL_TIM_PeriodElapsedCallback+0x2d8>
				duty_cycle_pid = (uint32_t) fabs(
						duty_cycle_pid + (Up + Ui_actual + Ud));
 800127c:	4b35      	ldr	r3, [pc, #212]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f8af 	bl	80003e4 <__aeabi_ui2d>
 8001286:	4605      	mov	r5, r0
 8001288:	460e      	mov	r6, r1
 800128a:	4b2c      	ldr	r3, [pc, #176]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800128c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001292:	cb18      	ldmia	r3, {r3, r4}
 8001294:	461a      	mov	r2, r3
 8001296:	4623      	mov	r3, r4
 8001298:	f7fe ff68 	bl	800016c <__adddf3>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4618      	mov	r0, r3
 80012a2:	4621      	mov	r1, r4
 80012a4:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80012a6:	cb18      	ldmia	r3, {r3, r4}
 80012a8:	461a      	mov	r2, r3
 80012aa:	4623      	mov	r3, r4
 80012ac:	f7fe ff5e 	bl	800016c <__adddf3>
 80012b0:	4603      	mov	r3, r0
 80012b2:	460c      	mov	r4, r1
 80012b4:	461a      	mov	r2, r3
 80012b6:	4623      	mov	r3, r4
 80012b8:	4628      	mov	r0, r5
 80012ba:	4631      	mov	r1, r6
 80012bc:	f7fe ff56 	bl	800016c <__adddf3>
 80012c0:	4603      	mov	r3, r0
 80012c2:	460c      	mov	r4, r1
				duty_cycle_pid = (uint32_t) fabs(
 80012c4:	469a      	mov	sl, r3
 80012c6:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 80012ca:	4650      	mov	r0, sl
 80012cc:	4659      	mov	r1, fp
 80012ce:	f7ff fbc5 	bl	8000a5c <__aeabi_d2uiz>
 80012d2:	4602      	mov	r2, r0
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	e07c      	b.n	80013d4 <HAL_TIM_PeriodElapsedCallback+0x354>
 80012da:	bf00      	nop
 80012dc:	f3af 8000 	nop.w
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40bce000 	.word	0x40bce000
 80012e8:	40012c00 	.word	0x40012c00
 80012ec:	20000240 	.word	0x20000240
 80012f0:	200003b8 	.word	0x200003b8
 80012f4:	20000248 	.word	0x20000248
 80012f8:	20000244 	.word	0x20000244
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000258 	.word	0x20000258
 8001304:	404e0000 	.word	0x404e0000
 8001308:	20000260 	.word	0x20000260
 800130c:	2000024c 	.word	0x2000024c
 8001310:	2000035c 	.word	0x2000035c
 8001314:	20000254 	.word	0x20000254
 8001318:	20000250 	.word	0x20000250
 800131c:	20000268 	.word	0x20000268
 8001320:	20000270 	.word	0x20000270
 8001324:	20000038 	.word	0x20000038
 8001328:	200002a0 	.word	0x200002a0
 800132c:	20000280 	.word	0x20000280
 8001330:	2000003c 	.word	0x2000003c
 8001334:	200002b0 	.word	0x200002b0
 8001338:	20000008 	.word	0x20000008
 800133c:	200002c0 	.word	0x200002c0
 8001340:	20000010 	.word	0x20000010
 8001344:	20000288 	.word	0x20000288
 8001348:	200002b8 	.word	0x200002b8
 800134c:	20000018 	.word	0x20000018
 8001350:	200002c8 	.word	0x200002c8
 8001354:	200002f0 	.word	0x200002f0
			} else if (velocidad_consigna < 0) {
 8001358:	4b9d      	ldr	r3, [pc, #628]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x550>)
 800135a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	f04f 0300 	mov.w	r3, #0
 8001366:	f7ff fb29 	bl	80009bc <__aeabi_dcmplt>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d02e      	beq.n	80013ce <HAL_TIM_PeriodElapsedCallback+0x34e>
				duty_cycle_pid = (uint32_t) fabs(
						duty_cycle_pid - (Up + Ui_actual + Ud));
 8001370:	4b98      	ldr	r3, [pc, #608]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f835 	bl	80003e4 <__aeabi_ui2d>
 800137a:	4605      	mov	r5, r0
 800137c:	460e      	mov	r6, r1
 800137e:	4b96      	ldr	r3, [pc, #600]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8001380:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001384:	4b95      	ldr	r3, [pc, #596]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8001386:	cb18      	ldmia	r3, {r3, r4}
 8001388:	461a      	mov	r2, r3
 800138a:	4623      	mov	r3, r4
 800138c:	f7fe feee 	bl	800016c <__adddf3>
 8001390:	4603      	mov	r3, r0
 8001392:	460c      	mov	r4, r1
 8001394:	4618      	mov	r0, r3
 8001396:	4621      	mov	r1, r4
 8001398:	4b91      	ldr	r3, [pc, #580]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x560>)
 800139a:	cb18      	ldmia	r3, {r3, r4}
 800139c:	461a      	mov	r2, r3
 800139e:	4623      	mov	r3, r4
 80013a0:	f7fe fee4 	bl	800016c <__adddf3>
 80013a4:	4603      	mov	r3, r0
 80013a6:	460c      	mov	r4, r1
 80013a8:	461a      	mov	r2, r3
 80013aa:	4623      	mov	r3, r4
 80013ac:	4628      	mov	r0, r5
 80013ae:	4631      	mov	r1, r6
 80013b0:	f7fe feda 	bl	8000168 <__aeabi_dsub>
 80013b4:	4603      	mov	r3, r0
 80013b6:	460c      	mov	r4, r1
				duty_cycle_pid = (uint32_t) fabs(
 80013b8:	4698      	mov	r8, r3
 80013ba:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 80013be:	4640      	mov	r0, r8
 80013c0:	4649      	mov	r1, r9
 80013c2:	f7ff fb4b 	bl	8000a5c <__aeabi_d2uiz>
 80013c6:	4602      	mov	r2, r0
 80013c8:	4b82      	ldr	r3, [pc, #520]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	e002      	b.n	80013d4 <HAL_TIM_PeriodElapsedCallback+0x354>
			} else {
				duty_cycle_pid = 0;
 80013ce:	4b81      	ldr	r3, [pc, #516]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
			}

			if (duty_cycle_pid > 14000) {
 80013d4:	4b7f      	ldr	r3, [pc, #508]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80013dc:	4293      	cmp	r3, r2
 80013de:	d903      	bls.n	80013e8 <HAL_TIM_PeriodElapsedCallback+0x368>
				duty_cycle_pid = 14000;
 80013e0:	4b7c      	ldr	r3, [pc, #496]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80013e2:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80013e6:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle_pid);
 80013e8:	4b7e      	ldr	r3, [pc, #504]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a79      	ldr	r2, [pc, #484]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	635a      	str	r2, [r3, #52]	; 0x34
			Ui_anterior = Ui_actual;
 80013f2:	4b7a      	ldr	r3, [pc, #488]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x55c>)
 80013f4:	cb18      	ldmia	r3, {r3, r4}
 80013f6:	4a7c      	ldr	r2, [pc, #496]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x568>)
 80013f8:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant = error_vel_act;
 80013fc:	4b7b      	ldr	r3, [pc, #492]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80013fe:	cb18      	ldmia	r3, {r3, r4}
 8001400:	4a7b      	ldr	r2, [pc, #492]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8001402:	e9c2 3400 	strd	r3, r4, [r2]

			/*
			 * ------------------control motor 2
			 */
			error_vel_act2 = velocidad_consigna2 - velocidadRPM2;
 8001406:	4b7b      	ldr	r3, [pc, #492]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001408:	e9d3 0100 	ldrd	r0, r1, [r3]
 800140c:	4b7a      	ldr	r3, [pc, #488]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x578>)
 800140e:	cb18      	ldmia	r3, {r3, r4}
 8001410:	461a      	mov	r2, r3
 8001412:	4623      	mov	r3, r4
 8001414:	f7fe fea8 	bl	8000168 <__aeabi_dsub>
 8001418:	4603      	mov	r3, r0
 800141a:	460c      	mov	r4, r1
 800141c:	4a77      	ldr	r2, [pc, #476]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x57c>)
 800141e:	e9c2 3400 	strd	r3, r4, [r2]
//			}
//			else if(error_vel_act2==0){
//				Ui_anterior2=0;
//			}
//			error_vel_act2= fabs(error_vel_act2);
			if (stop2 == 1) {
 8001422:	4b77      	ldr	r3, [pc, #476]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d106      	bne.n	8001438 <HAL_TIM_PeriodElapsedCallback+0x3b8>
				Ui_anterior2 = 0;
 800142a:	4a76      	ldr	r2, [pc, #472]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x584>)
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	f04f 0400 	mov.w	r4, #0
 8001434:	e9c2 3400 	strd	r3, r4, [r2]
			}
			Up2 = KP2 * error_vel_act2;
 8001438:	4b73      	ldr	r3, [pc, #460]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800143a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800143e:	4b6f      	ldr	r3, [pc, #444]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001440:	cb18      	ldmia	r3, {r3, r4}
 8001442:	461a      	mov	r2, r3
 8001444:	4623      	mov	r3, r4
 8001446:	f7ff f847 	bl	80004d8 <__aeabi_dmul>
 800144a:	4603      	mov	r3, r0
 800144c:	460c      	mov	r4, r1
 800144e:	4a6f      	ldr	r2, [pc, #444]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001450:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual2 = Ui_anterior2 + KI2 * deltaT * error_vel_ant2;
 8001454:	4b6e      	ldr	r3, [pc, #440]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001456:	e9d3 0100 	ldrd	r0, r1, [r3]
 800145a:	4b6e      	ldr	r3, [pc, #440]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x594>)
 800145c:	cb18      	ldmia	r3, {r3, r4}
 800145e:	461a      	mov	r2, r3
 8001460:	4623      	mov	r3, r4
 8001462:	f7ff f839 	bl	80004d8 <__aeabi_dmul>
 8001466:	4603      	mov	r3, r0
 8001468:	460c      	mov	r4, r1
 800146a:	4618      	mov	r0, r3
 800146c:	4621      	mov	r1, r4
 800146e:	4b6a      	ldr	r3, [pc, #424]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001470:	cb18      	ldmia	r3, {r3, r4}
 8001472:	461a      	mov	r2, r3
 8001474:	4623      	mov	r3, r4
 8001476:	f7ff f82f 	bl	80004d8 <__aeabi_dmul>
 800147a:	4603      	mov	r3, r0
 800147c:	460c      	mov	r4, r1
 800147e:	4618      	mov	r0, r3
 8001480:	4621      	mov	r1, r4
 8001482:	4b60      	ldr	r3, [pc, #384]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8001484:	cb18      	ldmia	r3, {r3, r4}
 8001486:	461a      	mov	r2, r3
 8001488:	4623      	mov	r3, r4
 800148a:	f7fe fe6f 	bl	800016c <__adddf3>
 800148e:	4603      	mov	r3, r0
 8001490:	460c      	mov	r4, r1
 8001492:	4a62      	ldr	r2, [pc, #392]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001494:	e9c2 3400 	strd	r3, r4, [r2]
			Ud2 = KD2 / deltaT * (error_vel_act2 - error_vel_ant2);
 8001498:	4b61      	ldr	r3, [pc, #388]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800149a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800149e:	4b5d      	ldr	r3, [pc, #372]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x594>)
 80014a0:	cb18      	ldmia	r3, {r3, r4}
 80014a2:	461a      	mov	r2, r3
 80014a4:	4623      	mov	r3, r4
 80014a6:	f7ff f941 	bl	800072c <__aeabi_ddiv>
 80014aa:	4603      	mov	r3, r0
 80014ac:	460c      	mov	r4, r1
 80014ae:	461d      	mov	r5, r3
 80014b0:	4626      	mov	r6, r4
 80014b2:	4b52      	ldr	r3, [pc, #328]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80014b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014b8:	4b57      	ldr	r3, [pc, #348]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80014ba:	cb18      	ldmia	r3, {r3, r4}
 80014bc:	461a      	mov	r2, r3
 80014be:	4623      	mov	r3, r4
 80014c0:	f7fe fe52 	bl	8000168 <__aeabi_dsub>
 80014c4:	4603      	mov	r3, r0
 80014c6:	460c      	mov	r4, r1
 80014c8:	461a      	mov	r2, r3
 80014ca:	4623      	mov	r3, r4
 80014cc:	4628      	mov	r0, r5
 80014ce:	4631      	mov	r1, r6
 80014d0:	f7ff f802 	bl	80004d8 <__aeabi_dmul>
 80014d4:	4603      	mov	r3, r0
 80014d6:	460c      	mov	r4, r1
 80014d8:	4a52      	ldr	r2, [pc, #328]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80014da:	e9c2 3400 	strd	r3, r4, [r2]
			if (velocidad_consigna2 > 0) {
 80014de:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80014e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	f7ff fa84 	bl	80009f8 <__aeabi_dcmpgt>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d02f      	beq.n	8001556 <HAL_TIM_PeriodElapsedCallback+0x4d6>
				duty_cycle_pid2 = (uint32_t) fabs(
						duty_cycle_pid2 + (Up2 + Ui_actual2 + Ud2));
 80014f6:	4b4c      	ldr	r3, [pc, #304]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe ff72 	bl	80003e4 <__aeabi_ui2d>
 8001500:	4605      	mov	r5, r0
 8001502:	460e      	mov	r6, r1
 8001504:	4b41      	ldr	r3, [pc, #260]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001506:	e9d3 0100 	ldrd	r0, r1, [r3]
 800150a:	4b44      	ldr	r3, [pc, #272]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800150c:	cb18      	ldmia	r3, {r3, r4}
 800150e:	461a      	mov	r2, r3
 8001510:	4623      	mov	r3, r4
 8001512:	f7fe fe2b 	bl	800016c <__adddf3>
 8001516:	4603      	mov	r3, r0
 8001518:	460c      	mov	r4, r1
 800151a:	4618      	mov	r0, r3
 800151c:	4621      	mov	r1, r4
 800151e:	4b41      	ldr	r3, [pc, #260]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8001520:	cb18      	ldmia	r3, {r3, r4}
 8001522:	461a      	mov	r2, r3
 8001524:	4623      	mov	r3, r4
 8001526:	f7fe fe21 	bl	800016c <__adddf3>
 800152a:	4603      	mov	r3, r0
 800152c:	460c      	mov	r4, r1
 800152e:	461a      	mov	r2, r3
 8001530:	4623      	mov	r3, r4
 8001532:	4628      	mov	r0, r5
 8001534:	4631      	mov	r1, r6
 8001536:	f7fe fe19 	bl	800016c <__adddf3>
 800153a:	4603      	mov	r3, r0
 800153c:	460c      	mov	r4, r1
				duty_cycle_pid2 = (uint32_t) fabs(
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800154a:	f7ff fa87 	bl	8000a5c <__aeabi_d2uiz>
 800154e:	4602      	mov	r2, r0
 8001550:	4b35      	ldr	r3, [pc, #212]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e06d      	b.n	8001632 <HAL_TIM_PeriodElapsedCallback+0x5b2>
			} else if (velocidad_consigna2 < 0) {
 8001556:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001558:	e9d3 0100 	ldrd	r0, r1, [r3]
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	f7ff fa2a 	bl	80009bc <__aeabi_dcmplt>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d05e      	beq.n	800162c <HAL_TIM_PeriodElapsedCallback+0x5ac>
				duty_cycle_pid2 = (uint32_t) fabs(
						duty_cycle_pid2 - (Up2 + Ui_actual2 + Ud2));
 800156e:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ff36 	bl	80003e4 <__aeabi_ui2d>
 8001578:	4605      	mov	r5, r0
 800157a:	460e      	mov	r6, r1
 800157c:	4b23      	ldr	r3, [pc, #140]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800157e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001584:	cb18      	ldmia	r3, {r3, r4}
 8001586:	461a      	mov	r2, r3
 8001588:	4623      	mov	r3, r4
 800158a:	f7fe fdef 	bl	800016c <__adddf3>
 800158e:	4603      	mov	r3, r0
 8001590:	460c      	mov	r4, r1
 8001592:	4618      	mov	r0, r3
 8001594:	4621      	mov	r1, r4
 8001596:	4b23      	ldr	r3, [pc, #140]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8001598:	cb18      	ldmia	r3, {r3, r4}
 800159a:	461a      	mov	r2, r3
 800159c:	4623      	mov	r3, r4
 800159e:	f7fe fde5 	bl	800016c <__adddf3>
 80015a2:	4603      	mov	r3, r0
 80015a4:	460c      	mov	r4, r1
 80015a6:	461a      	mov	r2, r3
 80015a8:	4623      	mov	r3, r4
 80015aa:	4628      	mov	r0, r5
 80015ac:	4631      	mov	r1, r6
 80015ae:	f7fe fddb 	bl	8000168 <__aeabi_dsub>
 80015b2:	4603      	mov	r3, r0
 80015b4:	460c      	mov	r4, r1
				duty_cycle_pid2 = (uint32_t) fabs(
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015c2:	f7ff fa4b 	bl	8000a5c <__aeabi_d2uiz>
 80015c6:	4602      	mov	r2, r0
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	e031      	b.n	8001632 <HAL_TIM_PeriodElapsedCallback+0x5b2>
 80015ce:	bf00      	nop
 80015d0:	200002a0 	.word	0x200002a0
 80015d4:	200002f0 	.word	0x200002f0
 80015d8:	200002c0 	.word	0x200002c0
 80015dc:	200002b8 	.word	0x200002b8
 80015e0:	200002c8 	.word	0x200002c8
 80015e4:	20000474 	.word	0x20000474
 80015e8:	200002b0 	.word	0x200002b0
 80015ec:	20000280 	.word	0x20000280
 80015f0:	20000288 	.word	0x20000288
 80015f4:	200002a8 	.word	0x200002a8
 80015f8:	20000270 	.word	0x20000270
 80015fc:	20000290 	.word	0x20000290
 8001600:	20000040 	.word	0x20000040
 8001604:	200002d0 	.word	0x200002d0
 8001608:	20000020 	.word	0x20000020
 800160c:	200002e0 	.word	0x200002e0
 8001610:	20000028 	.word	0x20000028
 8001614:	20000000 	.word	0x20000000
 8001618:	20000298 	.word	0x20000298
 800161c:	200002d8 	.word	0x200002d8
 8001620:	20000030 	.word	0x20000030
 8001624:	200002e8 	.word	0x200002e8
 8001628:	200002f4 	.word	0x200002f4
			} else {
				duty_cycle_pid2 = 0;
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
			}
			if (duty_cycle_pid2 > 14000) {
 8001632:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x658>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f243 62b0 	movw	r2, #14000	; 0x36b0
 800163a:	4293      	cmp	r3, r2
 800163c:	d903      	bls.n	8001646 <HAL_TIM_PeriodElapsedCallback+0x5c6>
				duty_cycle_pid2 = 14000;
 800163e:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x658>)
 8001640:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8001644:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle_pid2);
 8001646:	4b25      	ldr	r3, [pc, #148]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a23      	ldr	r2, [pc, #140]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800164c:	6812      	ldr	r2, [r2, #0]
 800164e:	63da      	str	r2, [r3, #60]	; 0x3c
			Ui_anterior2 = Ui_actual2;
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8001652:	cb18      	ldmia	r3, {r3, r4}
 8001654:	4a23      	ldr	r2, [pc, #140]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8001656:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant2 = error_vel_act2;
 800165a:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 800165c:	cb18      	ldmia	r3, {r3, r4}
 800165e:	4a23      	ldr	r2, [pc, #140]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x66c>)
 8001660:	e9c2 3400 	strd	r3, r4, [r2]
		} else { //Overflow
			contOUFlow2++;
//			printf("overflow motor 2 \r\n");
		}
	}
}
 8001664:	e032      	b.n	80016cc <HAL_TIM_PeriodElapsedCallback+0x64c>
	} else if (htim->Instance == TIM3) {
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a21      	ldr	r2, [pc, #132]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d114      	bne.n	800169a <HAL_TIM_PeriodElapsedCallback+0x61a>
		if (__HAL_TIM_GET_COUNTER(&htim3) > (htim->Init.Period + 1) / 2) { //Underflow
 8001670:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x674>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	3301      	adds	r3, #1
 800167c:	085b      	lsrs	r3, r3, #1
 800167e:	429a      	cmp	r2, r3
 8001680:	d905      	bls.n	800168e <HAL_TIM_PeriodElapsedCallback+0x60e>
			contOUFlow--;
 8001682:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3b01      	subs	r3, #1
 8001688:	4a1b      	ldr	r2, [pc, #108]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x678>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	e01e      	b.n	80016cc <HAL_TIM_PeriodElapsedCallback+0x64c>
			contOUFlow++;
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	3301      	adds	r3, #1
 8001694:	4a18      	ldr	r2, [pc, #96]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	e018      	b.n	80016cc <HAL_TIM_PeriodElapsedCallback+0x64c>
	} else if (htim->Instance == TIM4) {
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a17      	ldr	r2, [pc, #92]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x67c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d113      	bne.n	80016cc <HAL_TIM_PeriodElapsedCallback+0x64c>
		if (__HAL_TIM_GET_COUNTER(&htim4) > (htim->Init.Period + 1) / 2) { //Underflow
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x680>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	3301      	adds	r3, #1
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d905      	bls.n	80016c2 <HAL_TIM_PeriodElapsedCallback+0x642>
			contOUFlow2--;
 80016b6:	4b13      	ldr	r3, [pc, #76]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x684>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	4a11      	ldr	r2, [pc, #68]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x684>)
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	e004      	b.n	80016cc <HAL_TIM_PeriodElapsedCallback+0x64c>
			contOUFlow2++;
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x684>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	3301      	adds	r3, #1
 80016c8:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x684>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016d6:	bf00      	nop
 80016d8:	200002f4 	.word	0x200002f4
 80016dc:	20000474 	.word	0x20000474
 80016e0:	200002d8 	.word	0x200002d8
 80016e4:	200002d0 	.word	0x200002d0
 80016e8:	20000290 	.word	0x20000290
 80016ec:	20000298 	.word	0x20000298
 80016f0:	40000400 	.word	0x40000400
 80016f4:	200003b8 	.word	0x200003b8
 80016f8:	20000240 	.word	0x20000240
 80016fc:	40000800 	.word	0x40000800
 8001700:	2000035c 	.word	0x2000035c
 8001704:	2000024c 	.word	0x2000024c

08001708 <HAL_SPI_RxCpltCallback>:

/**
 * @brief  The application entry point.
 * @retval int
 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	num_spi = num_spi + 10;
 8001710:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <HAL_SPI_RxCpltCallback+0xc8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	330a      	adds	r3, #10
 8001716:	4a2e      	ldr	r2, [pc, #184]	; (80017d0 <HAL_SPI_RxCpltCallback+0xc8>)
 8001718:	6013      	str	r3, [r2, #0]
	if (hspi->Instance == SPI2) {
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a2d      	ldr	r2, [pc, #180]	; (80017d4 <HAL_SPI_RxCpltCallback+0xcc>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d151      	bne.n	80017c8 <HAL_SPI_RxCpltCallback+0xc0>
		switch (in_buffer[0]) {
 8001724:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <HAL_SPI_RxCpltCallback+0xd0>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b0d      	cmp	r3, #13
 800172a:	d010      	beq.n	800174e <HAL_SPI_RxCpltCallback+0x46>
 800172c:	2b0d      	cmp	r3, #13
 800172e:	dc02      	bgt.n	8001736 <HAL_SPI_RxCpltCallback+0x2e>
 8001730:	2b08      	cmp	r3, #8
 8001732:	d01a      	beq.n	800176a <HAL_SPI_RxCpltCallback+0x62>
 8001734:	e028      	b.n	8001788 <HAL_SPI_RxCpltCallback+0x80>
 8001736:	2b3a      	cmp	r3, #58	; 0x3a
 8001738:	d002      	beq.n	8001740 <HAL_SPI_RxCpltCallback+0x38>
 800173a:	2b3b      	cmp	r3, #59	; 0x3b
 800173c:	d007      	beq.n	800174e <HAL_SPI_RxCpltCallback+0x46>
 800173e:	e023      	b.n	8001788 <HAL_SPI_RxCpltCallback+0x80>
		case ':': //Comienzo de la trama

			interpreteComando(&in_buffer[1]); //Consigna motor 1
 8001740:	4826      	ldr	r0, [pc, #152]	; (80017dc <HAL_SPI_RxCpltCallback+0xd4>)
 8001742:	f7ff f9fb 	bl	8000b3c <interpreteComando>
			interpreteComando(&in_buffer[8]); //Consigna motor 2
 8001746:	4826      	ldr	r0, [pc, #152]	; (80017e0 <HAL_SPI_RxCpltCallback+0xd8>)
 8001748:	f7ff f9f8 	bl	8000b3c <interpreteComando>
			//interpreteComando(&in_buffer[15]); //Consulta velocidades
			break;
 800174c:	e037      	b.n	80017be <HAL_SPI_RxCpltCallback+0xb6>
		case '\r': //Retorno, fin de trama.
		case ';':  //Fin de trama.
			if (flagRx) {
 800174e:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <HAL_SPI_RxCpltCallback+0xdc>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d02e      	beq.n	80017b4 <HAL_SPI_RxCpltCallback+0xac>
				flagRx = 0;
 8001756:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <HAL_SPI_RxCpltCallback+0xdc>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
				buffer[indRx] = 0;
 800175c:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <HAL_SPI_RxCpltCallback+0xe0>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b22      	ldr	r3, [pc, #136]	; (80017ec <HAL_SPI_RxCpltCallback+0xe4>)
 8001764:	2100      	movs	r1, #0
 8001766:	5499      	strb	r1, [r3, r2]
//		  			interpreteComando();
			}
			break;
 8001768:	e024      	b.n	80017b4 <HAL_SPI_RxCpltCallback+0xac>
		case 8: //Retroceso es permitido de esta manera.
			if (flagRx) {
 800176a:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <HAL_SPI_RxCpltCallback+0xdc>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d022      	beq.n	80017b8 <HAL_SPI_RxCpltCallback+0xb0>
				if (indRx > 0) {
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_SPI_RxCpltCallback+0xe0>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d01e      	beq.n	80017b8 <HAL_SPI_RxCpltCallback+0xb0>
					indRx--;
 800177a:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_SPI_RxCpltCallback+0xe0>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	3b01      	subs	r3, #1
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_SPI_RxCpltCallback+0xe0>)
 8001784:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8001786:	e017      	b.n	80017b8 <HAL_SPI_RxCpltCallback+0xb0>
		default: //Almacenamiento de la trama.
			if (flagRx) {
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_SPI_RxCpltCallback+0xdc>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d015      	beq.n	80017bc <HAL_SPI_RxCpltCallback+0xb4>
				buffer[indRx] = byte;
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_SPI_RxCpltCallback+0xe0>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <HAL_SPI_RxCpltCallback+0xe8>)
 8001798:	7819      	ldrb	r1, [r3, #0]
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <HAL_SPI_RxCpltCallback+0xe4>)
 800179c:	5499      	strb	r1, [r3, r2]
				if (indRx < MAX_BUFFER - 1) {
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_SPI_RxCpltCallback+0xe0>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b26      	cmp	r3, #38	; 0x26
 80017a4:	d80a      	bhi.n	80017bc <HAL_SPI_RxCpltCallback+0xb4>
					indRx++;
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <HAL_SPI_RxCpltCallback+0xe0>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	3301      	adds	r3, #1
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_SPI_RxCpltCallback+0xe0>)
 80017b0:	701a      	strb	r2, [r3, #0]
				}

			}
			break;
 80017b2:	e003      	b.n	80017bc <HAL_SPI_RxCpltCallback+0xb4>
			break;
 80017b4:	bf00      	nop
 80017b6:	e002      	b.n	80017be <HAL_SPI_RxCpltCallback+0xb6>
			break;
 80017b8:	bf00      	nop
 80017ba:	e000      	b.n	80017be <HAL_SPI_RxCpltCallback+0xb6>
			break;
 80017bc:	bf00      	nop
		}
		indexBuf++;
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <HAL_SPI_RxCpltCallback+0xec>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <HAL_SPI_RxCpltCallback+0xec>)
 80017c6:	6013      	str	r3, [r2, #0]
		/* Receive one byte in interrupt mode */
		//HAL_SPI_TransmitReceive_IT(&hspi2, &out_buffer[indexBuf], &byte, 1);
//		  HAL_SPI_Receive_IT(&hspi2, &byte, 1);
		//HAL_SPI_Receive_IT(&hspi2, in_buffer, 14);
	}
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000278 	.word	0x20000278
 80017d4:	40003800 	.word	0x40003800
 80017d8:	200003a8 	.word	0x200003a8
 80017dc:	200003a9 	.word	0x200003a9
 80017e0:	200003b0 	.word	0x200003b0
 80017e4:	200003b6 	.word	0x200003b6
 80017e8:	2000023c 	.word	0x2000023c
 80017ec:	20000400 	.word	0x20000400
 80017f0:	20000428 	.word	0x20000428
 80017f4:	2000027c 	.word	0x2000027c

080017f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80017f8:	b5b0      	push	{r4, r5, r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017fe:	f000 fe59 	bl	80024b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001802:	f000 f89d 	bl	8001940 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001806:	f000 fadd 	bl	8001dc4 <MX_GPIO_Init>
	MX_TIM1_Init();
 800180a:	f000 f915 	bl	8001a38 <MX_TIM1_Init>
	MX_TIM2_Init();
 800180e:	f000 f9b1 	bl	8001b74 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001812:	f000 fa2f 	bl	8001c74 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001816:	f000 fa81 	bl	8001d1c <MX_TIM4_Init>
	MX_SPI2_Init();
 800181a:	f000 f8d7 	bl	80019cc <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */

	//HAL_UART_Receive_IT(&huart2, &byte, 1);
	HAL_SPI_Receive_IT(&hspi2, in_buffer, 17);
 800181e:	2211      	movs	r2, #17
 8001820:	493d      	ldr	r1, [pc, #244]	; (8001918 <main+0x120>)
 8001822:	483e      	ldr	r0, [pc, #248]	; (800191c <main+0x124>)
 8001824:	f001 ff6a 	bl	80036fc <HAL_SPI_Receive_IT>

	HAL_TIM_Base_Start_IT(&htim1);
 8001828:	483d      	ldr	r0, [pc, #244]	; (8001920 <main+0x128>)
 800182a:	f002 fcf5 	bl	8004218 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 800182e:	2100      	movs	r1, #0
 8001830:	483b      	ldr	r0, [pc, #236]	; (8001920 <main+0x128>)
 8001832:	f002 fd9b 	bl	800436c <HAL_TIM_OC_Start_IT>

	/*Se activan canales para generacion PWM- */
	/*canal 1 para motor 1 */
	/*canal  para motor 2*/
	HAL_TIM_Base_Start(&htim2);
 8001836:	483b      	ldr	r0, [pc, #236]	; (8001924 <main+0x12c>)
 8001838:	f002 fca4 	bl	8004184 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 800183c:	2100      	movs	r1, #0
 800183e:	4839      	ldr	r0, [pc, #228]	; (8001924 <main+0x12c>)
 8001840:	f002 fed4 	bl	80045ec <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001844:	2108      	movs	r1, #8
 8001846:	4837      	ldr	r0, [pc, #220]	; (8001924 <main+0x12c>)
 8001848:	f002 fed0 	bl	80045ec <HAL_TIM_PWM_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 800184c:	4836      	ldr	r0, [pc, #216]	; (8001928 <main+0x130>)
 800184e:	f002 fce3 	bl	8004218 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001852:	213c      	movs	r1, #60	; 0x3c
 8001854:	4834      	ldr	r0, [pc, #208]	; (8001928 <main+0x130>)
 8001856:	f003 f853 	bl	8004900 <HAL_TIM_Encoder_Start_IT>

	HAL_TIM_Base_Start_IT(&htim4);
 800185a:	4834      	ldr	r0, [pc, #208]	; (800192c <main+0x134>)
 800185c:	f002 fcdc 	bl	8004218 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001860:	213c      	movs	r1, #60	; 0x3c
 8001862:	4832      	ldr	r0, [pc, #200]	; (800192c <main+0x134>)
 8001864:	f003 f84c 	bl	8004900 <HAL_TIM_Encoder_Start_IT>

	/*Se activa en sentido positivo del motor  1*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001868:	2201      	movs	r2, #1
 800186a:	2110      	movs	r1, #16
 800186c:	4830      	ldr	r0, [pc, #192]	; (8001930 <main+0x138>)
 800186e:	f001 f983 	bl	8002b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2120      	movs	r1, #32
 8001876:	482e      	ldr	r0, [pc, #184]	; (8001930 <main+0x138>)
 8001878:	f001 f97e 	bl	8002b78 <HAL_GPIO_WritePin>

	/*Se activa el sentido positivo del motor 2*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001882:	482b      	ldr	r0, [pc, #172]	; (8001930 <main+0x138>)
 8001884:	f001 f978 	bl	8002b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800188e:	4828      	ldr	r0, [pc, #160]	; (8001930 <main+0x138>)
 8001890:	f001 f972 	bl	8002b78 <HAL_GPIO_WritePin>
	/*Se fuerza valor del contador del timer 3 y 4 para lecturas de encoders*/
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001894:	4b24      	ldr	r3, [pc, #144]	; (8001928 <main+0x130>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2200      	movs	r2, #0
 800189a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800189c:	4b23      	ldr	r3, [pc, #140]	; (800192c <main+0x134>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t out_buffer[18] = { ':', 'w', '1', '+', '2', '5', ';', ':', 'w', '2','+', '2', '5', ';', ':', 'w', '?', ';' };
 80018a4:	4b23      	ldr	r3, [pc, #140]	; (8001934 <main+0x13c>)
 80018a6:	1d3c      	adds	r4, r7, #4
 80018a8:	461d      	mov	r5, r3
 80018aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ae:	682b      	ldr	r3, [r5, #0]
 80018b0:	8023      	strh	r3, [r4, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80018b2:	2201      	movs	r2, #1
 80018b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b8:	481f      	ldr	r0, [pc, #124]	; (8001938 <main+0x140>)
 80018ba:	f001 f95d 	bl	8002b78 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018c4:	481c      	ldr	r0, [pc, #112]	; (8001938 <main+0x140>)
 80018c6:	f001 f957 	bl	8002b78 <HAL_GPIO_WritePin>
		//HAL_SPI_TransmitReceive_IT(&hspi2, out_buffer, in_buffer, 14);
		HAL_SPI_Transmit(&hspi2, out_buffer, 18, 1);
 80018ca:	1d39      	adds	r1, r7, #4
 80018cc:	2301      	movs	r3, #1
 80018ce:	2212      	movs	r2, #18
 80018d0:	4812      	ldr	r0, [pc, #72]	; (800191c <main+0x124>)
 80018d2:	f001 fdd7 	bl	8003484 <HAL_SPI_Transmit>
		//HAL_SPI_Receive(&hspi2, in_buffer, 14, 1);
		HAL_Delay(250);
 80018d6:	20fa      	movs	r0, #250	; 0xfa
 80018d8:	f000 fe4e 	bl	8002578 <HAL_Delay>
		HAL_SPI_Receive_IT(&hspi2, in_buffer, 14);
 80018dc:	220e      	movs	r2, #14
 80018de:	490e      	ldr	r1, [pc, #56]	; (8001918 <main+0x120>)
 80018e0:	480e      	ldr	r0, [pc, #56]	; (800191c <main+0x124>)
 80018e2:	f001 ff0b 	bl	80036fc <HAL_SPI_Receive_IT>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80018e6:	2201      	movs	r2, #1
 80018e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ec:	4812      	ldr	r0, [pc, #72]	; (8001938 <main+0x140>)
 80018ee:	f001 f943 	bl	8002b78 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80018f2:	2201      	movs	r2, #1
 80018f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018f8:	4810      	ldr	r0, [pc, #64]	; (800193c <main+0x144>)
 80018fa:	f001 f93d 	bl	8002b78 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80018fe:	2064      	movs	r0, #100	; 0x64
 8001900:	f000 fe3a 	bl	8002578 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800190a:	480c      	ldr	r0, [pc, #48]	; (800193c <main+0x144>)
 800190c:	f001 f934 	bl	8002b78 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001910:	2064      	movs	r0, #100	; 0x64
 8001912:	f000 fe31 	bl	8002578 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8001916:	e7d2      	b.n	80018be <main+0xc6>
 8001918:	200003a8 	.word	0x200003a8
 800191c:	20000304 	.word	0x20000304
 8001920:	2000042c 	.word	0x2000042c
 8001924:	20000474 	.word	0x20000474
 8001928:	200003b8 	.word	0x200003b8
 800192c:	2000035c 	.word	0x2000035c
 8001930:	40010800 	.word	0x40010800
 8001934:	08007bf0 	.word	0x08007bf0
 8001938:	40010c00 	.word	0x40010c00
 800193c:	40011000 	.word	0x40011000

08001940 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b090      	sub	sp, #64	; 0x40
 8001944:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001946:	f107 0318 	add.w	r3, r7, #24
 800194a:	2228      	movs	r2, #40	; 0x28
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f003 ff10 	bl	8005774 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001962:	2301      	movs	r3, #1
 8001964:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001966:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800196a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001970:	2301      	movs	r3, #1
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001974:	2302      	movs	r3, #2
 8001976:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001978:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800197e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001984:	f107 0318 	add.w	r3, r7, #24
 8001988:	4618      	mov	r0, r3
 800198a:	f001 f90d 	bl	8002ba8 <HAL_RCC_OscConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <SystemClock_Config+0x58>
		Error_Handler();
 8001994:	f000 fa9c 	bl	8001ed0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001998:	230f      	movs	r3, #15
 800199a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800199c:	2302      	movs	r3, #2
 800199e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	2102      	movs	r1, #2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 fb78 	bl	80030a8 <HAL_RCC_ClockConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <SystemClock_Config+0x82>
		Error_Handler();
 80019be:	f000 fa87 	bl	8001ed0 <Error_Handler>
	}
}
 80019c2:	bf00      	nop
 80019c4:	3740      	adds	r7, #64	; 0x40
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <MX_SPI2_Init+0x64>)
 80019d2:	4a18      	ldr	r2, [pc, #96]	; (8001a34 <MX_SPI2_Init+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <MX_SPI2_Init+0x64>)
 80019d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019dc:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <MX_SPI2_Init+0x64>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <MX_SPI2_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_SPI2_Init+0x64>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_SPI2_Init+0x64>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MX_SPI2_Init+0x64>)
 80019f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019fc:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <MX_SPI2_Init+0x64>)
 8001a00:	2238      	movs	r2, #56	; 0x38
 8001a02:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <MX_SPI2_Init+0x64>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_SPI2_Init+0x64>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <MX_SPI2_Init+0x64>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <MX_SPI2_Init+0x64>)
 8001a18:	220a      	movs	r2, #10
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001a1c:	4804      	ldr	r0, [pc, #16]	; (8001a30 <MX_SPI2_Init+0x64>)
 8001a1e:	f001 fcad 	bl	800337c <HAL_SPI_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_SPI2_Init+0x60>
		Error_Handler();
 8001a28:	f000 fa52 	bl	8001ed0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000304 	.word	0x20000304
 8001a34:	40003800 	.word	0x40003800

08001a38 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b096      	sub	sp, #88	; 0x58
 8001a3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	615a      	str	r2, [r3, #20]
 8001a68:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 fe7f 	bl	8005774 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001a76:	4b3d      	ldr	r3, [pc, #244]	; (8001b6c <MX_TIM1_Init+0x134>)
 8001a78:	4a3d      	ldr	r2, [pc, #244]	; (8001b70 <MX_TIM1_Init+0x138>)
 8001a7a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 11;
 8001a7c:	4b3b      	ldr	r3, [pc, #236]	; (8001b6c <MX_TIM1_Init+0x134>)
 8001a7e:	220b      	movs	r2, #11
 8001a80:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <MX_TIM1_Init+0x134>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 59999;
 8001a88:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <MX_TIM1_Init+0x134>)
 8001a8a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001a8e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	4b36      	ldr	r3, [pc, #216]	; (8001b6c <MX_TIM1_Init+0x134>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001a96:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <MX_TIM1_Init+0x134>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9c:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <MX_TIM1_Init+0x134>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001aa2:	4832      	ldr	r0, [pc, #200]	; (8001b6c <MX_TIM1_Init+0x134>)
 8001aa4:	f002 fb1f 	bl	80040e6 <HAL_TIM_Base_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM1_Init+0x7a>
		Error_Handler();
 8001aae:	f000 fa0f 	bl	8001ed0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab6:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001ab8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001abc:	4619      	mov	r1, r3
 8001abe:	482b      	ldr	r0, [pc, #172]	; (8001b6c <MX_TIM1_Init+0x134>)
 8001ac0:	f003 f9ea 	bl	8004e98 <HAL_TIM_ConfigClockSource>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM1_Init+0x96>
		Error_Handler();
 8001aca:	f000 fa01 	bl	8001ed0 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim1) != HAL_OK) {
 8001ace:	4827      	ldr	r0, [pc, #156]	; (8001b6c <MX_TIM1_Init+0x134>)
 8001ad0:	f002 fbf4 	bl	80042bc <HAL_TIM_OC_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM1_Init+0xa6>
		Error_Handler();
 8001ada:	f000 f9f9 	bl	8001ed0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001ae6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aea:	4619      	mov	r1, r3
 8001aec:	481f      	ldr	r0, [pc, #124]	; (8001b6c <MX_TIM1_Init+0x134>)
 8001aee:	f003 fd53 	bl	8005598 <HAL_TIMEx_MasterConfigSynchronization>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8001af8:	f000 f9ea 	bl	8001ed0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b10:	2300      	movs	r3, #0
 8001b12:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b14:	2300      	movs	r3, #0
 8001b16:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4812      	ldr	r0, [pc, #72]	; (8001b6c <MX_TIM1_Init+0x134>)
 8001b22:	f003 f8a3 	bl	8004c6c <HAL_TIM_OC_ConfigChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM1_Init+0xf8>
		Error_Handler();
 8001b2c:	f000 f9d0 	bl	8001ed0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b48:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4806      	ldr	r0, [pc, #24]	; (8001b6c <MX_TIM1_Init+0x134>)
 8001b54:	f003 fd7e 	bl	8005654 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 8001b5e:	f000 f9b7 	bl	8001ed0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	3758      	adds	r7, #88	; 0x58
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000042c 	.word	0x2000042c
 8001b70:	40012c00 	.word	0x40012c00

08001b74 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08e      	sub	sp, #56	; 0x38
 8001b78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b88:	f107 0320 	add.w	r3, r7, #32
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
 8001ba0:	615a      	str	r2, [r3, #20]
 8001ba2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001ba4:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <MX_TIM2_Init+0xfc>)
 8001ba6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001baa:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001bac:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <MX_TIM2_Init+0xfc>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb2:	4b2f      	ldr	r3, [pc, #188]	; (8001c70 <MX_TIM2_Init+0xfc>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 15000;
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <MX_TIM2_Init+0xfc>)
 8001bba:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001bbe:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <MX_TIM2_Init+0xfc>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc6:	4b2a      	ldr	r3, [pc, #168]	; (8001c70 <MX_TIM2_Init+0xfc>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001bcc:	4828      	ldr	r0, [pc, #160]	; (8001c70 <MX_TIM2_Init+0xfc>)
 8001bce:	f002 fa8a 	bl	80040e6 <HAL_TIM_Base_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM2_Init+0x68>
		Error_Handler();
 8001bd8:	f000 f97a 	bl	8001ed0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001be6:	4619      	mov	r1, r3
 8001be8:	4821      	ldr	r0, [pc, #132]	; (8001c70 <MX_TIM2_Init+0xfc>)
 8001bea:	f003 f955 	bl	8004e98 <HAL_TIM_ConfigClockSource>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM2_Init+0x84>
		Error_Handler();
 8001bf4:	f000 f96c 	bl	8001ed0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001bf8:	481d      	ldr	r0, [pc, #116]	; (8001c70 <MX_TIM2_Init+0xfc>)
 8001bfa:	f002 fc9f 	bl	800453c <HAL_TIM_PWM_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM2_Init+0x94>
		Error_Handler();
 8001c04:	f000 f964 	bl	8001ed0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001c10:	f107 0320 	add.w	r3, r7, #32
 8001c14:	4619      	mov	r1, r3
 8001c16:	4816      	ldr	r0, [pc, #88]	; (8001c70 <MX_TIM2_Init+0xfc>)
 8001c18:	f003 fcbe 	bl	8005598 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8001c22:	f000 f955 	bl	8001ed0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c26:	2360      	movs	r3, #96	; 0x60
 8001c28:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	480c      	ldr	r0, [pc, #48]	; (8001c70 <MX_TIM2_Init+0xfc>)
 8001c3e:	f003 f86d 	bl	8004d1c <HAL_TIM_PWM_ConfigChannel>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8001c48:	f000 f942 	bl	8001ed0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	2208      	movs	r2, #8
 8001c50:	4619      	mov	r1, r3
 8001c52:	4807      	ldr	r0, [pc, #28]	; (8001c70 <MX_TIM2_Init+0xfc>)
 8001c54:	f003 f862 	bl	8004d1c <HAL_TIM_PWM_ConfigChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8001c5e:	f000 f937 	bl	8001ed0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001c62:	4803      	ldr	r0, [pc, #12]	; (8001c70 <MX_TIM2_Init+0xfc>)
 8001c64:	f000 fa8c 	bl	8002180 <HAL_TIM_MspPostInit>

}
 8001c68:	bf00      	nop
 8001c6a:	3738      	adds	r7, #56	; 0x38
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000474 	.word	0x20000474

08001c74 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	; 0x30
 8001c78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001c7a:	f107 030c 	add.w	r3, r7, #12
 8001c7e:	2224      	movs	r2, #36	; 0x24
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f003 fd76 	bl	8005774 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001c90:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <MX_TIM3_Init+0xa0>)
 8001c92:	4a21      	ldr	r2, [pc, #132]	; (8001d18 <MX_TIM3_Init+0xa4>)
 8001c94:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001c96:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <MX_TIM3_Init+0xa0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <MX_TIM3_Init+0xa0>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 64999;
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <MX_TIM3_Init+0xa0>)
 8001ca4:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001ca8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <MX_TIM3_Init+0xa0>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <MX_TIM3_Init+0xa0>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480c      	ldr	r0, [pc, #48]	; (8001d14 <MX_TIM3_Init+0xa0>)
 8001ce2:	f002 fd6b 	bl	80047bc <HAL_TIM_Encoder_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM3_Init+0x7c>
		Error_Handler();
 8001cec:	f000 f8f0 	bl	8001ed0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_TIM3_Init+0xa0>)
 8001cfe:	f003 fc4b 	bl	8005598 <HAL_TIMEx_MasterConfigSynchronization>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001d08:	f000 f8e2 	bl	8001ed0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	3730      	adds	r7, #48	; 0x30
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	200003b8 	.word	0x200003b8
 8001d18:	40000400 	.word	0x40000400

08001d1c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08c      	sub	sp, #48	; 0x30
 8001d20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001d22:	f107 030c 	add.w	r3, r7, #12
 8001d26:	2224      	movs	r2, #36	; 0x24
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 fd22 	bl	8005774 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001d38:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <MX_TIM4_Init+0xa0>)
 8001d3a:	4a21      	ldr	r2, [pc, #132]	; (8001dc0 <MX_TIM4_Init+0xa4>)
 8001d3c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001d3e:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <MX_TIM4_Init+0xa0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d44:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <MX_TIM4_Init+0xa0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 64999;
 8001d4a:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <MX_TIM4_Init+0xa0>)
 8001d4c:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001d50:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d52:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <MX_TIM4_Init+0xa0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d58:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <MX_TIM4_Init+0xa0>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d66:	2301      	movs	r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d76:	2301      	movs	r3, #1
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	4619      	mov	r1, r3
 8001d88:	480c      	ldr	r0, [pc, #48]	; (8001dbc <MX_TIM4_Init+0xa0>)
 8001d8a:	f002 fd17 	bl	80047bc <HAL_TIM_Encoder_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM4_Init+0x7c>
		Error_Handler();
 8001d94:	f000 f89c 	bl	8001ed0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	4619      	mov	r1, r3
 8001da4:	4805      	ldr	r0, [pc, #20]	; (8001dbc <MX_TIM4_Init+0xa0>)
 8001da6:	f003 fbf7 	bl	8005598 <HAL_TIMEx_MasterConfigSynchronization>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM4_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001db0:	f000 f88e 	bl	8001ed0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	3730      	adds	r7, #48	; 0x30
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	2000035c 	.word	0x2000035c
 8001dc0:	40000800 	.word	0x40000800

08001dc4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001dca:	f107 0310 	add.w	r3, r7, #16
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd8:	4b39      	ldr	r3, [pc, #228]	; (8001ec0 <MX_GPIO_Init+0xfc>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	4a38      	ldr	r2, [pc, #224]	; (8001ec0 <MX_GPIO_Init+0xfc>)
 8001dde:	f043 0310 	orr.w	r3, r3, #16
 8001de2:	6193      	str	r3, [r2, #24]
 8001de4:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <MX_GPIO_Init+0xfc>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001df0:	4b33      	ldr	r3, [pc, #204]	; (8001ec0 <MX_GPIO_Init+0xfc>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	4a32      	ldr	r2, [pc, #200]	; (8001ec0 <MX_GPIO_Init+0xfc>)
 8001df6:	f043 0320 	orr.w	r3, r3, #32
 8001dfa:	6193      	str	r3, [r2, #24]
 8001dfc:	4b30      	ldr	r3, [pc, #192]	; (8001ec0 <MX_GPIO_Init+0xfc>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001e08:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <MX_GPIO_Init+0xfc>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	4a2c      	ldr	r2, [pc, #176]	; (8001ec0 <MX_GPIO_Init+0xfc>)
 8001e0e:	f043 0304 	orr.w	r3, r3, #4
 8001e12:	6193      	str	r3, [r2, #24]
 8001e14:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <MX_GPIO_Init+0xfc>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <MX_GPIO_Init+0xfc>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	4a26      	ldr	r2, [pc, #152]	; (8001ec0 <MX_GPIO_Init+0xfc>)
 8001e26:	f043 0308 	orr.w	r3, r3, #8
 8001e2a:	6193      	str	r3, [r2, #24]
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <MX_GPIO_Init+0xfc>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e3e:	4821      	ldr	r0, [pc, #132]	; (8001ec4 <MX_GPIO_Init+0x100>)
 8001e40:	f000 fe9a 	bl	8002b78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_9 | GPIO_PIN_11,
 8001e44:	2200      	movs	r2, #0
 8001e46:	f44f 6123 	mov.w	r1, #2608	; 0xa30
 8001e4a:	481f      	ldr	r0, [pc, #124]	; (8001ec8 <MX_GPIO_Init+0x104>)
 8001e4c:	f000 fe94 	bl	8002b78 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e50:	2200      	movs	r2, #0
 8001e52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e56:	481d      	ldr	r0, [pc, #116]	; (8001ecc <MX_GPIO_Init+0x108>)
 8001e58:	f000 fe8e 	bl	8002b78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e60:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e62:	2301      	movs	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6e:	f107 0310 	add.w	r3, r7, #16
 8001e72:	4619      	mov	r1, r3
 8001e74:	4813      	ldr	r0, [pc, #76]	; (8001ec4 <MX_GPIO_Init+0x100>)
 8001e76:	f000 fd25 	bl	80028c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 PA5 PA9 PA11 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_9 | GPIO_PIN_11;
 8001e7a:	f44f 6323 	mov.w	r3, #2608	; 0xa30
 8001e7e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e80:	2301      	movs	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	4619      	mov	r1, r3
 8001e92:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <MX_GPIO_Init+0x104>)
 8001e94:	f000 fd16 	bl	80028c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eaa:	f107 0310 	add.w	r3, r7, #16
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4806      	ldr	r0, [pc, #24]	; (8001ecc <MX_GPIO_Init+0x108>)
 8001eb2:	f000 fd07 	bl	80028c4 <HAL_GPIO_Init>

}
 8001eb6:	bf00      	nop
 8001eb8:	3720      	adds	r7, #32
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40011000 	.word	0x40011000
 8001ec8:	40010800 	.word	0x40010800
 8001ecc:	40010c00 	.word	0x40010c00

08001ed0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
	/* User can add his own implementation to report the HAL error return state */
//	__disable_irq();
//	while (1) {
//	}
	/* USER CODE END Error_Handler_Debug */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_MspInit+0x5c>)
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <HAL_MspInit+0x5c>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6193      	str	r3, [r2, #24]
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_MspInit+0x5c>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <HAL_MspInit+0x5c>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <HAL_MspInit+0x5c>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	61d3      	str	r3, [r2, #28]
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <HAL_MspInit+0x5c>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_MspInit+0x60>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <HAL_MspInit+0x60>)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40010000 	.word	0x40010000

08001f40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a20      	ldr	r2, [pc, #128]	; (8001fdc <HAL_SPI_MspInit+0x9c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d139      	bne.n	8001fd4 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f60:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <HAL_SPI_MspInit+0xa0>)
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	4a1e      	ldr	r2, [pc, #120]	; (8001fe0 <HAL_SPI_MspInit+0xa0>)
 8001f66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f6a:	61d3      	str	r3, [r2, #28]
 8001f6c:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <HAL_SPI_MspInit+0xa0>)
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_SPI_MspInit+0xa0>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	4a18      	ldr	r2, [pc, #96]	; (8001fe0 <HAL_SPI_MspInit+0xa0>)
 8001f7e:	f043 0308 	orr.w	r3, r3, #8
 8001f82:	6193      	str	r3, [r2, #24]
 8001f84:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_SPI_MspInit+0xa0>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f90:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001f94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9e:	f107 0310 	add.w	r3, r7, #16
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480f      	ldr	r0, [pc, #60]	; (8001fe4 <HAL_SPI_MspInit+0xa4>)
 8001fa6:	f000 fc8d 	bl	80028c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001faa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4809      	ldr	r0, [pc, #36]	; (8001fe4 <HAL_SPI_MspInit+0xa4>)
 8001fc0:	f000 fc80 	bl	80028c4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	2024      	movs	r0, #36	; 0x24
 8001fca:	f000 fbce 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001fce:	2024      	movs	r0, #36	; 0x24
 8001fd0:	f000 fbe7 	bl	80027a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3720      	adds	r7, #32
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40003800 	.word	0x40003800
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40010c00 	.word	0x40010c00

08001fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a22      	ldr	r2, [pc, #136]	; (8002080 <HAL_TIM_Base_MspInit+0x98>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d12c      	bne.n	8002054 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ffa:	4b22      	ldr	r3, [pc, #136]	; (8002084 <HAL_TIM_Base_MspInit+0x9c>)
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	4a21      	ldr	r2, [pc, #132]	; (8002084 <HAL_TIM_Base_MspInit+0x9c>)
 8002000:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002004:	6193      	str	r3, [r2, #24]
 8002006:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <HAL_TIM_Base_MspInit+0x9c>)
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	2100      	movs	r1, #0
 8002016:	2018      	movs	r0, #24
 8002018:	f000 fba7 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800201c:	2018      	movs	r0, #24
 800201e:	f000 fbc0 	bl	80027a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	2100      	movs	r1, #0
 8002026:	2019      	movs	r0, #25
 8002028:	f000 fb9f 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800202c:	2019      	movs	r0, #25
 800202e:	f000 fbb8 	bl	80027a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	201a      	movs	r0, #26
 8002038:	f000 fb97 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800203c:	201a      	movs	r0, #26
 800203e:	f000 fbb0 	bl	80027a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	2100      	movs	r1, #0
 8002046:	201b      	movs	r0, #27
 8002048:	f000 fb8f 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800204c:	201b      	movs	r0, #27
 800204e:	f000 fba8 	bl	80027a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002052:	e010      	b.n	8002076 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205c:	d10b      	bne.n	8002076 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_TIM_Base_MspInit+0x9c>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4a08      	ldr	r2, [pc, #32]	; (8002084 <HAL_TIM_Base_MspInit+0x9c>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	61d3      	str	r3, [r2, #28]
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_TIM_Base_MspInit+0x9c>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
}
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40012c00 	.word	0x40012c00
 8002084:	40021000 	.word	0x40021000

08002088 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0318 	add.w	r3, r7, #24
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a32      	ldr	r2, [pc, #200]	; (800216c <HAL_TIM_Encoder_MspInit+0xe4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d12c      	bne.n	8002102 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020a8:	4b31      	ldr	r3, [pc, #196]	; (8002170 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	4a30      	ldr	r2, [pc, #192]	; (8002170 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020ae:	f043 0302 	orr.w	r3, r3, #2
 80020b2:	61d3      	str	r3, [r2, #28]
 80020b4:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c0:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	4a2a      	ldr	r2, [pc, #168]	; (8002170 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020c6:	f043 0304 	orr.w	r3, r3, #4
 80020ca:	6193      	str	r3, [r2, #24]
 80020cc:	4b28      	ldr	r3, [pc, #160]	; (8002170 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020d8:	23c0      	movs	r3, #192	; 0xc0
 80020da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f107 0318 	add.w	r3, r7, #24
 80020e8:	4619      	mov	r1, r3
 80020ea:	4822      	ldr	r0, [pc, #136]	; (8002174 <HAL_TIM_Encoder_MspInit+0xec>)
 80020ec:	f000 fbea 	bl	80028c4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2100      	movs	r1, #0
 80020f4:	201d      	movs	r0, #29
 80020f6:	f000 fb38 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020fa:	201d      	movs	r0, #29
 80020fc:	f000 fb51 	bl	80027a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002100:	e030      	b.n	8002164 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1c      	ldr	r2, [pc, #112]	; (8002178 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d12b      	bne.n	8002164 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800210c:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_TIM_Encoder_MspInit+0xe8>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	4a17      	ldr	r2, [pc, #92]	; (8002170 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	61d3      	str	r3, [r2, #28]
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_TIM_Encoder_MspInit+0xe8>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a11      	ldr	r2, [pc, #68]	; (8002170 <HAL_TIM_Encoder_MspInit+0xe8>)
 800212a:	f043 0308 	orr.w	r3, r3, #8
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800213c:	23c0      	movs	r3, #192	; 0xc0
 800213e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	f107 0318 	add.w	r3, r7, #24
 800214c:	4619      	mov	r1, r3
 800214e:	480b      	ldr	r0, [pc, #44]	; (800217c <HAL_TIM_Encoder_MspInit+0xf4>)
 8002150:	f000 fbb8 	bl	80028c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	201e      	movs	r0, #30
 800215a:	f000 fb06 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800215e:	201e      	movs	r0, #30
 8002160:	f000 fb1f 	bl	80027a2 <HAL_NVIC_EnableIRQ>
}
 8002164:	bf00      	nop
 8002166:	3728      	adds	r7, #40	; 0x28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40000400 	.word	0x40000400
 8002170:	40021000 	.word	0x40021000
 8002174:	40010800 	.word	0x40010800
 8002178:	40000800 	.word	0x40000800
 800217c:	40010c00 	.word	0x40010c00

08002180 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	; 0x28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219e:	d142      	bne.n	8002226 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a0:	4b23      	ldr	r3, [pc, #140]	; (8002230 <HAL_TIM_MspPostInit+0xb0>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	4a22      	ldr	r2, [pc, #136]	; (8002230 <HAL_TIM_MspPostInit+0xb0>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6193      	str	r3, [r2, #24]
 80021ac:	4b20      	ldr	r3, [pc, #128]	; (8002230 <HAL_TIM_MspPostInit+0xb0>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_TIM_MspPostInit+0xb0>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <HAL_TIM_MspPostInit+0xb0>)
 80021be:	f043 0308 	orr.w	r3, r3, #8
 80021c2:	6193      	str	r3, [r2, #24]
 80021c4:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <HAL_TIM_MspPostInit+0xb0>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021d0:	2301      	movs	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2302      	movs	r3, #2
 80021da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4619      	mov	r1, r3
 80021e2:	4814      	ldr	r0, [pc, #80]	; (8002234 <HAL_TIM_MspPostInit+0xb4>)
 80021e4:	f000 fb6e 	bl	80028c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2302      	movs	r3, #2
 80021f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	480e      	ldr	r0, [pc, #56]	; (8002238 <HAL_TIM_MspPostInit+0xb8>)
 80021fe:	f000 fb61 	bl	80028c4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <HAL_TIM_MspPostInit+0xbc>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
 8002220:	4a06      	ldr	r2, [pc, #24]	; (800223c <HAL_TIM_MspPostInit+0xbc>)
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002226:	bf00      	nop
 8002228:	3728      	adds	r7, #40	; 0x28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	40010800 	.word	0x40010800
 8002238:	40010c00 	.word	0x40010c00
 800223c:	40010000 	.word	0x40010000

08002240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <NMI_Handler+0x4>

08002246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800224a:	e7fe      	b.n	800224a <HardFault_Handler+0x4>

0800224c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <MemManage_Handler+0x4>

08002252 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002256:	e7fe      	b.n	8002256 <BusFault_Handler+0x4>

08002258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800225c:	e7fe      	b.n	800225c <UsageFault_Handler+0x4>

0800225e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr

0800226a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr

08002282 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002286:	f000 f95b 	bl	8002540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <TIM1_BRK_IRQHandler+0x10>)
 8002296:	f002 fbe0 	bl	8004a5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	2000042c 	.word	0x2000042c

080022a4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <TIM1_UP_IRQHandler+0x10>)
 80022aa:	f002 fbd6 	bl	8004a5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	2000042c 	.word	0x2000042c

080022b8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022bc:	4802      	ldr	r0, [pc, #8]	; (80022c8 <TIM1_TRG_COM_IRQHandler+0x10>)
 80022be:	f002 fbcc 	bl	8004a5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000042c 	.word	0x2000042c

080022cc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <TIM1_CC_IRQHandler+0x10>)
 80022d2:	f002 fbc2 	bl	8004a5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	2000042c 	.word	0x2000042c

080022e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022e4:	4802      	ldr	r0, [pc, #8]	; (80022f0 <TIM3_IRQHandler+0x10>)
 80022e6:	f002 fbb8 	bl	8004a5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200003b8 	.word	0x200003b8

080022f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <TIM4_IRQHandler+0x10>)
 80022fa:	f002 fbae 	bl	8004a5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	2000035c 	.word	0x2000035c

08002308 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <SPI2_IRQHandler+0x10>)
 800230e:	f001 fb27 	bl	8003960 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000304 	.word	0x20000304

0800231c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	e00a      	b.n	8002344 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800232e:	f3af 8000 	nop.w
 8002332:	4601      	mov	r1, r0
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	60ba      	str	r2, [r7, #8]
 800233a:	b2ca      	uxtb	r2, r1
 800233c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	3301      	adds	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	dbf0      	blt.n	800232e <_read+0x12>
	}

return len;
 800234c:	687b      	ldr	r3, [r7, #4]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	e009      	b.n	800237c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	60ba      	str	r2, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	3301      	adds	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	dbf1      	blt.n	8002368 <_write+0x12>
	}
	return len;
 8002384:	687b      	ldr	r3, [r7, #4]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_close>:

int _close(int file)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
	return -1;
 8002396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023b4:	605a      	str	r2, [r3, #4]
	return 0;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <_isatty>:

int _isatty(int file)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
	return 1;
 80023ca:	2301      	movs	r3, #1
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b085      	sub	sp, #20
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
	return 0;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
	...

080023f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f8:	4a14      	ldr	r2, [pc, #80]	; (800244c <_sbrk+0x5c>)
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <_sbrk+0x60>)
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002404:	4b13      	ldr	r3, [pc, #76]	; (8002454 <_sbrk+0x64>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d102      	bne.n	8002412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <_sbrk+0x64>)
 800240e:	4a12      	ldr	r2, [pc, #72]	; (8002458 <_sbrk+0x68>)
 8002410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <_sbrk+0x64>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	429a      	cmp	r2, r3
 800241e:	d207      	bcs.n	8002430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002420:	f003 f97e 	bl	8005720 <__errno>
 8002424:	4602      	mov	r2, r0
 8002426:	230c      	movs	r3, #12
 8002428:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800242a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800242e:	e009      	b.n	8002444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <_sbrk+0x64>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002436:	4b07      	ldr	r3, [pc, #28]	; (8002454 <_sbrk+0x64>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	4a05      	ldr	r2, [pc, #20]	; (8002454 <_sbrk+0x64>)
 8002440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002442:	68fb      	ldr	r3, [r7, #12]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20005000 	.word	0x20005000
 8002450:	00000400 	.word	0x00000400
 8002454:	200002f8 	.word	0x200002f8
 8002458:	200004c8 	.word	0x200004c8

0800245c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002468:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800246a:	e003      	b.n	8002474 <LoopCopyDataInit>

0800246c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800246e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002470:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002472:	3104      	adds	r1, #4

08002474 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002474:	480a      	ldr	r0, [pc, #40]	; (80024a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002478:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800247a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800247c:	d3f6      	bcc.n	800246c <CopyDataInit>
  ldr r2, =_sbss
 800247e:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002480:	e002      	b.n	8002488 <LoopFillZerobss>

08002482 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002484:	f842 3b04 	str.w	r3, [r2], #4

08002488 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800248a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800248c:	d3f9      	bcc.n	8002482 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800248e:	f7ff ffe5 	bl	800245c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002492:	f003 f94b 	bl	800572c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002496:	f7ff f9af 	bl	80017f8 <main>
  bx lr
 800249a:	4770      	bx	lr
  ldr r3, =_sidata
 800249c:	08007f00 	.word	0x08007f00
  ldr r0, =_sdata
 80024a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80024a4:	20000220 	.word	0x20000220
  ldr r2, =_sbss
 80024a8:	20000220 	.word	0x20000220
  ldr r3, = _ebss
 80024ac:	200004c4 	.word	0x200004c4

080024b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024b0:	e7fe      	b.n	80024b0 <ADC1_2_IRQHandler>
	...

080024b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_Init+0x28>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a07      	ldr	r2, [pc, #28]	; (80024dc <HAL_Init+0x28>)
 80024be:	f043 0310 	orr.w	r3, r3, #16
 80024c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c4:	2003      	movs	r0, #3
 80024c6:	f000 f945 	bl	8002754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ca:	2000      	movs	r0, #0
 80024cc:	f000 f808 	bl	80024e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d0:	f7ff fd04 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40022000 	.word	0x40022000

080024e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <HAL_InitTick+0x54>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_InitTick+0x58>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4619      	mov	r1, r3
 80024f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 f95d 	bl	80027be <HAL_SYSTICK_Config>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e00e      	b.n	800252c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b0f      	cmp	r3, #15
 8002512:	d80a      	bhi.n	800252a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002514:	2200      	movs	r2, #0
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800251c:	f000 f925 	bl	800276a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002520:	4a06      	ldr	r2, [pc, #24]	; (800253c <HAL_InitTick+0x5c>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e000      	b.n	800252c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000044 	.word	0x20000044
 8002538:	2000004c 	.word	0x2000004c
 800253c:	20000048 	.word	0x20000048

08002540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_IncTick+0x1c>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_IncTick+0x20>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4413      	add	r3, r2
 8002550:	4a03      	ldr	r2, [pc, #12]	; (8002560 <HAL_IncTick+0x20>)
 8002552:	6013      	str	r3, [r2, #0]
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	2000004c 	.word	0x2000004c
 8002560:	200004bc 	.word	0x200004bc

08002564 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return uwTick;
 8002568:	4b02      	ldr	r3, [pc, #8]	; (8002574 <HAL_GetTick+0x10>)
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	200004bc 	.word	0x200004bc

08002578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002580:	f7ff fff0 	bl	8002564 <HAL_GetTick>
 8002584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002590:	d005      	beq.n	800259e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_Delay+0x40>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4413      	add	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800259e:	bf00      	nop
 80025a0:	f7ff ffe0 	bl	8002564 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d8f7      	bhi.n	80025a0 <HAL_Delay+0x28>
  {
  }
}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	2000004c 	.word	0x2000004c

080025bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d8:	4013      	ands	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ee:	4a04      	ldr	r2, [pc, #16]	; (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	60d3      	str	r3, [r2, #12]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <__NVIC_GetPriorityGrouping+0x18>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	f003 0307 	and.w	r3, r3, #7
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	2b00      	cmp	r3, #0
 8002630:	db0b      	blt.n	800264a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	4906      	ldr	r1, [pc, #24]	; (8002654 <__NVIC_EnableIRQ+0x34>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2001      	movs	r0, #1
 8002642:	fa00 f202 	lsl.w	r2, r0, r2
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	e000e100 	.word	0xe000e100

08002658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	6039      	str	r1, [r7, #0]
 8002662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	2b00      	cmp	r3, #0
 800266a:	db0a      	blt.n	8002682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	b2da      	uxtb	r2, r3
 8002670:	490c      	ldr	r1, [pc, #48]	; (80026a4 <__NVIC_SetPriority+0x4c>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	0112      	lsls	r2, r2, #4
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	440b      	add	r3, r1
 800267c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002680:	e00a      	b.n	8002698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	4908      	ldr	r1, [pc, #32]	; (80026a8 <__NVIC_SetPriority+0x50>)
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	3b04      	subs	r3, #4
 8002690:	0112      	lsls	r2, r2, #4
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	440b      	add	r3, r1
 8002696:	761a      	strb	r2, [r3, #24]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000e100 	.word	0xe000e100
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f1c3 0307 	rsb	r3, r3, #7
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	bf28      	it	cs
 80026ca:	2304      	movcs	r3, #4
 80026cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3304      	adds	r3, #4
 80026d2:	2b06      	cmp	r3, #6
 80026d4:	d902      	bls.n	80026dc <NVIC_EncodePriority+0x30>
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3b03      	subs	r3, #3
 80026da:	e000      	b.n	80026de <NVIC_EncodePriority+0x32>
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43da      	mvns	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	401a      	ands	r2, r3
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	43d9      	mvns	r1, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002704:	4313      	orrs	r3, r2
         );
}
 8002706:	4618      	mov	r0, r3
 8002708:	3724      	adds	r7, #36	; 0x24
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002720:	d301      	bcc.n	8002726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002722:	2301      	movs	r3, #1
 8002724:	e00f      	b.n	8002746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002726:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <SysTick_Config+0x40>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800272e:	210f      	movs	r1, #15
 8002730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002734:	f7ff ff90 	bl	8002658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002738:	4b05      	ldr	r3, [pc, #20]	; (8002750 <SysTick_Config+0x40>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800273e:	4b04      	ldr	r3, [pc, #16]	; (8002750 <SysTick_Config+0x40>)
 8002740:	2207      	movs	r2, #7
 8002742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	e000e010 	.word	0xe000e010

08002754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ff2d 	bl	80025bc <__NVIC_SetPriorityGrouping>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800276a:	b580      	push	{r7, lr}
 800276c:	b086      	sub	sp, #24
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800277c:	f7ff ff42 	bl	8002604 <__NVIC_GetPriorityGrouping>
 8002780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	6978      	ldr	r0, [r7, #20]
 8002788:	f7ff ff90 	bl	80026ac <NVIC_EncodePriority>
 800278c:	4602      	mov	r2, r0
 800278e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff5f 	bl	8002658 <__NVIC_SetPriority>
}
 800279a:	bf00      	nop
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff35 	bl	8002620 <__NVIC_EnableIRQ>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff ffa2 	bl	8002710 <SysTick_Config>
 80027cc:	4603      	mov	r3, r0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d005      	beq.n	80027fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2204      	movs	r2, #4
 80027f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
 80027f8:	e051      	b.n	800289e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 020e 	bic.w	r2, r2, #14
 8002808:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0201 	bic.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a22      	ldr	r2, [pc, #136]	; (80028a8 <HAL_DMA_Abort_IT+0xd0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d029      	beq.n	8002878 <HAL_DMA_Abort_IT+0xa0>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a20      	ldr	r2, [pc, #128]	; (80028ac <HAL_DMA_Abort_IT+0xd4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d022      	beq.n	8002874 <HAL_DMA_Abort_IT+0x9c>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1f      	ldr	r2, [pc, #124]	; (80028b0 <HAL_DMA_Abort_IT+0xd8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d01a      	beq.n	800286e <HAL_DMA_Abort_IT+0x96>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1d      	ldr	r2, [pc, #116]	; (80028b4 <HAL_DMA_Abort_IT+0xdc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d012      	beq.n	8002868 <HAL_DMA_Abort_IT+0x90>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <HAL_DMA_Abort_IT+0xe0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00a      	beq.n	8002862 <HAL_DMA_Abort_IT+0x8a>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1a      	ldr	r2, [pc, #104]	; (80028bc <HAL_DMA_Abort_IT+0xe4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d102      	bne.n	800285c <HAL_DMA_Abort_IT+0x84>
 8002856:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800285a:	e00e      	b.n	800287a <HAL_DMA_Abort_IT+0xa2>
 800285c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002860:	e00b      	b.n	800287a <HAL_DMA_Abort_IT+0xa2>
 8002862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002866:	e008      	b.n	800287a <HAL_DMA_Abort_IT+0xa2>
 8002868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800286c:	e005      	b.n	800287a <HAL_DMA_Abort_IT+0xa2>
 800286e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002872:	e002      	b.n	800287a <HAL_DMA_Abort_IT+0xa2>
 8002874:	2310      	movs	r3, #16
 8002876:	e000      	b.n	800287a <HAL_DMA_Abort_IT+0xa2>
 8002878:	2301      	movs	r3, #1
 800287a:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <HAL_DMA_Abort_IT+0xe8>)
 800287c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	4798      	blx	r3
    } 
  }
  return status;
 800289e:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40020008 	.word	0x40020008
 80028ac:	4002001c 	.word	0x4002001c
 80028b0:	40020030 	.word	0x40020030
 80028b4:	40020044 	.word	0x40020044
 80028b8:	40020058 	.word	0x40020058
 80028bc:	4002006c 	.word	0x4002006c
 80028c0:	40020000 	.word	0x40020000

080028c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b08b      	sub	sp, #44	; 0x2c
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d6:	e127      	b.n	8002b28 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028d8:	2201      	movs	r2, #1
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	f040 8116 	bne.w	8002b22 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b12      	cmp	r3, #18
 80028fc:	d034      	beq.n	8002968 <HAL_GPIO_Init+0xa4>
 80028fe:	2b12      	cmp	r3, #18
 8002900:	d80d      	bhi.n	800291e <HAL_GPIO_Init+0x5a>
 8002902:	2b02      	cmp	r3, #2
 8002904:	d02b      	beq.n	800295e <HAL_GPIO_Init+0x9a>
 8002906:	2b02      	cmp	r3, #2
 8002908:	d804      	bhi.n	8002914 <HAL_GPIO_Init+0x50>
 800290a:	2b00      	cmp	r3, #0
 800290c:	d031      	beq.n	8002972 <HAL_GPIO_Init+0xae>
 800290e:	2b01      	cmp	r3, #1
 8002910:	d01c      	beq.n	800294c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002912:	e048      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002914:	2b03      	cmp	r3, #3
 8002916:	d043      	beq.n	80029a0 <HAL_GPIO_Init+0xdc>
 8002918:	2b11      	cmp	r3, #17
 800291a:	d01b      	beq.n	8002954 <HAL_GPIO_Init+0x90>
          break;
 800291c:	e043      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800291e:	4a89      	ldr	r2, [pc, #548]	; (8002b44 <HAL_GPIO_Init+0x280>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d026      	beq.n	8002972 <HAL_GPIO_Init+0xae>
 8002924:	4a87      	ldr	r2, [pc, #540]	; (8002b44 <HAL_GPIO_Init+0x280>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d806      	bhi.n	8002938 <HAL_GPIO_Init+0x74>
 800292a:	4a87      	ldr	r2, [pc, #540]	; (8002b48 <HAL_GPIO_Init+0x284>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d020      	beq.n	8002972 <HAL_GPIO_Init+0xae>
 8002930:	4a86      	ldr	r2, [pc, #536]	; (8002b4c <HAL_GPIO_Init+0x288>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01d      	beq.n	8002972 <HAL_GPIO_Init+0xae>
          break;
 8002936:	e036      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002938:	4a85      	ldr	r2, [pc, #532]	; (8002b50 <HAL_GPIO_Init+0x28c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d019      	beq.n	8002972 <HAL_GPIO_Init+0xae>
 800293e:	4a85      	ldr	r2, [pc, #532]	; (8002b54 <HAL_GPIO_Init+0x290>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d016      	beq.n	8002972 <HAL_GPIO_Init+0xae>
 8002944:	4a84      	ldr	r2, [pc, #528]	; (8002b58 <HAL_GPIO_Init+0x294>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <HAL_GPIO_Init+0xae>
          break;
 800294a:	e02c      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	623b      	str	r3, [r7, #32]
          break;
 8002952:	e028      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	3304      	adds	r3, #4
 800295a:	623b      	str	r3, [r7, #32]
          break;
 800295c:	e023      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	3308      	adds	r3, #8
 8002964:	623b      	str	r3, [r7, #32]
          break;
 8002966:	e01e      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	330c      	adds	r3, #12
 800296e:	623b      	str	r3, [r7, #32]
          break;
 8002970:	e019      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800297a:	2304      	movs	r3, #4
 800297c:	623b      	str	r3, [r7, #32]
          break;
 800297e:	e012      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d105      	bne.n	8002994 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002988:	2308      	movs	r3, #8
 800298a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	611a      	str	r2, [r3, #16]
          break;
 8002992:	e008      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002994:	2308      	movs	r3, #8
 8002996:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	615a      	str	r2, [r3, #20]
          break;
 800299e:	e002      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029a0:	2300      	movs	r3, #0
 80029a2:	623b      	str	r3, [r7, #32]
          break;
 80029a4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2bff      	cmp	r3, #255	; 0xff
 80029aa:	d801      	bhi.n	80029b0 <HAL_GPIO_Init+0xec>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	e001      	b.n	80029b4 <HAL_GPIO_Init+0xf0>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3304      	adds	r3, #4
 80029b4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2bff      	cmp	r3, #255	; 0xff
 80029ba:	d802      	bhi.n	80029c2 <HAL_GPIO_Init+0xfe>
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	e002      	b.n	80029c8 <HAL_GPIO_Init+0x104>
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	3b08      	subs	r3, #8
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	210f      	movs	r1, #15
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	401a      	ands	r2, r3
 80029da:	6a39      	ldr	r1, [r7, #32]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	fa01 f303 	lsl.w	r3, r1, r3
 80029e2:	431a      	orrs	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8096 	beq.w	8002b22 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029f6:	4b59      	ldr	r3, [pc, #356]	; (8002b5c <HAL_GPIO_Init+0x298>)
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	4a58      	ldr	r2, [pc, #352]	; (8002b5c <HAL_GPIO_Init+0x298>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6193      	str	r3, [r2, #24]
 8002a02:	4b56      	ldr	r3, [pc, #344]	; (8002b5c <HAL_GPIO_Init+0x298>)
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a0e:	4a54      	ldr	r2, [pc, #336]	; (8002b60 <HAL_GPIO_Init+0x29c>)
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	3302      	adds	r3, #2
 8002a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	220f      	movs	r2, #15
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4b      	ldr	r2, [pc, #300]	; (8002b64 <HAL_GPIO_Init+0x2a0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <HAL_GPIO_Init+0x19e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4a      	ldr	r2, [pc, #296]	; (8002b68 <HAL_GPIO_Init+0x2a4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00d      	beq.n	8002a5e <HAL_GPIO_Init+0x19a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a49      	ldr	r2, [pc, #292]	; (8002b6c <HAL_GPIO_Init+0x2a8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d007      	beq.n	8002a5a <HAL_GPIO_Init+0x196>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a48      	ldr	r2, [pc, #288]	; (8002b70 <HAL_GPIO_Init+0x2ac>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_GPIO_Init+0x192>
 8002a52:	2303      	movs	r3, #3
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_Init+0x1a0>
 8002a56:	2304      	movs	r3, #4
 8002a58:	e004      	b.n	8002a64 <HAL_GPIO_Init+0x1a0>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e002      	b.n	8002a64 <HAL_GPIO_Init+0x1a0>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_GPIO_Init+0x1a0>
 8002a62:	2300      	movs	r3, #0
 8002a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a66:	f002 0203 	and.w	r2, r2, #3
 8002a6a:	0092      	lsls	r2, r2, #2
 8002a6c:	4093      	lsls	r3, r2
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a74:	493a      	ldr	r1, [pc, #232]	; (8002b60 <HAL_GPIO_Init+0x29c>)
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d006      	beq.n	8002a9c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a8e:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4938      	ldr	r1, [pc, #224]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]
 8002a9a:	e006      	b.n	8002aaa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a9c:	4b35      	ldr	r3, [pc, #212]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	4933      	ldr	r1, [pc, #204]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d006      	beq.n	8002ac4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ab6:	4b2f      	ldr	r3, [pc, #188]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	492e      	ldr	r1, [pc, #184]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
 8002ac2:	e006      	b.n	8002ad2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ac4:	4b2b      	ldr	r3, [pc, #172]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	4929      	ldr	r1, [pc, #164]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d006      	beq.n	8002aec <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ade:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	4924      	ldr	r1, [pc, #144]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
 8002aea:	e006      	b.n	8002afa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aec:	4b21      	ldr	r3, [pc, #132]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	491f      	ldr	r1, [pc, #124]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b06:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	491a      	ldr	r1, [pc, #104]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60cb      	str	r3, [r1, #12]
 8002b12:	e006      	b.n	8002b22 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b14:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	4915      	ldr	r1, [pc, #84]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	3301      	adds	r3, #1
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f47f aed0 	bne.w	80028d8 <HAL_GPIO_Init+0x14>
  }
}
 8002b38:	bf00      	nop
 8002b3a:	372c      	adds	r7, #44	; 0x2c
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	10210000 	.word	0x10210000
 8002b48:	10110000 	.word	0x10110000
 8002b4c:	10120000 	.word	0x10120000
 8002b50:	10310000 	.word	0x10310000
 8002b54:	10320000 	.word	0x10320000
 8002b58:	10220000 	.word	0x10220000
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40010000 	.word	0x40010000
 8002b64:	40010800 	.word	0x40010800
 8002b68:	40010c00 	.word	0x40010c00
 8002b6c:	40011000 	.word	0x40011000
 8002b70:	40011400 	.word	0x40011400
 8002b74:	40010400 	.word	0x40010400

08002b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
 8002b84:	4613      	mov	r3, r2
 8002b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b88:	787b      	ldrb	r3, [r7, #1]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b8e:	887a      	ldrh	r2, [r7, #2]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b94:	e003      	b.n	8002b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b96:	887b      	ldrh	r3, [r7, #2]
 8002b98:	041a      	lsls	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	611a      	str	r2, [r3, #16]
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e26c      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8087 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc8:	4b92      	ldr	r3, [pc, #584]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d00c      	beq.n	8002bee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bd4:	4b8f      	ldr	r3, [pc, #572]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d112      	bne.n	8002c06 <HAL_RCC_OscConfig+0x5e>
 8002be0:	4b8c      	ldr	r3, [pc, #560]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bec:	d10b      	bne.n	8002c06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bee:	4b89      	ldr	r3, [pc, #548]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d06c      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x12c>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d168      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e246      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x76>
 8002c10:	4b80      	ldr	r3, [pc, #512]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a7f      	ldr	r2, [pc, #508]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	e02e      	b.n	8002c7c <HAL_RCC_OscConfig+0xd4>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x98>
 8002c26:	4b7b      	ldr	r3, [pc, #492]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a7a      	ldr	r2, [pc, #488]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b78      	ldr	r3, [pc, #480]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a77      	ldr	r2, [pc, #476]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e01d      	b.n	8002c7c <HAL_RCC_OscConfig+0xd4>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0xbc>
 8002c4a:	4b72      	ldr	r3, [pc, #456]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a71      	ldr	r2, [pc, #452]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4b6f      	ldr	r3, [pc, #444]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a6e      	ldr	r2, [pc, #440]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e00b      	b.n	8002c7c <HAL_RCC_OscConfig+0xd4>
 8002c64:	4b6b      	ldr	r3, [pc, #428]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a6a      	ldr	r2, [pc, #424]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b68      	ldr	r3, [pc, #416]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a67      	ldr	r2, [pc, #412]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d013      	beq.n	8002cac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7ff fc6e 	bl	8002564 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c8c:	f7ff fc6a 	bl	8002564 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	; 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e1fa      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	4b5d      	ldr	r3, [pc, #372]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0xe4>
 8002caa:	e014      	b.n	8002cd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7ff fc5a 	bl	8002564 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7ff fc56 	bl	8002564 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e1e6      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x10c>
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d063      	beq.n	8002daa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ce2:	4b4c      	ldr	r3, [pc, #304]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cee:	4b49      	ldr	r3, [pc, #292]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d11c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x18c>
 8002cfa:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d116      	bne.n	8002d34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d06:	4b43      	ldr	r3, [pc, #268]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <HAL_RCC_OscConfig+0x176>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d001      	beq.n	8002d1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e1ba      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1e:	4b3d      	ldr	r3, [pc, #244]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4939      	ldr	r1, [pc, #228]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d32:	e03a      	b.n	8002daa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d020      	beq.n	8002d7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d3c:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7ff fc0f 	bl	8002564 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4a:	f7ff fc0b 	bl	8002564 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e19b      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	4b2d      	ldr	r3, [pc, #180]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d68:	4b2a      	ldr	r3, [pc, #168]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4927      	ldr	r1, [pc, #156]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	600b      	str	r3, [r1, #0]
 8002d7c:	e015      	b.n	8002daa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7e:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7ff fbee 	bl	8002564 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8c:	f7ff fbea 	bl	8002564 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e17a      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d03a      	beq.n	8002e2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d019      	beq.n	8002df2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dbe:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <HAL_RCC_OscConfig+0x274>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc4:	f7ff fbce 	bl	8002564 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dcc:	f7ff fbca 	bl	8002564 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e15a      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dde:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dea:	2001      	movs	r0, #1
 8002dec:	f000 faa8 	bl	8003340 <RCC_Delay>
 8002df0:	e01c      	b.n	8002e2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <HAL_RCC_OscConfig+0x274>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df8:	f7ff fbb4 	bl	8002564 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfe:	e00f      	b.n	8002e20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e00:	f7ff fbb0 	bl	8002564 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d908      	bls.n	8002e20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e140      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000
 8002e18:	42420000 	.word	0x42420000
 8002e1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e20:	4b9e      	ldr	r3, [pc, #632]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e9      	bne.n	8002e00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80a6 	beq.w	8002f86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3e:	4b97      	ldr	r3, [pc, #604]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10d      	bne.n	8002e66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4a:	4b94      	ldr	r3, [pc, #592]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	4a93      	ldr	r2, [pc, #588]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e54:	61d3      	str	r3, [r2, #28]
 8002e56:	4b91      	ldr	r3, [pc, #580]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e62:	2301      	movs	r3, #1
 8002e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b8e      	ldr	r3, [pc, #568]	; (80030a0 <HAL_RCC_OscConfig+0x4f8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d118      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e72:	4b8b      	ldr	r3, [pc, #556]	; (80030a0 <HAL_RCC_OscConfig+0x4f8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a8a      	ldr	r2, [pc, #552]	; (80030a0 <HAL_RCC_OscConfig+0x4f8>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7e:	f7ff fb71 	bl	8002564 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e86:	f7ff fb6d 	bl	8002564 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b64      	cmp	r3, #100	; 0x64
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e0fd      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	4b81      	ldr	r3, [pc, #516]	; (80030a0 <HAL_RCC_OscConfig+0x4f8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d106      	bne.n	8002eba <HAL_RCC_OscConfig+0x312>
 8002eac:	4b7b      	ldr	r3, [pc, #492]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4a7a      	ldr	r2, [pc, #488]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6213      	str	r3, [r2, #32]
 8002eb8:	e02d      	b.n	8002f16 <HAL_RCC_OscConfig+0x36e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCC_OscConfig+0x334>
 8002ec2:	4b76      	ldr	r3, [pc, #472]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4a75      	ldr	r2, [pc, #468]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	6213      	str	r3, [r2, #32]
 8002ece:	4b73      	ldr	r3, [pc, #460]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4a72      	ldr	r2, [pc, #456]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002ed4:	f023 0304 	bic.w	r3, r3, #4
 8002ed8:	6213      	str	r3, [r2, #32]
 8002eda:	e01c      	b.n	8002f16 <HAL_RCC_OscConfig+0x36e>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b05      	cmp	r3, #5
 8002ee2:	d10c      	bne.n	8002efe <HAL_RCC_OscConfig+0x356>
 8002ee4:	4b6d      	ldr	r3, [pc, #436]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4a6c      	ldr	r2, [pc, #432]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002eea:	f043 0304 	orr.w	r3, r3, #4
 8002eee:	6213      	str	r3, [r2, #32]
 8002ef0:	4b6a      	ldr	r3, [pc, #424]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4a69      	ldr	r2, [pc, #420]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6213      	str	r3, [r2, #32]
 8002efc:	e00b      	b.n	8002f16 <HAL_RCC_OscConfig+0x36e>
 8002efe:	4b67      	ldr	r3, [pc, #412]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4a66      	ldr	r2, [pc, #408]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	6213      	str	r3, [r2, #32]
 8002f0a:	4b64      	ldr	r3, [pc, #400]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4a63      	ldr	r2, [pc, #396]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d015      	beq.n	8002f4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1e:	f7ff fb21 	bl	8002564 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f24:	e00a      	b.n	8002f3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7ff fb1d 	bl	8002564 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e0ab      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3c:	4b57      	ldr	r3, [pc, #348]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0ee      	beq.n	8002f26 <HAL_RCC_OscConfig+0x37e>
 8002f48:	e014      	b.n	8002f74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4a:	f7ff fb0b 	bl	8002564 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7ff fb07 	bl	8002564 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e095      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f68:	4b4c      	ldr	r3, [pc, #304]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ee      	bne.n	8002f52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f74:	7dfb      	ldrb	r3, [r7, #23]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d105      	bne.n	8002f86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7a:	4b48      	ldr	r3, [pc, #288]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4a47      	ldr	r2, [pc, #284]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8081 	beq.w	8003092 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f90:	4b42      	ldr	r3, [pc, #264]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d061      	beq.n	8003060 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d146      	bne.n	8003032 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa4:	4b3f      	ldr	r3, [pc, #252]	; (80030a4 <HAL_RCC_OscConfig+0x4fc>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002faa:	f7ff fadb 	bl	8002564 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb2:	f7ff fad7 	bl	8002564 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e067      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc4:	4b35      	ldr	r3, [pc, #212]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f0      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd8:	d108      	bne.n	8002fec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fda:	4b30      	ldr	r3, [pc, #192]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	492d      	ldr	r1, [pc, #180]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fec:	4b2b      	ldr	r3, [pc, #172]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a19      	ldr	r1, [r3, #32]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	4927      	ldr	r1, [pc, #156]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003004:	4b27      	ldr	r3, [pc, #156]	; (80030a4 <HAL_RCC_OscConfig+0x4fc>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7ff faab 	bl	8002564 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003012:	f7ff faa7 	bl	8002564 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e037      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003024:	4b1d      	ldr	r3, [pc, #116]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x46a>
 8003030:	e02f      	b.n	8003092 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	4b1c      	ldr	r3, [pc, #112]	; (80030a4 <HAL_RCC_OscConfig+0x4fc>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7ff fa94 	bl	8002564 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003040:	f7ff fa90 	bl	8002564 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e020      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x498>
 800305e:	e018      	b.n	8003092 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e013      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	429a      	cmp	r2, r3
 800307e:	d106      	bne.n	800308e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d001      	beq.n	8003092 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40021000 	.word	0x40021000
 80030a0:	40007000 	.word	0x40007000
 80030a4:	42420060 	.word	0x42420060

080030a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0d0      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030bc:	4b6a      	ldr	r3, [pc, #424]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d910      	bls.n	80030ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	4b67      	ldr	r3, [pc, #412]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 0207 	bic.w	r2, r3, #7
 80030d2:	4965      	ldr	r1, [pc, #404]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030da:	4b63      	ldr	r3, [pc, #396]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0b8      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d020      	beq.n	800313a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003104:	4b59      	ldr	r3, [pc, #356]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4a58      	ldr	r2, [pc, #352]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800310e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800311c:	4b53      	ldr	r3, [pc, #332]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4a52      	ldr	r2, [pc, #328]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003126:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003128:	4b50      	ldr	r3, [pc, #320]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	494d      	ldr	r1, [pc, #308]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d040      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d107      	bne.n	800315e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314e:	4b47      	ldr	r3, [pc, #284]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d115      	bne.n	8003186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e07f      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d107      	bne.n	8003176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003166:	4b41      	ldr	r3, [pc, #260]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e073      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003176:	4b3d      	ldr	r3, [pc, #244]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e06b      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003186:	4b39      	ldr	r3, [pc, #228]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f023 0203 	bic.w	r2, r3, #3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4936      	ldr	r1, [pc, #216]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003198:	f7ff f9e4 	bl	8002564 <HAL_GetTick>
 800319c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a0:	f7ff f9e0 	bl	8002564 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e053      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b6:	4b2d      	ldr	r3, [pc, #180]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 020c 	and.w	r2, r3, #12
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d1eb      	bne.n	80031a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031c8:	4b27      	ldr	r3, [pc, #156]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d210      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b24      	ldr	r3, [pc, #144]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 0207 	bic.w	r2, r3, #7
 80031de:	4922      	ldr	r1, [pc, #136]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	4b20      	ldr	r3, [pc, #128]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e032      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003204:	4b19      	ldr	r3, [pc, #100]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4916      	ldr	r1, [pc, #88]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003222:	4b12      	ldr	r3, [pc, #72]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	490e      	ldr	r1, [pc, #56]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003236:	f000 f821 	bl	800327c <HAL_RCC_GetSysClockFreq>
 800323a:	4601      	mov	r1, r0
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 8003248:	5cd3      	ldrb	r3, [r2, r3]
 800324a:	fa21 f303 	lsr.w	r3, r1, r3
 800324e:	4a09      	ldr	r2, [pc, #36]	; (8003274 <HAL_RCC_ClockConfig+0x1cc>)
 8003250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003252:	4b09      	ldr	r3, [pc, #36]	; (8003278 <HAL_RCC_ClockConfig+0x1d0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff f942 	bl	80024e0 <HAL_InitTick>

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40022000 	.word	0x40022000
 800326c:	40021000 	.word	0x40021000
 8003270:	08007c18 	.word	0x08007c18
 8003274:	20000044 	.word	0x20000044
 8003278:	20000048 	.word	0x20000048

0800327c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800327c:	b490      	push	{r4, r7}
 800327e:	b08a      	sub	sp, #40	; 0x28
 8003280:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003282:	4b2a      	ldr	r3, [pc, #168]	; (800332c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003284:	1d3c      	adds	r4, r7, #4
 8003286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800328c:	4b28      	ldr	r3, [pc, #160]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb4>)
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	2300      	movs	r3, #0
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	2300      	movs	r3, #0
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032a6:	4b23      	ldr	r3, [pc, #140]	; (8003334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d002      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x40>
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d003      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0x46>
 80032ba:	e02d      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032bc:	4b1e      	ldr	r3, [pc, #120]	; (8003338 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032be:	623b      	str	r3, [r7, #32]
      break;
 80032c0:	e02d      	b.n	800331e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	0c9b      	lsrs	r3, r3, #18
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ce:	4413      	add	r3, r2
 80032d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d013      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032e0:	4b14      	ldr	r3, [pc, #80]	; (8003334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	0c5b      	lsrs	r3, r3, #17
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ee:	4413      	add	r3, r2
 80032f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	4a0f      	ldr	r2, [pc, #60]	; (8003338 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032fa:	fb02 f203 	mul.w	r2, r2, r3
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
 8003306:	e004      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	4a0c      	ldr	r2, [pc, #48]	; (800333c <HAL_RCC_GetSysClockFreq+0xc0>)
 800330c:	fb02 f303 	mul.w	r3, r2, r3
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	623b      	str	r3, [r7, #32]
      break;
 8003316:	e002      	b.n	800331e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003318:	4b07      	ldr	r3, [pc, #28]	; (8003338 <HAL_RCC_GetSysClockFreq+0xbc>)
 800331a:	623b      	str	r3, [r7, #32]
      break;
 800331c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800331e:	6a3b      	ldr	r3, [r7, #32]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3728      	adds	r7, #40	; 0x28
 8003324:	46bd      	mov	sp, r7
 8003326:	bc90      	pop	{r4, r7}
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	08007c04 	.word	0x08007c04
 8003330:	08007c14 	.word	0x08007c14
 8003334:	40021000 	.word	0x40021000
 8003338:	007a1200 	.word	0x007a1200
 800333c:	003d0900 	.word	0x003d0900

08003340 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <RCC_Delay+0x34>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <RCC_Delay+0x38>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	0a5b      	lsrs	r3, r3, #9
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800335c:	bf00      	nop
  }
  while (Delay --);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1e5a      	subs	r2, r3, #1
 8003362:	60fa      	str	r2, [r7, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f9      	bne.n	800335c <RCC_Delay+0x1c>
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000044 	.word	0x20000044
 8003378:	10624dd3 	.word	0x10624dd3

0800337c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e076      	b.n	800347c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	2b00      	cmp	r3, #0
 8003394:	d108      	bne.n	80033a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800339e:	d009      	beq.n	80033b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	61da      	str	r2, [r3, #28]
 80033a6:	e005      	b.n	80033b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fe fdb6 	bl	8001f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003438:	ea42 0103 	orr.w	r1, r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	0c1a      	lsrs	r2, r3, #16
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f002 0204 	and.w	r2, r2, #4
 800345a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69da      	ldr	r2, [r3, #28]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800346a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_SPI_Transmit+0x22>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e126      	b.n	80036f4 <HAL_SPI_Transmit+0x270>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034ae:	f7ff f859 	bl	8002564 <HAL_GetTick>
 80034b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d002      	beq.n	80034ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034c4:	2302      	movs	r3, #2
 80034c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034c8:	e10b      	b.n	80036e2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_SPI_Transmit+0x52>
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d102      	bne.n	80034dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034da:	e102      	b.n	80036e2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2203      	movs	r2, #3
 80034e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	88fa      	ldrh	r2, [r7, #6]
 80034f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	88fa      	ldrh	r2, [r7, #6]
 80034fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003522:	d10f      	bne.n	8003544 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003532:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003542:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354e:	2b40      	cmp	r3, #64	; 0x40
 8003550:	d007      	beq.n	8003562 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003560:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800356a:	d14b      	bne.n	8003604 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_SPI_Transmit+0xf6>
 8003574:	8afb      	ldrh	r3, [r7, #22]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d13e      	bne.n	80035f8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	881a      	ldrh	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	1c9a      	adds	r2, r3, #2
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800359e:	e02b      	b.n	80035f8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d112      	bne.n	80035d4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	881a      	ldrh	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	1c9a      	adds	r2, r3, #2
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80035d2:	e011      	b.n	80035f8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035d4:	f7fe ffc6 	bl	8002564 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d803      	bhi.n	80035ec <HAL_SPI_Transmit+0x168>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ea:	d102      	bne.n	80035f2 <HAL_SPI_Transmit+0x16e>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d102      	bne.n	80035f8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035f6:	e074      	b.n	80036e2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1ce      	bne.n	80035a0 <HAL_SPI_Transmit+0x11c>
 8003602:	e04c      	b.n	800369e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_SPI_Transmit+0x18e>
 800360c:	8afb      	ldrh	r3, [r7, #22]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d140      	bne.n	8003694 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	330c      	adds	r3, #12
 800361c:	7812      	ldrb	r2, [r2, #0]
 800361e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003638:	e02c      	b.n	8003694 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b02      	cmp	r3, #2
 8003646:	d113      	bne.n	8003670 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	330c      	adds	r3, #12
 8003652:	7812      	ldrb	r2, [r2, #0]
 8003654:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003664:	b29b      	uxth	r3, r3
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	86da      	strh	r2, [r3, #54]	; 0x36
 800366e:	e011      	b.n	8003694 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003670:	f7fe ff78 	bl	8002564 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d803      	bhi.n	8003688 <HAL_SPI_Transmit+0x204>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003686:	d102      	bne.n	800368e <HAL_SPI_Transmit+0x20a>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d102      	bne.n	8003694 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003692:	e026      	b.n	80036e2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1cd      	bne.n	800363a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	6839      	ldr	r1, [r7, #0]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 fc4e 	bl	8003f44 <SPI_EndRxTxTransaction>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	77fb      	strb	r3, [r7, #31]
 80036de:	e000      	b.n	80036e2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80036e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3720      	adds	r7, #32
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	4613      	mov	r3, r2
 8003708:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d110      	bne.n	8003738 <HAL_SPI_Receive_IT+0x3c>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800371e:	d10b      	bne.n	8003738 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2204      	movs	r2, #4
 8003724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f882 	bl	8003838 <HAL_SPI_TransmitReceive_IT>
 8003734:	4603      	mov	r3, r0
 8003736:	e076      	b.n	8003826 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_SPI_Receive_IT+0x4a>
 8003742:	2302      	movs	r3, #2
 8003744:	e06f      	b.n	8003826 <HAL_SPI_Receive_IT+0x12a>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b01      	cmp	r3, #1
 8003758:	d002      	beq.n	8003760 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800375a:	2302      	movs	r3, #2
 800375c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800375e:	e05d      	b.n	800381c <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <HAL_SPI_Receive_IT+0x70>
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d102      	bne.n	8003772 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003770:	e054      	b.n	800381c <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2204      	movs	r2, #4
 8003776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	88fa      	ldrh	r2, [r7, #6]
 800378a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <HAL_SPI_Receive_IT+0x134>)
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40
 80037b8:	e002      	b.n	80037c0 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4a1d      	ldr	r2, [pc, #116]	; (8003834 <HAL_SPI_Receive_IT+0x138>)
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c8:	d10f      	bne.n	80037ea <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80037f8:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	d008      	beq.n	800381a <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	e000      	b.n	800381c <HAL_SPI_Receive_IT+0x120>
  }

error :
 800381a:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003824:	7dfb      	ldrb	r3, [r7, #23]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	08003d49 	.word	0x08003d49
 8003834:	08003cff 	.word	0x08003cff

08003838 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_SPI_TransmitReceive_IT+0x20>
 8003854:	2302      	movs	r3, #2
 8003856:	e075      	b.n	8003944 <HAL_SPI_TransmitReceive_IT+0x10c>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003866:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800386e:	7dbb      	ldrb	r3, [r7, #22]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d00d      	beq.n	8003890 <HAL_SPI_TransmitReceive_IT+0x58>
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800387a:	d106      	bne.n	800388a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <HAL_SPI_TransmitReceive_IT+0x52>
 8003884:	7dbb      	ldrb	r3, [r7, #22]
 8003886:	2b04      	cmp	r3, #4
 8003888:	d002      	beq.n	8003890 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800388a:	2302      	movs	r3, #2
 800388c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800388e:	e054      	b.n	800393a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HAL_SPI_TransmitReceive_IT+0x6a>
 800389c:	887b      	ldrh	r3, [r7, #2]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038a6:	e048      	b.n	800393a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d003      	beq.n	80038bc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2205      	movs	r2, #5
 80038b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	887a      	ldrh	r2, [r7, #2]
 80038cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	887a      	ldrh	r2, [r7, #2]
 80038d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	887a      	ldrh	r2, [r7, #2]
 80038de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	887a      	ldrh	r2, [r7, #2]
 80038e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d006      	beq.n	80038fc <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4a17      	ldr	r2, [pc, #92]	; (8003950 <HAL_SPI_TransmitReceive_IT+0x118>)
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a17      	ldr	r2, [pc, #92]	; (8003954 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80038f8:	645a      	str	r2, [r3, #68]	; 0x44
 80038fa:	e005      	b.n	8003908 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4a16      	ldr	r2, [pc, #88]	; (8003958 <HAL_SPI_TransmitReceive_IT+0x120>)
 8003900:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4a15      	ldr	r2, [pc, #84]	; (800395c <HAL_SPI_TransmitReceive_IT+0x124>)
 8003906:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003916:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d008      	beq.n	8003938 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	e000      	b.n	800393a <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8003938:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003942:	7dfb      	ldrb	r3, [r7, #23]
}
 8003944:	4618      	mov	r0, r3
 8003946:	371c      	adds	r7, #28
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	08003c41 	.word	0x08003c41
 8003954:	08003ca1 	.word	0x08003ca1
 8003958:	08003b7d 	.word	0x08003b7d
 800395c:	08003be1 	.word	0x08003be1

08003960 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	099b      	lsrs	r3, r3, #6
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10f      	bne.n	80039a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	099b      	lsrs	r3, r3, #6
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d004      	beq.n	80039a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	4798      	blx	r3
    return;
 80039a2:	e0bf      	b.n	8003b24 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	085b      	lsrs	r3, r3, #1
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <HAL_SPI_IRQHandler+0x66>
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	09db      	lsrs	r3, r3, #7
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d004      	beq.n	80039c6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	4798      	blx	r3
    return;
 80039c4:	e0ae      	b.n	8003b24 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <HAL_SPI_IRQHandler+0x80>
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	099b      	lsrs	r3, r3, #6
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 80a2 	beq.w	8003b24 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 809b 	beq.w	8003b24 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	099b      	lsrs	r3, r3, #6
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d023      	beq.n	8003a42 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d011      	beq.n	8003a2a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0a:	f043 0204 	orr.w	r2, r3, #4
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	e00b      	b.n	8003a42 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	693b      	ldr	r3, [r7, #16]
        return;
 8003a40:	e070      	b.n	8003b24 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d014      	beq.n	8003a78 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	f043 0201 	orr.w	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d050      	beq.n	8003b22 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a8e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d104      	bne.n	8003aac <HAL_SPI_IRQHandler+0x14c>
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d034      	beq.n	8003b16 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0203 	bic.w	r2, r2, #3
 8003aba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d011      	beq.n	8003ae8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac8:	4a18      	ldr	r2, [pc, #96]	; (8003b2c <HAL_SPI_IRQHandler+0x1cc>)
 8003aca:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fe81 	bl	80027d8 <HAL_DMA_Abort_IT>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d016      	beq.n	8003b1e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af4:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <HAL_SPI_IRQHandler+0x1cc>)
 8003af6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fe fe6b 	bl	80027d8 <HAL_DMA_Abort_IT>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003b14:	e003      	b.n	8003b1e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f813 	bl	8003b42 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003b1c:	e000      	b.n	8003b20 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003b1e:	bf00      	nop
    return;
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
  }
}
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	08003b55 	.word	0x08003b55

08003b30 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr

08003b42 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f7ff ffe7 	bl	8003b42 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f103 020c 	add.w	r2, r3, #12
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b90:	7812      	ldrb	r2, [r2, #0]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10f      	bne.n	8003bd8 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bc6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d102      	bne.n	8003bd8 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f9d4 	bl	8003f80 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	7812      	ldrb	r2, [r2, #0]
 8003bf4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10f      	bne.n	8003c38 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c26:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f9a4 	bl	8003f80 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c38:	bf00      	nop
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c52:	b292      	uxth	r2, r2
 8003c54:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	1c9a      	adds	r2, r3, #2
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10f      	bne.n	8003c98 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c86:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d102      	bne.n	8003c98 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f974 	bl	8003f80 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c98:	bf00      	nop
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	881a      	ldrh	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	1c9a      	adds	r2, r3, #2
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10f      	bne.n	8003cf6 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ce4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f945 	bl	8003f80 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f103 020c 	add.w	r2, r3, #12
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	7812      	ldrb	r2, [r2, #0]
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f994 	bl	8004068 <SPI_CloseRx_ISR>
  }
}
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	b292      	uxth	r2, r2
 8003d5c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	1c9a      	adds	r2, r3, #2
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d102      	bne.n	8003d86 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f971 	bl	8004068 <SPI_CloseRx_ISR>
  }
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003da0:	f7fe fbe0 	bl	8002564 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	4413      	add	r3, r2
 8003dae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003db0:	f7fe fbd8 	bl	8002564 <HAL_GetTick>
 8003db4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003db6:	4b39      	ldr	r3, [pc, #228]	; (8003e9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	015b      	lsls	r3, r3, #5
 8003dbc:	0d1b      	lsrs	r3, r3, #20
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	fb02 f303 	mul.w	r3, r2, r3
 8003dc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dc6:	e054      	b.n	8003e72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dce:	d050      	beq.n	8003e72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dd0:	f7fe fbc8 	bl	8002564 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d902      	bls.n	8003de6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d13d      	bne.n	8003e62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003df4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dfe:	d111      	bne.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e08:	d004      	beq.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e12:	d107      	bne.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e2c:	d10f      	bne.n	8003e4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e017      	b.n	8003e92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	bf0c      	ite	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	2300      	movne	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d19b      	bne.n	8003dc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000044 	.word	0x20000044

08003ea0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eb4:	d111      	bne.n	8003eda <SPI_EndRxTransaction+0x3a>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ebe:	d004      	beq.n	8003eca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec8:	d107      	bne.n	8003eda <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ee2:	d117      	bne.n	8003f14 <SPI_EndRxTransaction+0x74>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eec:	d112      	bne.n	8003f14 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f7ff ff49 	bl	8003d90 <SPI_WaitFlagStateUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d01a      	beq.n	8003f3a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	f043 0220 	orr.w	r2, r3, #32
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e013      	b.n	8003f3c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2180      	movs	r1, #128	; 0x80
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7ff ff36 	bl	8003d90 <SPI_WaitFlagStateUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	f043 0220 	orr.w	r2, r3, #32
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e000      	b.n	8003f3c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2200      	movs	r2, #0
 8003f58:	2180      	movs	r1, #128	; 0x80
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7ff ff18 	bl	8003d90 <SPI_WaitFlagStateUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6a:	f043 0220 	orr.w	r2, r3, #32
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e000      	b.n	8003f78 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003f88:	4b35      	ldr	r3, [pc, #212]	; (8004060 <SPI_CloseRxTx_ISR+0xe0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a35      	ldr	r2, [pc, #212]	; (8004064 <SPI_CloseRxTx_ISR+0xe4>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	0a5b      	lsrs	r3, r3, #9
 8003f94:	2264      	movs	r2, #100	; 0x64
 8003f96:	fb02 f303 	mul.w	r3, r2, r3
 8003f9a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f9c:	f7fe fae2 	bl	8002564 <HAL_GetTick>
 8003fa0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0220 	bic.w	r2, r2, #32
 8003fb0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d106      	bne.n	8003fc6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbc:	f043 0220 	orr.w	r2, r3, #32
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003fc4:	e009      	b.n	8003fda <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0eb      	beq.n	8003fb2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	2164      	movs	r1, #100	; 0x64
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff ffb0 	bl	8003f44 <SPI_EndRxTxTransaction>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fee:	f043 0220 	orr.w	r2, r3, #32
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004018:	2b00      	cmp	r3, #0
 800401a:	d115      	bne.n	8004048 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b04      	cmp	r3, #4
 8004026:	d107      	bne.n	8004038 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7fd fb69 	bl	8001708 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004036:	e00e      	b.n	8004056 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff fd75 	bl	8003b30 <HAL_SPI_TxRxCpltCallback>
}
 8004046:	e006      	b.n	8004056 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff fd76 	bl	8003b42 <HAL_SPI_ErrorCallback>
}
 8004056:	bf00      	nop
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000044 	.word	0x20000044
 8004064:	057619f1 	.word	0x057619f1

08004068 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800407e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004080:	f7fe fa70 	bl	8002564 <HAL_GetTick>
 8004084:	4603      	mov	r3, r0
 8004086:	461a      	mov	r2, r3
 8004088:	2164      	movs	r1, #100	; 0x64
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff ff08 	bl	8003ea0 <SPI_EndRxTransaction>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409a:	f043 0220 	orr.w	r2, r3, #32
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10a      	bne.n	80040c0 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d103      	bne.n	80040d8 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7fd fb19 	bl	8001708 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80040d6:	e002      	b.n	80040de <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff fd32 	bl	8003b42 <HAL_SPI_ErrorCallback>
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e041      	b.n	800417c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d106      	bne.n	8004112 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7fd ff6b 	bl	8001fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3304      	adds	r3, #4
 8004122:	4619      	mov	r1, r3
 8004124:	4610      	mov	r0, r2
 8004126:	f000 ff93 	bl	8005050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b01      	cmp	r3, #1
 8004196:	d001      	beq.n	800419c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e032      	b.n	8004202 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a18      	ldr	r2, [pc, #96]	; (800420c <HAL_TIM_Base_Start+0x88>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00e      	beq.n	80041cc <HAL_TIM_Base_Start+0x48>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b6:	d009      	beq.n	80041cc <HAL_TIM_Base_Start+0x48>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a14      	ldr	r2, [pc, #80]	; (8004210 <HAL_TIM_Base_Start+0x8c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <HAL_TIM_Base_Start+0x48>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a13      	ldr	r2, [pc, #76]	; (8004214 <HAL_TIM_Base_Start+0x90>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d111      	bne.n	80041f0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b06      	cmp	r3, #6
 80041dc:	d010      	beq.n	8004200 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0201 	orr.w	r2, r2, #1
 80041ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ee:	e007      	b.n	8004200 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr
 800420c:	40012c00 	.word	0x40012c00
 8004210:	40000400 	.word	0x40000400
 8004214:	40000800 	.word	0x40000800

08004218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	d001      	beq.n	8004230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e03a      	b.n	80042a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a18      	ldr	r2, [pc, #96]	; (80042b0 <HAL_TIM_Base_Start_IT+0x98>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00e      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x58>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425a:	d009      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x58>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a14      	ldr	r2, [pc, #80]	; (80042b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x58>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a13      	ldr	r2, [pc, #76]	; (80042b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d111      	bne.n	8004294 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b06      	cmp	r3, #6
 8004280:	d010      	beq.n	80042a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0201 	orr.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004292:	e007      	b.n	80042a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr
 80042b0:	40012c00 	.word	0x40012c00
 80042b4:	40000400 	.word	0x40000400
 80042b8:	40000800 	.word	0x40000800

080042bc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e041      	b.n	8004352 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f839 	bl	800435a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3304      	adds	r3, #4
 80042f8:	4619      	mov	r1, r3
 80042fa:	4610      	mov	r0, r2
 80042fc:	f000 fea8 	bl	8005050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr

0800436c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d109      	bne.n	8004390 <HAL_TIM_OC_Start_IT+0x24>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b01      	cmp	r3, #1
 8004386:	bf14      	ite	ne
 8004388:	2301      	movne	r3, #1
 800438a:	2300      	moveq	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	e022      	b.n	80043d6 <HAL_TIM_OC_Start_IT+0x6a>
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2b04      	cmp	r3, #4
 8004394:	d109      	bne.n	80043aa <HAL_TIM_OC_Start_IT+0x3e>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b01      	cmp	r3, #1
 80043a0:	bf14      	ite	ne
 80043a2:	2301      	movne	r3, #1
 80043a4:	2300      	moveq	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	e015      	b.n	80043d6 <HAL_TIM_OC_Start_IT+0x6a>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d109      	bne.n	80043c4 <HAL_TIM_OC_Start_IT+0x58>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	bf14      	ite	ne
 80043bc:	2301      	movne	r3, #1
 80043be:	2300      	moveq	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	e008      	b.n	80043d6 <HAL_TIM_OC_Start_IT+0x6a>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	bf14      	ite	ne
 80043d0:	2301      	movne	r3, #1
 80043d2:	2300      	moveq	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e0a4      	b.n	8004528 <HAL_TIM_OC_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d104      	bne.n	80043ee <HAL_TIM_OC_Start_IT+0x82>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043ec:	e013      	b.n	8004416 <HAL_TIM_OC_Start_IT+0xaa>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b04      	cmp	r3, #4
 80043f2:	d104      	bne.n	80043fe <HAL_TIM_OC_Start_IT+0x92>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043fc:	e00b      	b.n	8004416 <HAL_TIM_OC_Start_IT+0xaa>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b08      	cmp	r3, #8
 8004402:	d104      	bne.n	800440e <HAL_TIM_OC_Start_IT+0xa2>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800440c:	e003      	b.n	8004416 <HAL_TIM_OC_Start_IT+0xaa>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2202      	movs	r2, #2
 8004412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b0c      	cmp	r3, #12
 800441a:	d841      	bhi.n	80044a0 <HAL_TIM_OC_Start_IT+0x134>
 800441c:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <HAL_TIM_OC_Start_IT+0xb8>)
 800441e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004422:	bf00      	nop
 8004424:	08004459 	.word	0x08004459
 8004428:	080044a1 	.word	0x080044a1
 800442c:	080044a1 	.word	0x080044a1
 8004430:	080044a1 	.word	0x080044a1
 8004434:	0800446b 	.word	0x0800446b
 8004438:	080044a1 	.word	0x080044a1
 800443c:	080044a1 	.word	0x080044a1
 8004440:	080044a1 	.word	0x080044a1
 8004444:	0800447d 	.word	0x0800447d
 8004448:	080044a1 	.word	0x080044a1
 800444c:	080044a1 	.word	0x080044a1
 8004450:	080044a1 	.word	0x080044a1
 8004454:	0800448f 	.word	0x0800448f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0202 	orr.w	r2, r2, #2
 8004466:	60da      	str	r2, [r3, #12]
      break;
 8004468:	e01b      	b.n	80044a2 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0204 	orr.w	r2, r2, #4
 8004478:	60da      	str	r2, [r3, #12]
      break;
 800447a:	e012      	b.n	80044a2 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0208 	orr.w	r2, r2, #8
 800448a:	60da      	str	r2, [r3, #12]
      break;
 800448c:	e009      	b.n	80044a2 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0210 	orr.w	r2, r2, #16
 800449c:	60da      	str	r2, [r3, #12]
      break;
 800449e:	e000      	b.n	80044a2 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 80044a0:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2201      	movs	r2, #1
 80044a8:	6839      	ldr	r1, [r7, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f001 f850 	bl	8005550 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1e      	ldr	r2, [pc, #120]	; (8004530 <HAL_TIM_OC_Start_IT+0x1c4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d107      	bne.n	80044ca <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a18      	ldr	r2, [pc, #96]	; (8004530 <HAL_TIM_OC_Start_IT+0x1c4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00e      	beq.n	80044f2 <HAL_TIM_OC_Start_IT+0x186>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044dc:	d009      	beq.n	80044f2 <HAL_TIM_OC_Start_IT+0x186>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a14      	ldr	r2, [pc, #80]	; (8004534 <HAL_TIM_OC_Start_IT+0x1c8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d004      	beq.n	80044f2 <HAL_TIM_OC_Start_IT+0x186>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a12      	ldr	r2, [pc, #72]	; (8004538 <HAL_TIM_OC_Start_IT+0x1cc>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d111      	bne.n	8004516 <HAL_TIM_OC_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b06      	cmp	r3, #6
 8004502:	d010      	beq.n	8004526 <HAL_TIM_OC_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004514:	e007      	b.n	8004526 <HAL_TIM_OC_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40012c00 	.word	0x40012c00
 8004534:	40000400 	.word	0x40000400
 8004538:	40000800 	.word	0x40000800

0800453c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e041      	b.n	80045d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f839 	bl	80045da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3304      	adds	r3, #4
 8004578:	4619      	mov	r1, r3
 800457a:	4610      	mov	r0, r2
 800457c:	f000 fd68 	bl	8005050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d109      	bne.n	8004610 <HAL_TIM_PWM_Start_IT+0x24>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b01      	cmp	r3, #1
 8004606:	bf14      	ite	ne
 8004608:	2301      	movne	r3, #1
 800460a:	2300      	moveq	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	e022      	b.n	8004656 <HAL_TIM_PWM_Start_IT+0x6a>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b04      	cmp	r3, #4
 8004614:	d109      	bne.n	800462a <HAL_TIM_PWM_Start_IT+0x3e>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b01      	cmp	r3, #1
 8004620:	bf14      	ite	ne
 8004622:	2301      	movne	r3, #1
 8004624:	2300      	moveq	r3, #0
 8004626:	b2db      	uxtb	r3, r3
 8004628:	e015      	b.n	8004656 <HAL_TIM_PWM_Start_IT+0x6a>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b08      	cmp	r3, #8
 800462e:	d109      	bne.n	8004644 <HAL_TIM_PWM_Start_IT+0x58>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	bf14      	ite	ne
 800463c:	2301      	movne	r3, #1
 800463e:	2300      	moveq	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	e008      	b.n	8004656 <HAL_TIM_PWM_Start_IT+0x6a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	bf14      	ite	ne
 8004650:	2301      	movne	r3, #1
 8004652:	2300      	moveq	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e0a4      	b.n	80047a8 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d104      	bne.n	800466e <HAL_TIM_PWM_Start_IT+0x82>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800466c:	e013      	b.n	8004696 <HAL_TIM_PWM_Start_IT+0xaa>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b04      	cmp	r3, #4
 8004672:	d104      	bne.n	800467e <HAL_TIM_PWM_Start_IT+0x92>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800467c:	e00b      	b.n	8004696 <HAL_TIM_PWM_Start_IT+0xaa>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b08      	cmp	r3, #8
 8004682:	d104      	bne.n	800468e <HAL_TIM_PWM_Start_IT+0xa2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800468c:	e003      	b.n	8004696 <HAL_TIM_PWM_Start_IT+0xaa>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2202      	movs	r2, #2
 8004692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b0c      	cmp	r3, #12
 800469a:	d841      	bhi.n	8004720 <HAL_TIM_PWM_Start_IT+0x134>
 800469c:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <HAL_TIM_PWM_Start_IT+0xb8>)
 800469e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a2:	bf00      	nop
 80046a4:	080046d9 	.word	0x080046d9
 80046a8:	08004721 	.word	0x08004721
 80046ac:	08004721 	.word	0x08004721
 80046b0:	08004721 	.word	0x08004721
 80046b4:	080046eb 	.word	0x080046eb
 80046b8:	08004721 	.word	0x08004721
 80046bc:	08004721 	.word	0x08004721
 80046c0:	08004721 	.word	0x08004721
 80046c4:	080046fd 	.word	0x080046fd
 80046c8:	08004721 	.word	0x08004721
 80046cc:	08004721 	.word	0x08004721
 80046d0:	08004721 	.word	0x08004721
 80046d4:	0800470f 	.word	0x0800470f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0202 	orr.w	r2, r2, #2
 80046e6:	60da      	str	r2, [r3, #12]
      break;
 80046e8:	e01b      	b.n	8004722 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0204 	orr.w	r2, r2, #4
 80046f8:	60da      	str	r2, [r3, #12]
      break;
 80046fa:	e012      	b.n	8004722 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0208 	orr.w	r2, r2, #8
 800470a:	60da      	str	r2, [r3, #12]
      break;
 800470c:	e009      	b.n	8004722 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0210 	orr.w	r2, r2, #16
 800471c:	60da      	str	r2, [r3, #12]
      break;
 800471e:	e000      	b.n	8004722 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8004720:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2201      	movs	r2, #1
 8004728:	6839      	ldr	r1, [r7, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f000 ff10 	bl	8005550 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1e      	ldr	r2, [pc, #120]	; (80047b0 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d107      	bne.n	800474a <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004748:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a18      	ldr	r2, [pc, #96]	; (80047b0 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d00e      	beq.n	8004772 <HAL_TIM_PWM_Start_IT+0x186>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475c:	d009      	beq.n	8004772 <HAL_TIM_PWM_Start_IT+0x186>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a14      	ldr	r2, [pc, #80]	; (80047b4 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d004      	beq.n	8004772 <HAL_TIM_PWM_Start_IT+0x186>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a12      	ldr	r2, [pc, #72]	; (80047b8 <HAL_TIM_PWM_Start_IT+0x1cc>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d111      	bne.n	8004796 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b06      	cmp	r3, #6
 8004782:	d010      	beq.n	80047a6 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004794:	e007      	b.n	80047a6 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0201 	orr.w	r2, r2, #1
 80047a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40012c00 	.word	0x40012c00
 80047b4:	40000400 	.word	0x40000400
 80047b8:	40000800 	.word	0x40000800

080047bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e093      	b.n	80048f8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fd fc4f 	bl	8002088 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2202      	movs	r2, #2
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6812      	ldr	r2, [r2, #0]
 80047fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004800:	f023 0307 	bic.w	r3, r3, #7
 8004804:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3304      	adds	r3, #4
 800480e:	4619      	mov	r1, r3
 8004810:	4610      	mov	r0, r2
 8004812:	f000 fc1d 	bl	8005050 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483e:	f023 0303 	bic.w	r3, r3, #3
 8004842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	4313      	orrs	r3, r2
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800485c:	f023 030c 	bic.w	r3, r3, #12
 8004860:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004868:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800486c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	4313      	orrs	r3, r2
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	011a      	lsls	r2, r3, #4
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	031b      	lsls	r3, r3, #12
 800488c:	4313      	orrs	r3, r2
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800489a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	4313      	orrs	r3, r2
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004910:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004918:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004920:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004928:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d110      	bne.n	8004952 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d102      	bne.n	800493c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004936:	7b7b      	ldrb	r3, [r7, #13]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d001      	beq.n	8004940 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e088      	b.n	8004a52 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004950:	e031      	b.n	80049b6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b04      	cmp	r3, #4
 8004956:	d110      	bne.n	800497a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004958:	7bbb      	ldrb	r3, [r7, #14]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d102      	bne.n	8004964 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800495e:	7b3b      	ldrb	r3, [r7, #12]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d001      	beq.n	8004968 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e074      	b.n	8004a52 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004978:	e01d      	b.n	80049b6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d108      	bne.n	8004992 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004980:	7bbb      	ldrb	r3, [r7, #14]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d105      	bne.n	8004992 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004986:	7b7b      	ldrb	r3, [r7, #13]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d102      	bne.n	8004992 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800498c:	7b3b      	ldrb	r3, [r7, #12]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d001      	beq.n	8004996 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e05d      	b.n	8004a52 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2202      	movs	r2, #2
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2202      	movs	r2, #2
 80049a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2202      	movs	r2, #2
 80049aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2202      	movs	r2, #2
 80049b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <HAL_TIM_Encoder_Start_IT+0xc2>
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d010      	beq.n	80049e2 <HAL_TIM_Encoder_Start_IT+0xe2>
 80049c0:	e01f      	b.n	8004a02 <HAL_TIM_Encoder_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2201      	movs	r2, #1
 80049c8:	2100      	movs	r1, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fdc0 	bl	8005550 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0202 	orr.w	r2, r2, #2
 80049de:	60da      	str	r2, [r3, #12]
      break;
 80049e0:	e02e      	b.n	8004a40 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2201      	movs	r2, #1
 80049e8:	2104      	movs	r1, #4
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fdb0 	bl	8005550 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0204 	orr.w	r2, r2, #4
 80049fe:	60da      	str	r2, [r3, #12]
      break;
 8004a00:	e01e      	b.n	8004a40 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2201      	movs	r2, #1
 8004a08:	2100      	movs	r1, #0
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fda0 	bl	8005550 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2201      	movs	r2, #1
 8004a16:	2104      	movs	r1, #4
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fd99 	bl	8005550 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0202 	orr.w	r2, r2, #2
 8004a2c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0204 	orr.w	r2, r2, #4
 8004a3c:	60da      	str	r2, [r3, #12]
      break;
 8004a3e:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b082      	sub	sp, #8
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d122      	bne.n	8004ab6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d11b      	bne.n	8004ab6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f06f 0202 	mvn.w	r2, #2
 8004a86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	f003 0303 	and.w	r3, r3, #3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fabb 	bl	8005018 <HAL_TIM_IC_CaptureCallback>
 8004aa2:	e005      	b.n	8004ab0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 faae 	bl	8005006 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fabd 	bl	800502a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d122      	bne.n	8004b0a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d11b      	bne.n	8004b0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f06f 0204 	mvn.w	r2, #4
 8004ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fa91 	bl	8005018 <HAL_TIM_IC_CaptureCallback>
 8004af6:	e005      	b.n	8004b04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fa84 	bl	8005006 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fa93 	bl	800502a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d122      	bne.n	8004b5e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d11b      	bne.n	8004b5e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f06f 0208 	mvn.w	r2, #8
 8004b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2204      	movs	r2, #4
 8004b34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	f003 0303 	and.w	r3, r3, #3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fa67 	bl	8005018 <HAL_TIM_IC_CaptureCallback>
 8004b4a:	e005      	b.n	8004b58 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fa5a 	bl	8005006 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fa69 	bl	800502a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d122      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d11b      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f06f 0210 	mvn.w	r2, #16
 8004b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2208      	movs	r2, #8
 8004b88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fa3d 	bl	8005018 <HAL_TIM_IC_CaptureCallback>
 8004b9e:	e005      	b.n	8004bac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fa30 	bl	8005006 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fa3f 	bl	800502a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d10e      	bne.n	8004bde <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d107      	bne.n	8004bde <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f06f 0201 	mvn.w	r2, #1
 8004bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7fc fa51 	bl	8001080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be8:	2b80      	cmp	r3, #128	; 0x80
 8004bea:	d10e      	bne.n	8004c0a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf6:	2b80      	cmp	r3, #128	; 0x80
 8004bf8:	d107      	bne.n	8004c0a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fd7f 	bl	8005708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d10e      	bne.n	8004c36 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b40      	cmp	r3, #64	; 0x40
 8004c24:	d107      	bne.n	8004c36 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fa03 	bl	800503c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d10e      	bne.n	8004c62 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b20      	cmp	r3, #32
 8004c50:	d107      	bne.n	8004c62 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f06f 0220 	mvn.w	r2, #32
 8004c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fd4a 	bl	80056f6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c62:	bf00      	nop
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e046      	b.n	8004d14 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b0c      	cmp	r3, #12
 8004c92:	d839      	bhi.n	8004d08 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004c94:	a201      	add	r2, pc, #4	; (adr r2, 8004c9c <HAL_TIM_OC_ConfigChannel+0x30>)
 8004c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9a:	bf00      	nop
 8004c9c:	08004cd1 	.word	0x08004cd1
 8004ca0:	08004d09 	.word	0x08004d09
 8004ca4:	08004d09 	.word	0x08004d09
 8004ca8:	08004d09 	.word	0x08004d09
 8004cac:	08004cdf 	.word	0x08004cdf
 8004cb0:	08004d09 	.word	0x08004d09
 8004cb4:	08004d09 	.word	0x08004d09
 8004cb8:	08004d09 	.word	0x08004d09
 8004cbc:	08004ced 	.word	0x08004ced
 8004cc0:	08004d09 	.word	0x08004d09
 8004cc4:	08004d09 	.word	0x08004d09
 8004cc8:	08004d09 	.word	0x08004d09
 8004ccc:	08004cfb 	.word	0x08004cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fa1c 	bl	8005114 <TIM_OC1_SetConfig>
      break;
 8004cdc:	e015      	b.n	8004d0a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68b9      	ldr	r1, [r7, #8]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fa7b 	bl	80051e0 <TIM_OC2_SetConfig>
      break;
 8004cea:	e00e      	b.n	8004d0a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fade 	bl	80052b4 <TIM_OC3_SetConfig>
      break;
 8004cf8:	e007      	b.n	8004d0a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fb41 	bl	8005388 <TIM_OC4_SetConfig>
      break;
 8004d06:	e000      	b.n	8004d0a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004d08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e0ac      	b.n	8004e90 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b0c      	cmp	r3, #12
 8004d42:	f200 809f 	bhi.w	8004e84 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004d46:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004d81 	.word	0x08004d81
 8004d50:	08004e85 	.word	0x08004e85
 8004d54:	08004e85 	.word	0x08004e85
 8004d58:	08004e85 	.word	0x08004e85
 8004d5c:	08004dc1 	.word	0x08004dc1
 8004d60:	08004e85 	.word	0x08004e85
 8004d64:	08004e85 	.word	0x08004e85
 8004d68:	08004e85 	.word	0x08004e85
 8004d6c:	08004e03 	.word	0x08004e03
 8004d70:	08004e85 	.word	0x08004e85
 8004d74:	08004e85 	.word	0x08004e85
 8004d78:	08004e85 	.word	0x08004e85
 8004d7c:	08004e43 	.word	0x08004e43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 f9c4 	bl	8005114 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699a      	ldr	r2, [r3, #24]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0208 	orr.w	r2, r2, #8
 8004d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0204 	bic.w	r2, r2, #4
 8004daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6999      	ldr	r1, [r3, #24]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	619a      	str	r2, [r3, #24]
      break;
 8004dbe:	e062      	b.n	8004e86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fa0a 	bl	80051e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699a      	ldr	r2, [r3, #24]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6999      	ldr	r1, [r3, #24]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	021a      	lsls	r2, r3, #8
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	619a      	str	r2, [r3, #24]
      break;
 8004e00:	e041      	b.n	8004e86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 fa53 	bl	80052b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69da      	ldr	r2, [r3, #28]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f042 0208 	orr.w	r2, r2, #8
 8004e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69da      	ldr	r2, [r3, #28]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0204 	bic.w	r2, r2, #4
 8004e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69d9      	ldr	r1, [r3, #28]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	61da      	str	r2, [r3, #28]
      break;
 8004e40:	e021      	b.n	8004e86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fa9d 	bl	8005388 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69da      	ldr	r2, [r3, #28]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69da      	ldr	r2, [r3, #28]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69d9      	ldr	r1, [r3, #28]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	021a      	lsls	r2, r3, #8
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	61da      	str	r2, [r3, #28]
      break;
 8004e82:	e000      	b.n	8004e86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004e84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_TIM_ConfigClockSource+0x18>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e0a6      	b.n	8004ffe <HAL_TIM_ConfigClockSource+0x166>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ece:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ed6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b40      	cmp	r3, #64	; 0x40
 8004ee6:	d067      	beq.n	8004fb8 <HAL_TIM_ConfigClockSource+0x120>
 8004ee8:	2b40      	cmp	r3, #64	; 0x40
 8004eea:	d80b      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x6c>
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d073      	beq.n	8004fd8 <HAL_TIM_ConfigClockSource+0x140>
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d802      	bhi.n	8004efa <HAL_TIM_ConfigClockSource+0x62>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d06f      	beq.n	8004fd8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004ef8:	e078      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	d06c      	beq.n	8004fd8 <HAL_TIM_ConfigClockSource+0x140>
 8004efe:	2b30      	cmp	r3, #48	; 0x30
 8004f00:	d06a      	beq.n	8004fd8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004f02:	e073      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f04:	2b70      	cmp	r3, #112	; 0x70
 8004f06:	d00d      	beq.n	8004f24 <HAL_TIM_ConfigClockSource+0x8c>
 8004f08:	2b70      	cmp	r3, #112	; 0x70
 8004f0a:	d804      	bhi.n	8004f16 <HAL_TIM_ConfigClockSource+0x7e>
 8004f0c:	2b50      	cmp	r3, #80	; 0x50
 8004f0e:	d033      	beq.n	8004f78 <HAL_TIM_ConfigClockSource+0xe0>
 8004f10:	2b60      	cmp	r3, #96	; 0x60
 8004f12:	d041      	beq.n	8004f98 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004f14:	e06a      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1a:	d066      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0x152>
 8004f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f20:	d017      	beq.n	8004f52 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004f22:	e063      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6818      	ldr	r0, [r3, #0]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	6899      	ldr	r1, [r3, #8]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f000 faed 	bl	8005512 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f46:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	609a      	str	r2, [r3, #8]
      break;
 8004f50:	e04c      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	6899      	ldr	r1, [r3, #8]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f000 fad6 	bl	8005512 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f74:	609a      	str	r2, [r3, #8]
      break;
 8004f76:	e039      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	6859      	ldr	r1, [r3, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	461a      	mov	r2, r3
 8004f86:	f000 fa4d 	bl	8005424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2150      	movs	r1, #80	; 0x50
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 faa4 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8004f96:	e029      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	6859      	ldr	r1, [r3, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	f000 fa6b 	bl	8005480 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2160      	movs	r1, #96	; 0x60
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fa94 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8004fb6:	e019      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	6859      	ldr	r1, [r3, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	f000 fa2d 	bl	8005424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2140      	movs	r1, #64	; 0x40
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fa84 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8004fd6:	e009      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	f000 fa7b 	bl	80054de <TIM_ITRx_SetConfig>
        break;
 8004fe8:	e000      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004fea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr

08005018 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr

0800502a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr

0800503c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr
	...

08005050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a29      	ldr	r2, [pc, #164]	; (8005108 <TIM_Base_SetConfig+0xb8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00b      	beq.n	8005080 <TIM_Base_SetConfig+0x30>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506e:	d007      	beq.n	8005080 <TIM_Base_SetConfig+0x30>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a26      	ldr	r2, [pc, #152]	; (800510c <TIM_Base_SetConfig+0xbc>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <TIM_Base_SetConfig+0x30>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a25      	ldr	r2, [pc, #148]	; (8005110 <TIM_Base_SetConfig+0xc0>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d108      	bne.n	8005092 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a1c      	ldr	r2, [pc, #112]	; (8005108 <TIM_Base_SetConfig+0xb8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00b      	beq.n	80050b2 <TIM_Base_SetConfig+0x62>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a0:	d007      	beq.n	80050b2 <TIM_Base_SetConfig+0x62>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a19      	ldr	r2, [pc, #100]	; (800510c <TIM_Base_SetConfig+0xbc>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d003      	beq.n	80050b2 <TIM_Base_SetConfig+0x62>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a18      	ldr	r2, [pc, #96]	; (8005110 <TIM_Base_SetConfig+0xc0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d108      	bne.n	80050c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a07      	ldr	r2, [pc, #28]	; (8005108 <TIM_Base_SetConfig+0xb8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d103      	bne.n	80050f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	615a      	str	r2, [r3, #20]
}
 80050fe:	bf00      	nop
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr
 8005108:	40012c00 	.word	0x40012c00
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800

08005114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	f023 0201 	bic.w	r2, r3, #1
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0303 	bic.w	r3, r3, #3
 800514a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f023 0302 	bic.w	r3, r3, #2
 800515c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a1c      	ldr	r2, [pc, #112]	; (80051dc <TIM_OC1_SetConfig+0xc8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d10c      	bne.n	800518a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 0308 	bic.w	r3, r3, #8
 8005176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f023 0304 	bic.w	r3, r3, #4
 8005188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a13      	ldr	r2, [pc, #76]	; (80051dc <TIM_OC1_SetConfig+0xc8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d111      	bne.n	80051b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	621a      	str	r2, [r3, #32]
}
 80051d0:	bf00      	nop
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40012c00 	.word	0x40012c00

080051e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	f023 0210 	bic.w	r2, r3, #16
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	021b      	lsls	r3, r3, #8
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	4313      	orrs	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f023 0320 	bic.w	r3, r3, #32
 800522a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a1d      	ldr	r2, [pc, #116]	; (80052b0 <TIM_OC2_SetConfig+0xd0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d10d      	bne.n	800525c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800525a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a14      	ldr	r2, [pc, #80]	; (80052b0 <TIM_OC2_SetConfig+0xd0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d113      	bne.n	800528c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800526a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005272:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	621a      	str	r2, [r3, #32]
}
 80052a6:	bf00      	nop
 80052a8:	371c      	adds	r7, #28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr
 80052b0:	40012c00 	.word	0x40012c00

080052b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0303 	bic.w	r3, r3, #3
 80052ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	4313      	orrs	r3, r2
 8005308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a1d      	ldr	r2, [pc, #116]	; (8005384 <TIM_OC3_SetConfig+0xd0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d10d      	bne.n	800532e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	021b      	lsls	r3, r3, #8
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	4313      	orrs	r3, r2
 8005324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800532c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a14      	ldr	r2, [pc, #80]	; (8005384 <TIM_OC3_SetConfig+0xd0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d113      	bne.n	800535e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800533c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	621a      	str	r2, [r3, #32]
}
 8005378:	bf00      	nop
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40012c00 	.word	0x40012c00

08005388 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	031b      	lsls	r3, r3, #12
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a0f      	ldr	r2, [pc, #60]	; (8005420 <TIM_OC4_SetConfig+0x98>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d109      	bne.n	80053fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	019b      	lsls	r3, r3, #6
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	621a      	str	r2, [r3, #32]
}
 8005416:	bf00      	nop
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr
 8005420:	40012c00 	.word	0x40012c00

08005424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	f023 0201 	bic.w	r2, r3, #1
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800544e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	4313      	orrs	r3, r2
 8005458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f023 030a 	bic.w	r3, r3, #10
 8005460:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	621a      	str	r2, [r3, #32]
}
 8005476:	bf00      	nop
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr

08005480 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	f023 0210 	bic.w	r2, r3, #16
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	031b      	lsls	r3, r3, #12
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	621a      	str	r2, [r3, #32]
}
 80054d4:	bf00      	nop
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	bc80      	pop	{r7}
 80054dc:	4770      	bx	lr

080054de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f043 0307 	orr.w	r3, r3, #7
 8005500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	609a      	str	r2, [r3, #8]
}
 8005508:	bf00      	nop
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	bc80      	pop	{r7}
 8005510:	4770      	bx	lr

08005512 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005512:	b480      	push	{r7}
 8005514:	b087      	sub	sp, #28
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	607a      	str	r2, [r7, #4]
 800551e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800552c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	021a      	lsls	r2, r3, #8
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	431a      	orrs	r2, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4313      	orrs	r3, r2
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	609a      	str	r2, [r3, #8]
}
 8005546:	bf00      	nop
 8005548:	371c      	adds	r7, #28
 800554a:	46bd      	mov	sp, r7
 800554c:	bc80      	pop	{r7}
 800554e:	4770      	bx	lr

08005550 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f003 031f 	and.w	r3, r3, #31
 8005562:	2201      	movs	r2, #1
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a1a      	ldr	r2, [r3, #32]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	43db      	mvns	r3, r3
 8005572:	401a      	ands	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a1a      	ldr	r2, [r3, #32]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 031f 	and.w	r3, r3, #31
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	fa01 f303 	lsl.w	r3, r1, r3
 8005588:	431a      	orrs	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	621a      	str	r2, [r3, #32]
}
 800558e:	bf00      	nop
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	bc80      	pop	{r7}
 8005596:	4770      	bx	lr

08005598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e046      	b.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a16      	ldr	r2, [pc, #88]	; (8005648 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00e      	beq.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fc:	d009      	beq.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a12      	ldr	r2, [pc, #72]	; (800564c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d004      	beq.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a10      	ldr	r2, [pc, #64]	; (8005650 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d10c      	bne.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005618:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	4313      	orrs	r3, r2
 8005622:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr
 8005648:	40012c00 	.word	0x40012c00
 800564c:	40000400 	.word	0x40000400
 8005650:	40000800 	.word	0x40000800

08005654 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800566c:	2302      	movs	r3, #2
 800566e:	e03d      	b.n	80056ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr

080056f6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr

08005708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	bc80      	pop	{r7}
 8005718:	4770      	bx	lr

0800571a <atof>:
 800571a:	2100      	movs	r1, #0
 800571c:	f000 beb8 	b.w	8006490 <strtod>

08005720 <__errno>:
 8005720:	4b01      	ldr	r3, [pc, #4]	; (8005728 <__errno+0x8>)
 8005722:	6818      	ldr	r0, [r3, #0]
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	20000050 	.word	0x20000050

0800572c <__libc_init_array>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	2500      	movs	r5, #0
 8005730:	4e0c      	ldr	r6, [pc, #48]	; (8005764 <__libc_init_array+0x38>)
 8005732:	4c0d      	ldr	r4, [pc, #52]	; (8005768 <__libc_init_array+0x3c>)
 8005734:	1ba4      	subs	r4, r4, r6
 8005736:	10a4      	asrs	r4, r4, #2
 8005738:	42a5      	cmp	r5, r4
 800573a:	d109      	bne.n	8005750 <__libc_init_array+0x24>
 800573c:	f002 fa30 	bl	8007ba0 <_init>
 8005740:	2500      	movs	r5, #0
 8005742:	4e0a      	ldr	r6, [pc, #40]	; (800576c <__libc_init_array+0x40>)
 8005744:	4c0a      	ldr	r4, [pc, #40]	; (8005770 <__libc_init_array+0x44>)
 8005746:	1ba4      	subs	r4, r4, r6
 8005748:	10a4      	asrs	r4, r4, #2
 800574a:	42a5      	cmp	r5, r4
 800574c:	d105      	bne.n	800575a <__libc_init_array+0x2e>
 800574e:	bd70      	pop	{r4, r5, r6, pc}
 8005750:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005754:	4798      	blx	r3
 8005756:	3501      	adds	r5, #1
 8005758:	e7ee      	b.n	8005738 <__libc_init_array+0xc>
 800575a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800575e:	4798      	blx	r3
 8005760:	3501      	adds	r5, #1
 8005762:	e7f2      	b.n	800574a <__libc_init_array+0x1e>
 8005764:	08007ef8 	.word	0x08007ef8
 8005768:	08007ef8 	.word	0x08007ef8
 800576c:	08007ef8 	.word	0x08007ef8
 8005770:	08007efc 	.word	0x08007efc

08005774 <memset>:
 8005774:	4603      	mov	r3, r0
 8005776:	4402      	add	r2, r0
 8005778:	4293      	cmp	r3, r2
 800577a:	d100      	bne.n	800577e <memset+0xa>
 800577c:	4770      	bx	lr
 800577e:	f803 1b01 	strb.w	r1, [r3], #1
 8005782:	e7f9      	b.n	8005778 <memset+0x4>

08005784 <_puts_r>:
 8005784:	b570      	push	{r4, r5, r6, lr}
 8005786:	460e      	mov	r6, r1
 8005788:	4605      	mov	r5, r0
 800578a:	b118      	cbz	r0, 8005794 <_puts_r+0x10>
 800578c:	6983      	ldr	r3, [r0, #24]
 800578e:	b90b      	cbnz	r3, 8005794 <_puts_r+0x10>
 8005790:	f001 f840 	bl	8006814 <__sinit>
 8005794:	69ab      	ldr	r3, [r5, #24]
 8005796:	68ac      	ldr	r4, [r5, #8]
 8005798:	b913      	cbnz	r3, 80057a0 <_puts_r+0x1c>
 800579a:	4628      	mov	r0, r5
 800579c:	f001 f83a 	bl	8006814 <__sinit>
 80057a0:	4b23      	ldr	r3, [pc, #140]	; (8005830 <_puts_r+0xac>)
 80057a2:	429c      	cmp	r4, r3
 80057a4:	d117      	bne.n	80057d6 <_puts_r+0x52>
 80057a6:	686c      	ldr	r4, [r5, #4]
 80057a8:	89a3      	ldrh	r3, [r4, #12]
 80057aa:	071b      	lsls	r3, r3, #28
 80057ac:	d51d      	bpl.n	80057ea <_puts_r+0x66>
 80057ae:	6923      	ldr	r3, [r4, #16]
 80057b0:	b1db      	cbz	r3, 80057ea <_puts_r+0x66>
 80057b2:	3e01      	subs	r6, #1
 80057b4:	68a3      	ldr	r3, [r4, #8]
 80057b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057ba:	3b01      	subs	r3, #1
 80057bc:	60a3      	str	r3, [r4, #8]
 80057be:	b9e9      	cbnz	r1, 80057fc <_puts_r+0x78>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	da2e      	bge.n	8005822 <_puts_r+0x9e>
 80057c4:	4622      	mov	r2, r4
 80057c6:	210a      	movs	r1, #10
 80057c8:	4628      	mov	r0, r5
 80057ca:	f000 fe73 	bl	80064b4 <__swbuf_r>
 80057ce:	3001      	adds	r0, #1
 80057d0:	d011      	beq.n	80057f6 <_puts_r+0x72>
 80057d2:	200a      	movs	r0, #10
 80057d4:	e011      	b.n	80057fa <_puts_r+0x76>
 80057d6:	4b17      	ldr	r3, [pc, #92]	; (8005834 <_puts_r+0xb0>)
 80057d8:	429c      	cmp	r4, r3
 80057da:	d101      	bne.n	80057e0 <_puts_r+0x5c>
 80057dc:	68ac      	ldr	r4, [r5, #8]
 80057de:	e7e3      	b.n	80057a8 <_puts_r+0x24>
 80057e0:	4b15      	ldr	r3, [pc, #84]	; (8005838 <_puts_r+0xb4>)
 80057e2:	429c      	cmp	r4, r3
 80057e4:	bf08      	it	eq
 80057e6:	68ec      	ldreq	r4, [r5, #12]
 80057e8:	e7de      	b.n	80057a8 <_puts_r+0x24>
 80057ea:	4621      	mov	r1, r4
 80057ec:	4628      	mov	r0, r5
 80057ee:	f000 feb3 	bl	8006558 <__swsetup_r>
 80057f2:	2800      	cmp	r0, #0
 80057f4:	d0dd      	beq.n	80057b2 <_puts_r+0x2e>
 80057f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057fa:	bd70      	pop	{r4, r5, r6, pc}
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	da04      	bge.n	800580a <_puts_r+0x86>
 8005800:	69a2      	ldr	r2, [r4, #24]
 8005802:	429a      	cmp	r2, r3
 8005804:	dc06      	bgt.n	8005814 <_puts_r+0x90>
 8005806:	290a      	cmp	r1, #10
 8005808:	d004      	beq.n	8005814 <_puts_r+0x90>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	6022      	str	r2, [r4, #0]
 8005810:	7019      	strb	r1, [r3, #0]
 8005812:	e7cf      	b.n	80057b4 <_puts_r+0x30>
 8005814:	4622      	mov	r2, r4
 8005816:	4628      	mov	r0, r5
 8005818:	f000 fe4c 	bl	80064b4 <__swbuf_r>
 800581c:	3001      	adds	r0, #1
 800581e:	d1c9      	bne.n	80057b4 <_puts_r+0x30>
 8005820:	e7e9      	b.n	80057f6 <_puts_r+0x72>
 8005822:	200a      	movs	r0, #10
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	6022      	str	r2, [r4, #0]
 800582a:	7018      	strb	r0, [r3, #0]
 800582c:	e7e5      	b.n	80057fa <_puts_r+0x76>
 800582e:	bf00      	nop
 8005830:	08007ca8 	.word	0x08007ca8
 8005834:	08007cc8 	.word	0x08007cc8
 8005838:	08007c88 	.word	0x08007c88

0800583c <puts>:
 800583c:	4b02      	ldr	r3, [pc, #8]	; (8005848 <puts+0xc>)
 800583e:	4601      	mov	r1, r0
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	f7ff bf9f 	b.w	8005784 <_puts_r>
 8005846:	bf00      	nop
 8005848:	20000050 	.word	0x20000050

0800584c <sulp>:
 800584c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005850:	460f      	mov	r7, r1
 8005852:	4690      	mov	r8, r2
 8005854:	f001 fede 	bl	8007614 <__ulp>
 8005858:	4604      	mov	r4, r0
 800585a:	460d      	mov	r5, r1
 800585c:	f1b8 0f00 	cmp.w	r8, #0
 8005860:	d011      	beq.n	8005886 <sulp+0x3a>
 8005862:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005866:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800586a:	2b00      	cmp	r3, #0
 800586c:	dd0b      	ble.n	8005886 <sulp+0x3a>
 800586e:	2400      	movs	r4, #0
 8005870:	051b      	lsls	r3, r3, #20
 8005872:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005876:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800587a:	4622      	mov	r2, r4
 800587c:	462b      	mov	r3, r5
 800587e:	f7fa fe2b 	bl	80004d8 <__aeabi_dmul>
 8005882:	4604      	mov	r4, r0
 8005884:	460d      	mov	r5, r1
 8005886:	4620      	mov	r0, r4
 8005888:	4629      	mov	r1, r5
 800588a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005890 <_strtod_l>:
 8005890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005894:	461f      	mov	r7, r3
 8005896:	2300      	movs	r3, #0
 8005898:	b0a1      	sub	sp, #132	; 0x84
 800589a:	4683      	mov	fp, r0
 800589c:	4638      	mov	r0, r7
 800589e:	460e      	mov	r6, r1
 80058a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80058a2:	931c      	str	r3, [sp, #112]	; 0x70
 80058a4:	f001 fb68 	bl	8006f78 <__localeconv_l>
 80058a8:	4680      	mov	r8, r0
 80058aa:	6800      	ldr	r0, [r0, #0]
 80058ac:	f7fa fc50 	bl	8000150 <strlen>
 80058b0:	f04f 0900 	mov.w	r9, #0
 80058b4:	4604      	mov	r4, r0
 80058b6:	f04f 0a00 	mov.w	sl, #0
 80058ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80058bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058be:	781a      	ldrb	r2, [r3, #0]
 80058c0:	2a0d      	cmp	r2, #13
 80058c2:	d832      	bhi.n	800592a <_strtod_l+0x9a>
 80058c4:	2a09      	cmp	r2, #9
 80058c6:	d236      	bcs.n	8005936 <_strtod_l+0xa6>
 80058c8:	2a00      	cmp	r2, #0
 80058ca:	d03e      	beq.n	800594a <_strtod_l+0xba>
 80058cc:	2300      	movs	r3, #0
 80058ce:	930d      	str	r3, [sp, #52]	; 0x34
 80058d0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80058d2:	782b      	ldrb	r3, [r5, #0]
 80058d4:	2b30      	cmp	r3, #48	; 0x30
 80058d6:	f040 80ac 	bne.w	8005a32 <_strtod_l+0x1a2>
 80058da:	786b      	ldrb	r3, [r5, #1]
 80058dc:	2b58      	cmp	r3, #88	; 0x58
 80058de:	d001      	beq.n	80058e4 <_strtod_l+0x54>
 80058e0:	2b78      	cmp	r3, #120	; 0x78
 80058e2:	d167      	bne.n	80059b4 <_strtod_l+0x124>
 80058e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058e6:	9702      	str	r7, [sp, #8]
 80058e8:	9301      	str	r3, [sp, #4]
 80058ea:	ab1c      	add	r3, sp, #112	; 0x70
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	4a89      	ldr	r2, [pc, #548]	; (8005b14 <_strtod_l+0x284>)
 80058f0:	ab1d      	add	r3, sp, #116	; 0x74
 80058f2:	a91b      	add	r1, sp, #108	; 0x6c
 80058f4:	4658      	mov	r0, fp
 80058f6:	f001 f867 	bl	80069c8 <__gethex>
 80058fa:	f010 0407 	ands.w	r4, r0, #7
 80058fe:	4606      	mov	r6, r0
 8005900:	d005      	beq.n	800590e <_strtod_l+0x7e>
 8005902:	2c06      	cmp	r4, #6
 8005904:	d12b      	bne.n	800595e <_strtod_l+0xce>
 8005906:	2300      	movs	r3, #0
 8005908:	3501      	adds	r5, #1
 800590a:	951b      	str	r5, [sp, #108]	; 0x6c
 800590c:	930d      	str	r3, [sp, #52]	; 0x34
 800590e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005910:	2b00      	cmp	r3, #0
 8005912:	f040 85a6 	bne.w	8006462 <_strtod_l+0xbd2>
 8005916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005918:	b1e3      	cbz	r3, 8005954 <_strtod_l+0xc4>
 800591a:	464a      	mov	r2, r9
 800591c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005920:	4610      	mov	r0, r2
 8005922:	4619      	mov	r1, r3
 8005924:	b021      	add	sp, #132	; 0x84
 8005926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800592a:	2a2b      	cmp	r2, #43	; 0x2b
 800592c:	d015      	beq.n	800595a <_strtod_l+0xca>
 800592e:	2a2d      	cmp	r2, #45	; 0x2d
 8005930:	d004      	beq.n	800593c <_strtod_l+0xac>
 8005932:	2a20      	cmp	r2, #32
 8005934:	d1ca      	bne.n	80058cc <_strtod_l+0x3c>
 8005936:	3301      	adds	r3, #1
 8005938:	931b      	str	r3, [sp, #108]	; 0x6c
 800593a:	e7bf      	b.n	80058bc <_strtod_l+0x2c>
 800593c:	2201      	movs	r2, #1
 800593e:	920d      	str	r2, [sp, #52]	; 0x34
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	921b      	str	r2, [sp, #108]	; 0x6c
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1c2      	bne.n	80058d0 <_strtod_l+0x40>
 800594a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800594c:	961b      	str	r6, [sp, #108]	; 0x6c
 800594e:	2b00      	cmp	r3, #0
 8005950:	f040 8585 	bne.w	800645e <_strtod_l+0xbce>
 8005954:	464a      	mov	r2, r9
 8005956:	4653      	mov	r3, sl
 8005958:	e7e2      	b.n	8005920 <_strtod_l+0x90>
 800595a:	2200      	movs	r2, #0
 800595c:	e7ef      	b.n	800593e <_strtod_l+0xae>
 800595e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005960:	b13a      	cbz	r2, 8005972 <_strtod_l+0xe2>
 8005962:	2135      	movs	r1, #53	; 0x35
 8005964:	a81e      	add	r0, sp, #120	; 0x78
 8005966:	f001 ff48 	bl	80077fa <__copybits>
 800596a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800596c:	4658      	mov	r0, fp
 800596e:	f001 fbba 	bl	80070e6 <_Bfree>
 8005972:	3c01      	subs	r4, #1
 8005974:	2c04      	cmp	r4, #4
 8005976:	d806      	bhi.n	8005986 <_strtod_l+0xf6>
 8005978:	e8df f004 	tbb	[pc, r4]
 800597c:	1714030a 	.word	0x1714030a
 8005980:	0a          	.byte	0x0a
 8005981:	00          	.byte	0x00
 8005982:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8005986:	0731      	lsls	r1, r6, #28
 8005988:	d5c1      	bpl.n	800590e <_strtod_l+0x7e>
 800598a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800598e:	e7be      	b.n	800590e <_strtod_l+0x7e>
 8005990:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005992:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8005996:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800599a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800599e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80059a2:	e7f0      	b.n	8005986 <_strtod_l+0xf6>
 80059a4:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005b18 <_strtod_l+0x288>
 80059a8:	e7ed      	b.n	8005986 <_strtod_l+0xf6>
 80059aa:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80059ae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80059b2:	e7e8      	b.n	8005986 <_strtod_l+0xf6>
 80059b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	2b30      	cmp	r3, #48	; 0x30
 80059be:	d0f9      	beq.n	80059b4 <_strtod_l+0x124>
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0a4      	beq.n	800590e <_strtod_l+0x7e>
 80059c4:	2301      	movs	r3, #1
 80059c6:	2500      	movs	r5, #0
 80059c8:	220a      	movs	r2, #10
 80059ca:	9307      	str	r3, [sp, #28]
 80059cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059ce:	9506      	str	r5, [sp, #24]
 80059d0:	9308      	str	r3, [sp, #32]
 80059d2:	9504      	str	r5, [sp, #16]
 80059d4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80059d6:	7807      	ldrb	r7, [r0, #0]
 80059d8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80059dc:	b2d9      	uxtb	r1, r3
 80059de:	2909      	cmp	r1, #9
 80059e0:	d929      	bls.n	8005a36 <_strtod_l+0x1a6>
 80059e2:	4622      	mov	r2, r4
 80059e4:	f8d8 1000 	ldr.w	r1, [r8]
 80059e8:	f002 f849 	bl	8007a7e <strncmp>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d031      	beq.n	8005a54 <_strtod_l+0x1c4>
 80059f0:	2000      	movs	r0, #0
 80059f2:	463b      	mov	r3, r7
 80059f4:	4602      	mov	r2, r0
 80059f6:	9c04      	ldr	r4, [sp, #16]
 80059f8:	9005      	str	r0, [sp, #20]
 80059fa:	2b65      	cmp	r3, #101	; 0x65
 80059fc:	d001      	beq.n	8005a02 <_strtod_l+0x172>
 80059fe:	2b45      	cmp	r3, #69	; 0x45
 8005a00:	d114      	bne.n	8005a2c <_strtod_l+0x19c>
 8005a02:	b924      	cbnz	r4, 8005a0e <_strtod_l+0x17e>
 8005a04:	b910      	cbnz	r0, 8005a0c <_strtod_l+0x17c>
 8005a06:	9b07      	ldr	r3, [sp, #28]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d09e      	beq.n	800594a <_strtod_l+0xba>
 8005a0c:	2400      	movs	r4, #0
 8005a0e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005a10:	1c73      	adds	r3, r6, #1
 8005a12:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a14:	7873      	ldrb	r3, [r6, #1]
 8005a16:	2b2b      	cmp	r3, #43	; 0x2b
 8005a18:	d078      	beq.n	8005b0c <_strtod_l+0x27c>
 8005a1a:	2b2d      	cmp	r3, #45	; 0x2d
 8005a1c:	d070      	beq.n	8005b00 <_strtod_l+0x270>
 8005a1e:	f04f 0c00 	mov.w	ip, #0
 8005a22:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005a26:	2f09      	cmp	r7, #9
 8005a28:	d97c      	bls.n	8005b24 <_strtod_l+0x294>
 8005a2a:	961b      	str	r6, [sp, #108]	; 0x6c
 8005a2c:	f04f 0e00 	mov.w	lr, #0
 8005a30:	e09a      	b.n	8005b68 <_strtod_l+0x2d8>
 8005a32:	2300      	movs	r3, #0
 8005a34:	e7c7      	b.n	80059c6 <_strtod_l+0x136>
 8005a36:	9904      	ldr	r1, [sp, #16]
 8005a38:	3001      	adds	r0, #1
 8005a3a:	2908      	cmp	r1, #8
 8005a3c:	bfd7      	itett	le
 8005a3e:	9906      	ldrle	r1, [sp, #24]
 8005a40:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005a44:	fb02 3301 	mlale	r3, r2, r1, r3
 8005a48:	9306      	strle	r3, [sp, #24]
 8005a4a:	9b04      	ldr	r3, [sp, #16]
 8005a4c:	901b      	str	r0, [sp, #108]	; 0x6c
 8005a4e:	3301      	adds	r3, #1
 8005a50:	9304      	str	r3, [sp, #16]
 8005a52:	e7bf      	b.n	80059d4 <_strtod_l+0x144>
 8005a54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a56:	191a      	adds	r2, r3, r4
 8005a58:	921b      	str	r2, [sp, #108]	; 0x6c
 8005a5a:	9a04      	ldr	r2, [sp, #16]
 8005a5c:	5d1b      	ldrb	r3, [r3, r4]
 8005a5e:	2a00      	cmp	r2, #0
 8005a60:	d037      	beq.n	8005ad2 <_strtod_l+0x242>
 8005a62:	4602      	mov	r2, r0
 8005a64:	9c04      	ldr	r4, [sp, #16]
 8005a66:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005a6a:	2909      	cmp	r1, #9
 8005a6c:	d913      	bls.n	8005a96 <_strtod_l+0x206>
 8005a6e:	2101      	movs	r1, #1
 8005a70:	9105      	str	r1, [sp, #20]
 8005a72:	e7c2      	b.n	80059fa <_strtod_l+0x16a>
 8005a74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a76:	3001      	adds	r0, #1
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	921b      	str	r2, [sp, #108]	; 0x6c
 8005a7c:	785b      	ldrb	r3, [r3, #1]
 8005a7e:	2b30      	cmp	r3, #48	; 0x30
 8005a80:	d0f8      	beq.n	8005a74 <_strtod_l+0x1e4>
 8005a82:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005a86:	2a08      	cmp	r2, #8
 8005a88:	f200 84f0 	bhi.w	800646c <_strtod_l+0xbdc>
 8005a8c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005a8e:	9208      	str	r2, [sp, #32]
 8005a90:	4602      	mov	r2, r0
 8005a92:	2000      	movs	r0, #0
 8005a94:	4604      	mov	r4, r0
 8005a96:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005a9a:	f100 0101 	add.w	r1, r0, #1
 8005a9e:	d012      	beq.n	8005ac6 <_strtod_l+0x236>
 8005aa0:	440a      	add	r2, r1
 8005aa2:	270a      	movs	r7, #10
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	eb00 0c04 	add.w	ip, r0, r4
 8005aaa:	458c      	cmp	ip, r1
 8005aac:	d113      	bne.n	8005ad6 <_strtod_l+0x246>
 8005aae:	1821      	adds	r1, r4, r0
 8005ab0:	2908      	cmp	r1, #8
 8005ab2:	f104 0401 	add.w	r4, r4, #1
 8005ab6:	4404      	add	r4, r0
 8005ab8:	dc19      	bgt.n	8005aee <_strtod_l+0x25e>
 8005aba:	210a      	movs	r1, #10
 8005abc:	9b06      	ldr	r3, [sp, #24]
 8005abe:	fb01 e303 	mla	r3, r1, r3, lr
 8005ac2:	9306      	str	r3, [sp, #24]
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ac8:	1c58      	adds	r0, r3, #1
 8005aca:	901b      	str	r0, [sp, #108]	; 0x6c
 8005acc:	785b      	ldrb	r3, [r3, #1]
 8005ace:	4608      	mov	r0, r1
 8005ad0:	e7c9      	b.n	8005a66 <_strtod_l+0x1d6>
 8005ad2:	9804      	ldr	r0, [sp, #16]
 8005ad4:	e7d3      	b.n	8005a7e <_strtod_l+0x1ee>
 8005ad6:	2908      	cmp	r1, #8
 8005ad8:	f101 0101 	add.w	r1, r1, #1
 8005adc:	dc03      	bgt.n	8005ae6 <_strtod_l+0x256>
 8005ade:	9b06      	ldr	r3, [sp, #24]
 8005ae0:	437b      	muls	r3, r7
 8005ae2:	9306      	str	r3, [sp, #24]
 8005ae4:	e7e1      	b.n	8005aaa <_strtod_l+0x21a>
 8005ae6:	2910      	cmp	r1, #16
 8005ae8:	bfd8      	it	le
 8005aea:	437d      	mulle	r5, r7
 8005aec:	e7dd      	b.n	8005aaa <_strtod_l+0x21a>
 8005aee:	2c10      	cmp	r4, #16
 8005af0:	bfdc      	itt	le
 8005af2:	210a      	movle	r1, #10
 8005af4:	fb01 e505 	mlale	r5, r1, r5, lr
 8005af8:	e7e4      	b.n	8005ac4 <_strtod_l+0x234>
 8005afa:	2301      	movs	r3, #1
 8005afc:	9305      	str	r3, [sp, #20]
 8005afe:	e781      	b.n	8005a04 <_strtod_l+0x174>
 8005b00:	f04f 0c01 	mov.w	ip, #1
 8005b04:	1cb3      	adds	r3, r6, #2
 8005b06:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b08:	78b3      	ldrb	r3, [r6, #2]
 8005b0a:	e78a      	b.n	8005a22 <_strtod_l+0x192>
 8005b0c:	f04f 0c00 	mov.w	ip, #0
 8005b10:	e7f8      	b.n	8005b04 <_strtod_l+0x274>
 8005b12:	bf00      	nop
 8005b14:	08007c38 	.word	0x08007c38
 8005b18:	7ff00000 	.word	0x7ff00000
 8005b1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b1e:	1c5f      	adds	r7, r3, #1
 8005b20:	971b      	str	r7, [sp, #108]	; 0x6c
 8005b22:	785b      	ldrb	r3, [r3, #1]
 8005b24:	2b30      	cmp	r3, #48	; 0x30
 8005b26:	d0f9      	beq.n	8005b1c <_strtod_l+0x28c>
 8005b28:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005b2c:	2f08      	cmp	r7, #8
 8005b2e:	f63f af7d 	bhi.w	8005a2c <_strtod_l+0x19c>
 8005b32:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005b36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b38:	9309      	str	r3, [sp, #36]	; 0x24
 8005b3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b3c:	1c5f      	adds	r7, r3, #1
 8005b3e:	971b      	str	r7, [sp, #108]	; 0x6c
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005b46:	f1b8 0f09 	cmp.w	r8, #9
 8005b4a:	d937      	bls.n	8005bbc <_strtod_l+0x32c>
 8005b4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b4e:	1a7f      	subs	r7, r7, r1
 8005b50:	2f08      	cmp	r7, #8
 8005b52:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005b56:	dc37      	bgt.n	8005bc8 <_strtod_l+0x338>
 8005b58:	45be      	cmp	lr, r7
 8005b5a:	bfa8      	it	ge
 8005b5c:	46be      	movge	lr, r7
 8005b5e:	f1bc 0f00 	cmp.w	ip, #0
 8005b62:	d001      	beq.n	8005b68 <_strtod_l+0x2d8>
 8005b64:	f1ce 0e00 	rsb	lr, lr, #0
 8005b68:	2c00      	cmp	r4, #0
 8005b6a:	d151      	bne.n	8005c10 <_strtod_l+0x380>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	f47f aece 	bne.w	800590e <_strtod_l+0x7e>
 8005b72:	9a07      	ldr	r2, [sp, #28]
 8005b74:	2a00      	cmp	r2, #0
 8005b76:	f47f aeca 	bne.w	800590e <_strtod_l+0x7e>
 8005b7a:	9a05      	ldr	r2, [sp, #20]
 8005b7c:	2a00      	cmp	r2, #0
 8005b7e:	f47f aee4 	bne.w	800594a <_strtod_l+0xba>
 8005b82:	2b4e      	cmp	r3, #78	; 0x4e
 8005b84:	d027      	beq.n	8005bd6 <_strtod_l+0x346>
 8005b86:	dc21      	bgt.n	8005bcc <_strtod_l+0x33c>
 8005b88:	2b49      	cmp	r3, #73	; 0x49
 8005b8a:	f47f aede 	bne.w	800594a <_strtod_l+0xba>
 8005b8e:	49a4      	ldr	r1, [pc, #656]	; (8005e20 <_strtod_l+0x590>)
 8005b90:	a81b      	add	r0, sp, #108	; 0x6c
 8005b92:	f001 f94d 	bl	8006e30 <__match>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	f43f aed7 	beq.w	800594a <_strtod_l+0xba>
 8005b9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b9e:	49a1      	ldr	r1, [pc, #644]	; (8005e24 <_strtod_l+0x594>)
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	a81b      	add	r0, sp, #108	; 0x6c
 8005ba4:	931b      	str	r3, [sp, #108]	; 0x6c
 8005ba6:	f001 f943 	bl	8006e30 <__match>
 8005baa:	b910      	cbnz	r0, 8005bb2 <_strtod_l+0x322>
 8005bac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bae:	3301      	adds	r3, #1
 8005bb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8005bb2:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005e38 <_strtod_l+0x5a8>
 8005bb6:	f04f 0900 	mov.w	r9, #0
 8005bba:	e6a8      	b.n	800590e <_strtod_l+0x7e>
 8005bbc:	210a      	movs	r1, #10
 8005bbe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005bc2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005bc6:	e7b8      	b.n	8005b3a <_strtod_l+0x2aa>
 8005bc8:	46be      	mov	lr, r7
 8005bca:	e7c8      	b.n	8005b5e <_strtod_l+0x2ce>
 8005bcc:	2b69      	cmp	r3, #105	; 0x69
 8005bce:	d0de      	beq.n	8005b8e <_strtod_l+0x2fe>
 8005bd0:	2b6e      	cmp	r3, #110	; 0x6e
 8005bd2:	f47f aeba 	bne.w	800594a <_strtod_l+0xba>
 8005bd6:	4994      	ldr	r1, [pc, #592]	; (8005e28 <_strtod_l+0x598>)
 8005bd8:	a81b      	add	r0, sp, #108	; 0x6c
 8005bda:	f001 f929 	bl	8006e30 <__match>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	f43f aeb3 	beq.w	800594a <_strtod_l+0xba>
 8005be4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b28      	cmp	r3, #40	; 0x28
 8005bea:	d10e      	bne.n	8005c0a <_strtod_l+0x37a>
 8005bec:	aa1e      	add	r2, sp, #120	; 0x78
 8005bee:	498f      	ldr	r1, [pc, #572]	; (8005e2c <_strtod_l+0x59c>)
 8005bf0:	a81b      	add	r0, sp, #108	; 0x6c
 8005bf2:	f001 f931 	bl	8006e58 <__hexnan>
 8005bf6:	2805      	cmp	r0, #5
 8005bf8:	d107      	bne.n	8005c0a <_strtod_l+0x37a>
 8005bfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005bfc:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005c00:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8005c04:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005c08:	e681      	b.n	800590e <_strtod_l+0x7e>
 8005c0a:	f8df a234 	ldr.w	sl, [pc, #564]	; 8005e40 <_strtod_l+0x5b0>
 8005c0e:	e7d2      	b.n	8005bb6 <_strtod_l+0x326>
 8005c10:	ebae 0302 	sub.w	r3, lr, r2
 8005c14:	9307      	str	r3, [sp, #28]
 8005c16:	9b04      	ldr	r3, [sp, #16]
 8005c18:	9806      	ldr	r0, [sp, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	bf08      	it	eq
 8005c1e:	4623      	moveq	r3, r4
 8005c20:	2c10      	cmp	r4, #16
 8005c22:	9304      	str	r3, [sp, #16]
 8005c24:	46a0      	mov	r8, r4
 8005c26:	bfa8      	it	ge
 8005c28:	f04f 0810 	movge.w	r8, #16
 8005c2c:	f7fa fbda 	bl	80003e4 <__aeabi_ui2d>
 8005c30:	2c09      	cmp	r4, #9
 8005c32:	4681      	mov	r9, r0
 8005c34:	468a      	mov	sl, r1
 8005c36:	dc13      	bgt.n	8005c60 <_strtod_l+0x3d0>
 8005c38:	9b07      	ldr	r3, [sp, #28]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f43f ae67 	beq.w	800590e <_strtod_l+0x7e>
 8005c40:	9b07      	ldr	r3, [sp, #28]
 8005c42:	dd7e      	ble.n	8005d42 <_strtod_l+0x4b2>
 8005c44:	2b16      	cmp	r3, #22
 8005c46:	dc65      	bgt.n	8005d14 <_strtod_l+0x484>
 8005c48:	4a79      	ldr	r2, [pc, #484]	; (8005e30 <_strtod_l+0x5a0>)
 8005c4a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005c4e:	464a      	mov	r2, r9
 8005c50:	e9de 0100 	ldrd	r0, r1, [lr]
 8005c54:	4653      	mov	r3, sl
 8005c56:	f7fa fc3f 	bl	80004d8 <__aeabi_dmul>
 8005c5a:	4681      	mov	r9, r0
 8005c5c:	468a      	mov	sl, r1
 8005c5e:	e656      	b.n	800590e <_strtod_l+0x7e>
 8005c60:	4b73      	ldr	r3, [pc, #460]	; (8005e30 <_strtod_l+0x5a0>)
 8005c62:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005c66:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005c6a:	f7fa fc35 	bl	80004d8 <__aeabi_dmul>
 8005c6e:	4606      	mov	r6, r0
 8005c70:	4628      	mov	r0, r5
 8005c72:	460f      	mov	r7, r1
 8005c74:	f7fa fbb6 	bl	80003e4 <__aeabi_ui2d>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	4639      	mov	r1, r7
 8005c80:	f7fa fa74 	bl	800016c <__adddf3>
 8005c84:	2c0f      	cmp	r4, #15
 8005c86:	4681      	mov	r9, r0
 8005c88:	468a      	mov	sl, r1
 8005c8a:	ddd5      	ble.n	8005c38 <_strtod_l+0x3a8>
 8005c8c:	9b07      	ldr	r3, [sp, #28]
 8005c8e:	eba4 0808 	sub.w	r8, r4, r8
 8005c92:	4498      	add	r8, r3
 8005c94:	f1b8 0f00 	cmp.w	r8, #0
 8005c98:	f340 809a 	ble.w	8005dd0 <_strtod_l+0x540>
 8005c9c:	f018 030f 	ands.w	r3, r8, #15
 8005ca0:	d00a      	beq.n	8005cb8 <_strtod_l+0x428>
 8005ca2:	4963      	ldr	r1, [pc, #396]	; (8005e30 <_strtod_l+0x5a0>)
 8005ca4:	464a      	mov	r2, r9
 8005ca6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005caa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cae:	4653      	mov	r3, sl
 8005cb0:	f7fa fc12 	bl	80004d8 <__aeabi_dmul>
 8005cb4:	4681      	mov	r9, r0
 8005cb6:	468a      	mov	sl, r1
 8005cb8:	f038 080f 	bics.w	r8, r8, #15
 8005cbc:	d077      	beq.n	8005dae <_strtod_l+0x51e>
 8005cbe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005cc2:	dd4b      	ble.n	8005d5c <_strtod_l+0x4cc>
 8005cc4:	f04f 0800 	mov.w	r8, #0
 8005cc8:	f8cd 8010 	str.w	r8, [sp, #16]
 8005ccc:	f8cd 8020 	str.w	r8, [sp, #32]
 8005cd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005cd4:	2322      	movs	r3, #34	; 0x22
 8005cd6:	f04f 0900 	mov.w	r9, #0
 8005cda:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005e38 <_strtod_l+0x5a8>
 8005cde:	f8cb 3000 	str.w	r3, [fp]
 8005ce2:	9b08      	ldr	r3, [sp, #32]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f43f ae12 	beq.w	800590e <_strtod_l+0x7e>
 8005cea:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005cec:	4658      	mov	r0, fp
 8005cee:	f001 f9fa 	bl	80070e6 <_Bfree>
 8005cf2:	9906      	ldr	r1, [sp, #24]
 8005cf4:	4658      	mov	r0, fp
 8005cf6:	f001 f9f6 	bl	80070e6 <_Bfree>
 8005cfa:	9904      	ldr	r1, [sp, #16]
 8005cfc:	4658      	mov	r0, fp
 8005cfe:	f001 f9f2 	bl	80070e6 <_Bfree>
 8005d02:	9908      	ldr	r1, [sp, #32]
 8005d04:	4658      	mov	r0, fp
 8005d06:	f001 f9ee 	bl	80070e6 <_Bfree>
 8005d0a:	4641      	mov	r1, r8
 8005d0c:	4658      	mov	r0, fp
 8005d0e:	f001 f9ea 	bl	80070e6 <_Bfree>
 8005d12:	e5fc      	b.n	800590e <_strtod_l+0x7e>
 8005d14:	9a07      	ldr	r2, [sp, #28]
 8005d16:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	dbb6      	blt.n	8005c8c <_strtod_l+0x3fc>
 8005d1e:	4d44      	ldr	r5, [pc, #272]	; (8005e30 <_strtod_l+0x5a0>)
 8005d20:	f1c4 040f 	rsb	r4, r4, #15
 8005d24:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005d28:	464a      	mov	r2, r9
 8005d2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d2e:	4653      	mov	r3, sl
 8005d30:	f7fa fbd2 	bl	80004d8 <__aeabi_dmul>
 8005d34:	9b07      	ldr	r3, [sp, #28]
 8005d36:	1b1c      	subs	r4, r3, r4
 8005d38:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005d3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d40:	e789      	b.n	8005c56 <_strtod_l+0x3c6>
 8005d42:	f113 0f16 	cmn.w	r3, #22
 8005d46:	dba1      	blt.n	8005c8c <_strtod_l+0x3fc>
 8005d48:	4a39      	ldr	r2, [pc, #228]	; (8005e30 <_strtod_l+0x5a0>)
 8005d4a:	4648      	mov	r0, r9
 8005d4c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005d50:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005d54:	4651      	mov	r1, sl
 8005d56:	f7fa fce9 	bl	800072c <__aeabi_ddiv>
 8005d5a:	e77e      	b.n	8005c5a <_strtod_l+0x3ca>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	4648      	mov	r0, r9
 8005d60:	4651      	mov	r1, sl
 8005d62:	461d      	mov	r5, r3
 8005d64:	4e33      	ldr	r6, [pc, #204]	; (8005e34 <_strtod_l+0x5a4>)
 8005d66:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005d6a:	f1b8 0f01 	cmp.w	r8, #1
 8005d6e:	dc21      	bgt.n	8005db4 <_strtod_l+0x524>
 8005d70:	b10b      	cbz	r3, 8005d76 <_strtod_l+0x4e6>
 8005d72:	4681      	mov	r9, r0
 8005d74:	468a      	mov	sl, r1
 8005d76:	4b2f      	ldr	r3, [pc, #188]	; (8005e34 <_strtod_l+0x5a4>)
 8005d78:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8005d7c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005d80:	464a      	mov	r2, r9
 8005d82:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005d86:	4653      	mov	r3, sl
 8005d88:	f7fa fba6 	bl	80004d8 <__aeabi_dmul>
 8005d8c:	4b2a      	ldr	r3, [pc, #168]	; (8005e38 <_strtod_l+0x5a8>)
 8005d8e:	460a      	mov	r2, r1
 8005d90:	400b      	ands	r3, r1
 8005d92:	492a      	ldr	r1, [pc, #168]	; (8005e3c <_strtod_l+0x5ac>)
 8005d94:	4681      	mov	r9, r0
 8005d96:	428b      	cmp	r3, r1
 8005d98:	d894      	bhi.n	8005cc4 <_strtod_l+0x434>
 8005d9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005d9e:	428b      	cmp	r3, r1
 8005da0:	bf86      	itte	hi
 8005da2:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 8005da6:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8005e44 <_strtod_l+0x5b4>
 8005daa:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8005dae:	2300      	movs	r3, #0
 8005db0:	9305      	str	r3, [sp, #20]
 8005db2:	e07b      	b.n	8005eac <_strtod_l+0x61c>
 8005db4:	f018 0f01 	tst.w	r8, #1
 8005db8:	d006      	beq.n	8005dc8 <_strtod_l+0x538>
 8005dba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	f7fa fb89 	bl	80004d8 <__aeabi_dmul>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	3501      	adds	r5, #1
 8005dca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005dce:	e7cc      	b.n	8005d6a <_strtod_l+0x4da>
 8005dd0:	d0ed      	beq.n	8005dae <_strtod_l+0x51e>
 8005dd2:	f1c8 0800 	rsb	r8, r8, #0
 8005dd6:	f018 020f 	ands.w	r2, r8, #15
 8005dda:	d00a      	beq.n	8005df2 <_strtod_l+0x562>
 8005ddc:	4b14      	ldr	r3, [pc, #80]	; (8005e30 <_strtod_l+0x5a0>)
 8005dde:	4648      	mov	r0, r9
 8005de0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005de4:	4651      	mov	r1, sl
 8005de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dea:	f7fa fc9f 	bl	800072c <__aeabi_ddiv>
 8005dee:	4681      	mov	r9, r0
 8005df0:	468a      	mov	sl, r1
 8005df2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005df6:	d0da      	beq.n	8005dae <_strtod_l+0x51e>
 8005df8:	f1b8 0f1f 	cmp.w	r8, #31
 8005dfc:	dd24      	ble.n	8005e48 <_strtod_l+0x5b8>
 8005dfe:	f04f 0800 	mov.w	r8, #0
 8005e02:	f8cd 8010 	str.w	r8, [sp, #16]
 8005e06:	f8cd 8020 	str.w	r8, [sp, #32]
 8005e0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e0e:	2322      	movs	r3, #34	; 0x22
 8005e10:	f04f 0900 	mov.w	r9, #0
 8005e14:	f04f 0a00 	mov.w	sl, #0
 8005e18:	f8cb 3000 	str.w	r3, [fp]
 8005e1c:	e761      	b.n	8005ce2 <_strtod_l+0x452>
 8005e1e:	bf00      	nop
 8005e20:	08007c2c 	.word	0x08007c2c
 8005e24:	08007c2f 	.word	0x08007c2f
 8005e28:	08007c35 	.word	0x08007c35
 8005e2c:	08007c4c 	.word	0x08007c4c
 8005e30:	08007d20 	.word	0x08007d20
 8005e34:	08007cf8 	.word	0x08007cf8
 8005e38:	7ff00000 	.word	0x7ff00000
 8005e3c:	7ca00000 	.word	0x7ca00000
 8005e40:	fff80000 	.word	0xfff80000
 8005e44:	7fefffff 	.word	0x7fefffff
 8005e48:	f018 0310 	ands.w	r3, r8, #16
 8005e4c:	bf18      	it	ne
 8005e4e:	236a      	movne	r3, #106	; 0x6a
 8005e50:	4648      	mov	r0, r9
 8005e52:	9305      	str	r3, [sp, #20]
 8005e54:	4651      	mov	r1, sl
 8005e56:	2300      	movs	r3, #0
 8005e58:	4da1      	ldr	r5, [pc, #644]	; (80060e0 <_strtod_l+0x850>)
 8005e5a:	f1b8 0f00 	cmp.w	r8, #0
 8005e5e:	f300 8113 	bgt.w	8006088 <_strtod_l+0x7f8>
 8005e62:	b10b      	cbz	r3, 8005e68 <_strtod_l+0x5d8>
 8005e64:	4681      	mov	r9, r0
 8005e66:	468a      	mov	sl, r1
 8005e68:	9b05      	ldr	r3, [sp, #20]
 8005e6a:	b1bb      	cbz	r3, 8005e9c <_strtod_l+0x60c>
 8005e6c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005e70:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	4651      	mov	r1, sl
 8005e78:	dd10      	ble.n	8005e9c <_strtod_l+0x60c>
 8005e7a:	2b1f      	cmp	r3, #31
 8005e7c:	f340 8110 	ble.w	80060a0 <_strtod_l+0x810>
 8005e80:	2b34      	cmp	r3, #52	; 0x34
 8005e82:	bfd8      	it	le
 8005e84:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8005e88:	f04f 0900 	mov.w	r9, #0
 8005e8c:	bfcf      	iteee	gt
 8005e8e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8005e92:	3b20      	suble	r3, #32
 8005e94:	fa02 f303 	lslle.w	r3, r2, r3
 8005e98:	ea03 0a01 	andle.w	sl, r3, r1
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	4648      	mov	r0, r9
 8005ea2:	4651      	mov	r1, sl
 8005ea4:	f7fa fd80 	bl	80009a8 <__aeabi_dcmpeq>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d1a8      	bne.n	8005dfe <_strtod_l+0x56e>
 8005eac:	9b06      	ldr	r3, [sp, #24]
 8005eae:	9a04      	ldr	r2, [sp, #16]
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	9908      	ldr	r1, [sp, #32]
 8005eb4:	4623      	mov	r3, r4
 8005eb6:	4658      	mov	r0, fp
 8005eb8:	f001 f967 	bl	800718a <__s2b>
 8005ebc:	9008      	str	r0, [sp, #32]
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	f43f af00 	beq.w	8005cc4 <_strtod_l+0x434>
 8005ec4:	9a07      	ldr	r2, [sp, #28]
 8005ec6:	9b07      	ldr	r3, [sp, #28]
 8005ec8:	2a00      	cmp	r2, #0
 8005eca:	f1c3 0300 	rsb	r3, r3, #0
 8005ece:	bfa8      	it	ge
 8005ed0:	2300      	movge	r3, #0
 8005ed2:	f04f 0800 	mov.w	r8, #0
 8005ed6:	930e      	str	r3, [sp, #56]	; 0x38
 8005ed8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005edc:	9316      	str	r3, [sp, #88]	; 0x58
 8005ede:	f8cd 8010 	str.w	r8, [sp, #16]
 8005ee2:	9b08      	ldr	r3, [sp, #32]
 8005ee4:	4658      	mov	r0, fp
 8005ee6:	6859      	ldr	r1, [r3, #4]
 8005ee8:	f001 f8c9 	bl	800707e <_Balloc>
 8005eec:	9006      	str	r0, [sp, #24]
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	f43f aef0 	beq.w	8005cd4 <_strtod_l+0x444>
 8005ef4:	9b08      	ldr	r3, [sp, #32]
 8005ef6:	300c      	adds	r0, #12
 8005ef8:	691a      	ldr	r2, [r3, #16]
 8005efa:	f103 010c 	add.w	r1, r3, #12
 8005efe:	3202      	adds	r2, #2
 8005f00:	0092      	lsls	r2, r2, #2
 8005f02:	f001 f8b1 	bl	8007068 <memcpy>
 8005f06:	ab1e      	add	r3, sp, #120	; 0x78
 8005f08:	9301      	str	r3, [sp, #4]
 8005f0a:	ab1d      	add	r3, sp, #116	; 0x74
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	464a      	mov	r2, r9
 8005f10:	4653      	mov	r3, sl
 8005f12:	4658      	mov	r0, fp
 8005f14:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8005f18:	f001 fbf2 	bl	8007700 <__d2b>
 8005f1c:	901c      	str	r0, [sp, #112]	; 0x70
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	f43f aed8 	beq.w	8005cd4 <_strtod_l+0x444>
 8005f24:	2101      	movs	r1, #1
 8005f26:	4658      	mov	r0, fp
 8005f28:	f001 f9bb 	bl	80072a2 <__i2b>
 8005f2c:	9004      	str	r0, [sp, #16]
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2800      	cmp	r0, #0
 8005f32:	f43f aecf 	beq.w	8005cd4 <_strtod_l+0x444>
 8005f36:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005f38:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005f3a:	2d00      	cmp	r5, #0
 8005f3c:	bfab      	itete	ge
 8005f3e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005f40:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005f42:	18ee      	addge	r6, r5, r3
 8005f44:	1b5c      	sublt	r4, r3, r5
 8005f46:	9b05      	ldr	r3, [sp, #20]
 8005f48:	bfa8      	it	ge
 8005f4a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005f4c:	eba5 0503 	sub.w	r5, r5, r3
 8005f50:	4415      	add	r5, r2
 8005f52:	4b64      	ldr	r3, [pc, #400]	; (80060e4 <_strtod_l+0x854>)
 8005f54:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8005f58:	bfb8      	it	lt
 8005f5a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005f5c:	429d      	cmp	r5, r3
 8005f5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005f62:	f280 80af 	bge.w	80060c4 <_strtod_l+0x834>
 8005f66:	1b5b      	subs	r3, r3, r5
 8005f68:	2b1f      	cmp	r3, #31
 8005f6a:	eba2 0203 	sub.w	r2, r2, r3
 8005f6e:	f04f 0701 	mov.w	r7, #1
 8005f72:	f300 809c 	bgt.w	80060ae <_strtod_l+0x81e>
 8005f76:	2500      	movs	r5, #0
 8005f78:	fa07 f303 	lsl.w	r3, r7, r3
 8005f7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f7e:	18b7      	adds	r7, r6, r2
 8005f80:	9b05      	ldr	r3, [sp, #20]
 8005f82:	42be      	cmp	r6, r7
 8005f84:	4414      	add	r4, r2
 8005f86:	441c      	add	r4, r3
 8005f88:	4633      	mov	r3, r6
 8005f8a:	bfa8      	it	ge
 8005f8c:	463b      	movge	r3, r7
 8005f8e:	42a3      	cmp	r3, r4
 8005f90:	bfa8      	it	ge
 8005f92:	4623      	movge	r3, r4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	bfc2      	ittt	gt
 8005f98:	1aff      	subgt	r7, r7, r3
 8005f9a:	1ae4      	subgt	r4, r4, r3
 8005f9c:	1af6      	subgt	r6, r6, r3
 8005f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fa0:	b1bb      	cbz	r3, 8005fd2 <_strtod_l+0x742>
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	9904      	ldr	r1, [sp, #16]
 8005fa6:	4658      	mov	r0, fp
 8005fa8:	f001 fa1a 	bl	80073e0 <__pow5mult>
 8005fac:	9004      	str	r0, [sp, #16]
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	f43f ae90 	beq.w	8005cd4 <_strtod_l+0x444>
 8005fb4:	4601      	mov	r1, r0
 8005fb6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005fb8:	4658      	mov	r0, fp
 8005fba:	f001 f97b 	bl	80072b4 <__multiply>
 8005fbe:	9009      	str	r0, [sp, #36]	; 0x24
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	f43f ae87 	beq.w	8005cd4 <_strtod_l+0x444>
 8005fc6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005fc8:	4658      	mov	r0, fp
 8005fca:	f001 f88c 	bl	80070e6 <_Bfree>
 8005fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd0:	931c      	str	r3, [sp, #112]	; 0x70
 8005fd2:	2f00      	cmp	r7, #0
 8005fd4:	dc7a      	bgt.n	80060cc <_strtod_l+0x83c>
 8005fd6:	9b07      	ldr	r3, [sp, #28]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	dd08      	ble.n	8005fee <_strtod_l+0x75e>
 8005fdc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005fde:	9906      	ldr	r1, [sp, #24]
 8005fe0:	4658      	mov	r0, fp
 8005fe2:	f001 f9fd 	bl	80073e0 <__pow5mult>
 8005fe6:	9006      	str	r0, [sp, #24]
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	f43f ae73 	beq.w	8005cd4 <_strtod_l+0x444>
 8005fee:	2c00      	cmp	r4, #0
 8005ff0:	dd08      	ble.n	8006004 <_strtod_l+0x774>
 8005ff2:	4622      	mov	r2, r4
 8005ff4:	9906      	ldr	r1, [sp, #24]
 8005ff6:	4658      	mov	r0, fp
 8005ff8:	f001 fa40 	bl	800747c <__lshift>
 8005ffc:	9006      	str	r0, [sp, #24]
 8005ffe:	2800      	cmp	r0, #0
 8006000:	f43f ae68 	beq.w	8005cd4 <_strtod_l+0x444>
 8006004:	2e00      	cmp	r6, #0
 8006006:	dd08      	ble.n	800601a <_strtod_l+0x78a>
 8006008:	4632      	mov	r2, r6
 800600a:	9904      	ldr	r1, [sp, #16]
 800600c:	4658      	mov	r0, fp
 800600e:	f001 fa35 	bl	800747c <__lshift>
 8006012:	9004      	str	r0, [sp, #16]
 8006014:	2800      	cmp	r0, #0
 8006016:	f43f ae5d 	beq.w	8005cd4 <_strtod_l+0x444>
 800601a:	9a06      	ldr	r2, [sp, #24]
 800601c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800601e:	4658      	mov	r0, fp
 8006020:	f001 fa9a 	bl	8007558 <__mdiff>
 8006024:	4680      	mov	r8, r0
 8006026:	2800      	cmp	r0, #0
 8006028:	f43f ae54 	beq.w	8005cd4 <_strtod_l+0x444>
 800602c:	2400      	movs	r4, #0
 800602e:	68c3      	ldr	r3, [r0, #12]
 8006030:	9904      	ldr	r1, [sp, #16]
 8006032:	60c4      	str	r4, [r0, #12]
 8006034:	930c      	str	r3, [sp, #48]	; 0x30
 8006036:	f001 fa75 	bl	8007524 <__mcmp>
 800603a:	42a0      	cmp	r0, r4
 800603c:	da54      	bge.n	80060e8 <_strtod_l+0x858>
 800603e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006040:	b9f3      	cbnz	r3, 8006080 <_strtod_l+0x7f0>
 8006042:	f1b9 0f00 	cmp.w	r9, #0
 8006046:	d11b      	bne.n	8006080 <_strtod_l+0x7f0>
 8006048:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800604c:	b9c3      	cbnz	r3, 8006080 <_strtod_l+0x7f0>
 800604e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006052:	0d1b      	lsrs	r3, r3, #20
 8006054:	051b      	lsls	r3, r3, #20
 8006056:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800605a:	d911      	bls.n	8006080 <_strtod_l+0x7f0>
 800605c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006060:	b91b      	cbnz	r3, 800606a <_strtod_l+0x7da>
 8006062:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006066:	2b01      	cmp	r3, #1
 8006068:	dd0a      	ble.n	8006080 <_strtod_l+0x7f0>
 800606a:	4641      	mov	r1, r8
 800606c:	2201      	movs	r2, #1
 800606e:	4658      	mov	r0, fp
 8006070:	f001 fa04 	bl	800747c <__lshift>
 8006074:	9904      	ldr	r1, [sp, #16]
 8006076:	4680      	mov	r8, r0
 8006078:	f001 fa54 	bl	8007524 <__mcmp>
 800607c:	2800      	cmp	r0, #0
 800607e:	dc68      	bgt.n	8006152 <_strtod_l+0x8c2>
 8006080:	9b05      	ldr	r3, [sp, #20]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d172      	bne.n	800616c <_strtod_l+0x8dc>
 8006086:	e630      	b.n	8005cea <_strtod_l+0x45a>
 8006088:	f018 0f01 	tst.w	r8, #1
 800608c:	d004      	beq.n	8006098 <_strtod_l+0x808>
 800608e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006092:	f7fa fa21 	bl	80004d8 <__aeabi_dmul>
 8006096:	2301      	movs	r3, #1
 8006098:	ea4f 0868 	mov.w	r8, r8, asr #1
 800609c:	3508      	adds	r5, #8
 800609e:	e6dc      	b.n	8005e5a <_strtod_l+0x5ca>
 80060a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	ea03 0909 	and.w	r9, r3, r9
 80060ac:	e6f6      	b.n	8005e9c <_strtod_l+0x60c>
 80060ae:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80060b2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80060b6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80060ba:	35e2      	adds	r5, #226	; 0xe2
 80060bc:	fa07 f505 	lsl.w	r5, r7, r5
 80060c0:	970f      	str	r7, [sp, #60]	; 0x3c
 80060c2:	e75c      	b.n	8005f7e <_strtod_l+0x6ee>
 80060c4:	2301      	movs	r3, #1
 80060c6:	2500      	movs	r5, #0
 80060c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80060ca:	e758      	b.n	8005f7e <_strtod_l+0x6ee>
 80060cc:	463a      	mov	r2, r7
 80060ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80060d0:	4658      	mov	r0, fp
 80060d2:	f001 f9d3 	bl	800747c <__lshift>
 80060d6:	901c      	str	r0, [sp, #112]	; 0x70
 80060d8:	2800      	cmp	r0, #0
 80060da:	f47f af7c 	bne.w	8005fd6 <_strtod_l+0x746>
 80060de:	e5f9      	b.n	8005cd4 <_strtod_l+0x444>
 80060e0:	08007c60 	.word	0x08007c60
 80060e4:	fffffc02 	.word	0xfffffc02
 80060e8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80060ec:	f040 8089 	bne.w	8006202 <_strtod_l+0x972>
 80060f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060f2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80060f6:	b342      	cbz	r2, 800614a <_strtod_l+0x8ba>
 80060f8:	4aaf      	ldr	r2, [pc, #700]	; (80063b8 <_strtod_l+0xb28>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d156      	bne.n	80061ac <_strtod_l+0x91c>
 80060fe:	9b05      	ldr	r3, [sp, #20]
 8006100:	4648      	mov	r0, r9
 8006102:	b1eb      	cbz	r3, 8006140 <_strtod_l+0x8b0>
 8006104:	4653      	mov	r3, sl
 8006106:	4aad      	ldr	r2, [pc, #692]	; (80063bc <_strtod_l+0xb2c>)
 8006108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800610c:	401a      	ands	r2, r3
 800610e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006112:	d818      	bhi.n	8006146 <_strtod_l+0x8b6>
 8006114:	0d12      	lsrs	r2, r2, #20
 8006116:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800611a:	fa01 f303 	lsl.w	r3, r1, r3
 800611e:	4298      	cmp	r0, r3
 8006120:	d144      	bne.n	80061ac <_strtod_l+0x91c>
 8006122:	4ba7      	ldr	r3, [pc, #668]	; (80063c0 <_strtod_l+0xb30>)
 8006124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006126:	429a      	cmp	r2, r3
 8006128:	d102      	bne.n	8006130 <_strtod_l+0x8a0>
 800612a:	3001      	adds	r0, #1
 800612c:	f43f add2 	beq.w	8005cd4 <_strtod_l+0x444>
 8006130:	4ba2      	ldr	r3, [pc, #648]	; (80063bc <_strtod_l+0xb2c>)
 8006132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006134:	f04f 0900 	mov.w	r9, #0
 8006138:	401a      	ands	r2, r3
 800613a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800613e:	e79f      	b.n	8006080 <_strtod_l+0x7f0>
 8006140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006144:	e7eb      	b.n	800611e <_strtod_l+0x88e>
 8006146:	460b      	mov	r3, r1
 8006148:	e7e9      	b.n	800611e <_strtod_l+0x88e>
 800614a:	bb7b      	cbnz	r3, 80061ac <_strtod_l+0x91c>
 800614c:	f1b9 0f00 	cmp.w	r9, #0
 8006150:	d12c      	bne.n	80061ac <_strtod_l+0x91c>
 8006152:	9905      	ldr	r1, [sp, #20]
 8006154:	4653      	mov	r3, sl
 8006156:	4a99      	ldr	r2, [pc, #612]	; (80063bc <_strtod_l+0xb2c>)
 8006158:	b1f1      	cbz	r1, 8006198 <_strtod_l+0x908>
 800615a:	ea02 010a 	and.w	r1, r2, sl
 800615e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006162:	dc19      	bgt.n	8006198 <_strtod_l+0x908>
 8006164:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006168:	f77f ae51 	ble.w	8005e0e <_strtod_l+0x57e>
 800616c:	2300      	movs	r3, #0
 800616e:	4a95      	ldr	r2, [pc, #596]	; (80063c4 <_strtod_l+0xb34>)
 8006170:	4648      	mov	r0, r9
 8006172:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006176:	4651      	mov	r1, sl
 8006178:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800617c:	f7fa f9ac 	bl	80004d8 <__aeabi_dmul>
 8006180:	4681      	mov	r9, r0
 8006182:	468a      	mov	sl, r1
 8006184:	2900      	cmp	r1, #0
 8006186:	f47f adb0 	bne.w	8005cea <_strtod_l+0x45a>
 800618a:	2800      	cmp	r0, #0
 800618c:	f47f adad 	bne.w	8005cea <_strtod_l+0x45a>
 8006190:	2322      	movs	r3, #34	; 0x22
 8006192:	f8cb 3000 	str.w	r3, [fp]
 8006196:	e5a8      	b.n	8005cea <_strtod_l+0x45a>
 8006198:	4013      	ands	r3, r2
 800619a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800619e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80061a2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80061a6:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80061aa:	e769      	b.n	8006080 <_strtod_l+0x7f0>
 80061ac:	b19d      	cbz	r5, 80061d6 <_strtod_l+0x946>
 80061ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b0:	421d      	tst	r5, r3
 80061b2:	f43f af65 	beq.w	8006080 <_strtod_l+0x7f0>
 80061b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061b8:	9a05      	ldr	r2, [sp, #20]
 80061ba:	4648      	mov	r0, r9
 80061bc:	4651      	mov	r1, sl
 80061be:	b173      	cbz	r3, 80061de <_strtod_l+0x94e>
 80061c0:	f7ff fb44 	bl	800584c <sulp>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061cc:	f7f9 ffce 	bl	800016c <__adddf3>
 80061d0:	4681      	mov	r9, r0
 80061d2:	468a      	mov	sl, r1
 80061d4:	e754      	b.n	8006080 <_strtod_l+0x7f0>
 80061d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061d8:	ea13 0f09 	tst.w	r3, r9
 80061dc:	e7e9      	b.n	80061b2 <_strtod_l+0x922>
 80061de:	f7ff fb35 	bl	800584c <sulp>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061ea:	f7f9 ffbd 	bl	8000168 <__aeabi_dsub>
 80061ee:	2200      	movs	r2, #0
 80061f0:	2300      	movs	r3, #0
 80061f2:	4681      	mov	r9, r0
 80061f4:	468a      	mov	sl, r1
 80061f6:	f7fa fbd7 	bl	80009a8 <__aeabi_dcmpeq>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	f47f ae07 	bne.w	8005e0e <_strtod_l+0x57e>
 8006200:	e73e      	b.n	8006080 <_strtod_l+0x7f0>
 8006202:	9904      	ldr	r1, [sp, #16]
 8006204:	4640      	mov	r0, r8
 8006206:	f001 faca 	bl	800779e <__ratio>
 800620a:	2200      	movs	r2, #0
 800620c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006210:	4606      	mov	r6, r0
 8006212:	460f      	mov	r7, r1
 8006214:	f7fa fbdc 	bl	80009d0 <__aeabi_dcmple>
 8006218:	2800      	cmp	r0, #0
 800621a:	d075      	beq.n	8006308 <_strtod_l+0xa78>
 800621c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800621e:	2b00      	cmp	r3, #0
 8006220:	d047      	beq.n	80062b2 <_strtod_l+0xa22>
 8006222:	2600      	movs	r6, #0
 8006224:	4f68      	ldr	r7, [pc, #416]	; (80063c8 <_strtod_l+0xb38>)
 8006226:	4d68      	ldr	r5, [pc, #416]	; (80063c8 <_strtod_l+0xb38>)
 8006228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800622a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800622e:	0d1b      	lsrs	r3, r3, #20
 8006230:	051b      	lsls	r3, r3, #20
 8006232:	930f      	str	r3, [sp, #60]	; 0x3c
 8006234:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006236:	4b65      	ldr	r3, [pc, #404]	; (80063cc <_strtod_l+0xb3c>)
 8006238:	429a      	cmp	r2, r3
 800623a:	f040 80cf 	bne.w	80063dc <_strtod_l+0xb4c>
 800623e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006242:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006248:	4648      	mov	r0, r9
 800624a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800624e:	4651      	mov	r1, sl
 8006250:	f001 f9e0 	bl	8007614 <__ulp>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4630      	mov	r0, r6
 800625a:	4639      	mov	r1, r7
 800625c:	f7fa f93c 	bl	80004d8 <__aeabi_dmul>
 8006260:	464a      	mov	r2, r9
 8006262:	4653      	mov	r3, sl
 8006264:	f7f9 ff82 	bl	800016c <__adddf3>
 8006268:	460b      	mov	r3, r1
 800626a:	4954      	ldr	r1, [pc, #336]	; (80063bc <_strtod_l+0xb2c>)
 800626c:	4a58      	ldr	r2, [pc, #352]	; (80063d0 <_strtod_l+0xb40>)
 800626e:	4019      	ands	r1, r3
 8006270:	4291      	cmp	r1, r2
 8006272:	4681      	mov	r9, r0
 8006274:	d95e      	bls.n	8006334 <_strtod_l+0xaa4>
 8006276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006278:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800627c:	4293      	cmp	r3, r2
 800627e:	d103      	bne.n	8006288 <_strtod_l+0x9f8>
 8006280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006282:	3301      	adds	r3, #1
 8006284:	f43f ad26 	beq.w	8005cd4 <_strtod_l+0x444>
 8006288:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800628c:	f8df a130 	ldr.w	sl, [pc, #304]	; 80063c0 <_strtod_l+0xb30>
 8006290:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006292:	4658      	mov	r0, fp
 8006294:	f000 ff27 	bl	80070e6 <_Bfree>
 8006298:	9906      	ldr	r1, [sp, #24]
 800629a:	4658      	mov	r0, fp
 800629c:	f000 ff23 	bl	80070e6 <_Bfree>
 80062a0:	9904      	ldr	r1, [sp, #16]
 80062a2:	4658      	mov	r0, fp
 80062a4:	f000 ff1f 	bl	80070e6 <_Bfree>
 80062a8:	4641      	mov	r1, r8
 80062aa:	4658      	mov	r0, fp
 80062ac:	f000 ff1b 	bl	80070e6 <_Bfree>
 80062b0:	e617      	b.n	8005ee2 <_strtod_l+0x652>
 80062b2:	f1b9 0f00 	cmp.w	r9, #0
 80062b6:	d119      	bne.n	80062ec <_strtod_l+0xa5c>
 80062b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062be:	b9e3      	cbnz	r3, 80062fa <_strtod_l+0xa6a>
 80062c0:	2200      	movs	r2, #0
 80062c2:	4b41      	ldr	r3, [pc, #260]	; (80063c8 <_strtod_l+0xb38>)
 80062c4:	4630      	mov	r0, r6
 80062c6:	4639      	mov	r1, r7
 80062c8:	f7fa fb78 	bl	80009bc <__aeabi_dcmplt>
 80062cc:	b9c8      	cbnz	r0, 8006302 <_strtod_l+0xa72>
 80062ce:	2200      	movs	r2, #0
 80062d0:	4b40      	ldr	r3, [pc, #256]	; (80063d4 <_strtod_l+0xb44>)
 80062d2:	4630      	mov	r0, r6
 80062d4:	4639      	mov	r1, r7
 80062d6:	f7fa f8ff 	bl	80004d8 <__aeabi_dmul>
 80062da:	4604      	mov	r4, r0
 80062dc:	460d      	mov	r5, r1
 80062de:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80062e2:	9418      	str	r4, [sp, #96]	; 0x60
 80062e4:	9319      	str	r3, [sp, #100]	; 0x64
 80062e6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80062ea:	e79d      	b.n	8006228 <_strtod_l+0x998>
 80062ec:	f1b9 0f01 	cmp.w	r9, #1
 80062f0:	d103      	bne.n	80062fa <_strtod_l+0xa6a>
 80062f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f43f ad8a 	beq.w	8005e0e <_strtod_l+0x57e>
 80062fa:	2600      	movs	r6, #0
 80062fc:	4f36      	ldr	r7, [pc, #216]	; (80063d8 <_strtod_l+0xb48>)
 80062fe:	2400      	movs	r4, #0
 8006300:	e791      	b.n	8006226 <_strtod_l+0x996>
 8006302:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006304:	4d33      	ldr	r5, [pc, #204]	; (80063d4 <_strtod_l+0xb44>)
 8006306:	e7ea      	b.n	80062de <_strtod_l+0xa4e>
 8006308:	4b32      	ldr	r3, [pc, #200]	; (80063d4 <_strtod_l+0xb44>)
 800630a:	2200      	movs	r2, #0
 800630c:	4630      	mov	r0, r6
 800630e:	4639      	mov	r1, r7
 8006310:	f7fa f8e2 	bl	80004d8 <__aeabi_dmul>
 8006314:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006316:	4604      	mov	r4, r0
 8006318:	460d      	mov	r5, r1
 800631a:	b933      	cbnz	r3, 800632a <_strtod_l+0xa9a>
 800631c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006320:	9010      	str	r0, [sp, #64]	; 0x40
 8006322:	9311      	str	r3, [sp, #68]	; 0x44
 8006324:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006328:	e77e      	b.n	8006228 <_strtod_l+0x998>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006332:	e7f7      	b.n	8006324 <_strtod_l+0xa94>
 8006334:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8006338:	9b05      	ldr	r3, [sp, #20]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1a8      	bne.n	8006290 <_strtod_l+0xa00>
 800633e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006342:	0d1b      	lsrs	r3, r3, #20
 8006344:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006346:	051b      	lsls	r3, r3, #20
 8006348:	429a      	cmp	r2, r3
 800634a:	4656      	mov	r6, sl
 800634c:	d1a0      	bne.n	8006290 <_strtod_l+0xa00>
 800634e:	4629      	mov	r1, r5
 8006350:	4620      	mov	r0, r4
 8006352:	f7fa fb5b 	bl	8000a0c <__aeabi_d2iz>
 8006356:	f7fa f855 	bl	8000404 <__aeabi_i2d>
 800635a:	460b      	mov	r3, r1
 800635c:	4602      	mov	r2, r0
 800635e:	4629      	mov	r1, r5
 8006360:	4620      	mov	r0, r4
 8006362:	f7f9 ff01 	bl	8000168 <__aeabi_dsub>
 8006366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006368:	4604      	mov	r4, r0
 800636a:	460d      	mov	r5, r1
 800636c:	b933      	cbnz	r3, 800637c <_strtod_l+0xaec>
 800636e:	f1b9 0f00 	cmp.w	r9, #0
 8006372:	d103      	bne.n	800637c <_strtod_l+0xaec>
 8006374:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8006378:	2e00      	cmp	r6, #0
 800637a:	d06a      	beq.n	8006452 <_strtod_l+0xbc2>
 800637c:	a30a      	add	r3, pc, #40	; (adr r3, 80063a8 <_strtod_l+0xb18>)
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	4620      	mov	r0, r4
 8006384:	4629      	mov	r1, r5
 8006386:	f7fa fb19 	bl	80009bc <__aeabi_dcmplt>
 800638a:	2800      	cmp	r0, #0
 800638c:	f47f acad 	bne.w	8005cea <_strtod_l+0x45a>
 8006390:	a307      	add	r3, pc, #28	; (adr r3, 80063b0 <_strtod_l+0xb20>)
 8006392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006396:	4620      	mov	r0, r4
 8006398:	4629      	mov	r1, r5
 800639a:	f7fa fb2d 	bl	80009f8 <__aeabi_dcmpgt>
 800639e:	2800      	cmp	r0, #0
 80063a0:	f43f af76 	beq.w	8006290 <_strtod_l+0xa00>
 80063a4:	e4a1      	b.n	8005cea <_strtod_l+0x45a>
 80063a6:	bf00      	nop
 80063a8:	94a03595 	.word	0x94a03595
 80063ac:	3fdfffff 	.word	0x3fdfffff
 80063b0:	35afe535 	.word	0x35afe535
 80063b4:	3fe00000 	.word	0x3fe00000
 80063b8:	000fffff 	.word	0x000fffff
 80063bc:	7ff00000 	.word	0x7ff00000
 80063c0:	7fefffff 	.word	0x7fefffff
 80063c4:	39500000 	.word	0x39500000
 80063c8:	3ff00000 	.word	0x3ff00000
 80063cc:	7fe00000 	.word	0x7fe00000
 80063d0:	7c9fffff 	.word	0x7c9fffff
 80063d4:	3fe00000 	.word	0x3fe00000
 80063d8:	bff00000 	.word	0xbff00000
 80063dc:	9b05      	ldr	r3, [sp, #20]
 80063de:	b313      	cbz	r3, 8006426 <_strtod_l+0xb96>
 80063e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80063e6:	d81e      	bhi.n	8006426 <_strtod_l+0xb96>
 80063e8:	a325      	add	r3, pc, #148	; (adr r3, 8006480 <_strtod_l+0xbf0>)
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	4620      	mov	r0, r4
 80063f0:	4629      	mov	r1, r5
 80063f2:	f7fa faed 	bl	80009d0 <__aeabi_dcmple>
 80063f6:	b190      	cbz	r0, 800641e <_strtod_l+0xb8e>
 80063f8:	4629      	mov	r1, r5
 80063fa:	4620      	mov	r0, r4
 80063fc:	f7fa fb2e 	bl	8000a5c <__aeabi_d2uiz>
 8006400:	2800      	cmp	r0, #0
 8006402:	bf08      	it	eq
 8006404:	2001      	moveq	r0, #1
 8006406:	f7f9 ffed 	bl	80003e4 <__aeabi_ui2d>
 800640a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800640c:	4604      	mov	r4, r0
 800640e:	460d      	mov	r5, r1
 8006410:	b9d3      	cbnz	r3, 8006448 <_strtod_l+0xbb8>
 8006412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006416:	9012      	str	r0, [sp, #72]	; 0x48
 8006418:	9313      	str	r3, [sp, #76]	; 0x4c
 800641a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800641e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006420:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006424:	1a9f      	subs	r7, r3, r2
 8006426:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800642a:	f001 f8f3 	bl	8007614 <__ulp>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4630      	mov	r0, r6
 8006434:	4639      	mov	r1, r7
 8006436:	f7fa f84f 	bl	80004d8 <__aeabi_dmul>
 800643a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800643e:	f7f9 fe95 	bl	800016c <__adddf3>
 8006442:	4681      	mov	r9, r0
 8006444:	468a      	mov	sl, r1
 8006446:	e777      	b.n	8006338 <_strtod_l+0xaa8>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006450:	e7e3      	b.n	800641a <_strtod_l+0xb8a>
 8006452:	a30d      	add	r3, pc, #52	; (adr r3, 8006488 <_strtod_l+0xbf8>)
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	f7fa fab0 	bl	80009bc <__aeabi_dcmplt>
 800645c:	e79f      	b.n	800639e <_strtod_l+0xb0e>
 800645e:	2300      	movs	r3, #0
 8006460:	930d      	str	r3, [sp, #52]	; 0x34
 8006462:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006464:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	f7ff ba55 	b.w	8005916 <_strtod_l+0x86>
 800646c:	2b65      	cmp	r3, #101	; 0x65
 800646e:	f04f 0200 	mov.w	r2, #0
 8006472:	f43f ab42 	beq.w	8005afa <_strtod_l+0x26a>
 8006476:	2101      	movs	r1, #1
 8006478:	4614      	mov	r4, r2
 800647a:	9105      	str	r1, [sp, #20]
 800647c:	f7ff babf 	b.w	80059fe <_strtod_l+0x16e>
 8006480:	ffc00000 	.word	0xffc00000
 8006484:	41dfffff 	.word	0x41dfffff
 8006488:	94a03595 	.word	0x94a03595
 800648c:	3fcfffff 	.word	0x3fcfffff

08006490 <strtod>:
 8006490:	4b06      	ldr	r3, [pc, #24]	; (80064ac <strtod+0x1c>)
 8006492:	b410      	push	{r4}
 8006494:	681c      	ldr	r4, [r3, #0]
 8006496:	4a06      	ldr	r2, [pc, #24]	; (80064b0 <strtod+0x20>)
 8006498:	6a23      	ldr	r3, [r4, #32]
 800649a:	2b00      	cmp	r3, #0
 800649c:	bf08      	it	eq
 800649e:	4613      	moveq	r3, r2
 80064a0:	460a      	mov	r2, r1
 80064a2:	4601      	mov	r1, r0
 80064a4:	4620      	mov	r0, r4
 80064a6:	bc10      	pop	{r4}
 80064a8:	f7ff b9f2 	b.w	8005890 <_strtod_l>
 80064ac:	20000050 	.word	0x20000050
 80064b0:	200000b4 	.word	0x200000b4

080064b4 <__swbuf_r>:
 80064b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b6:	460e      	mov	r6, r1
 80064b8:	4614      	mov	r4, r2
 80064ba:	4605      	mov	r5, r0
 80064bc:	b118      	cbz	r0, 80064c6 <__swbuf_r+0x12>
 80064be:	6983      	ldr	r3, [r0, #24]
 80064c0:	b90b      	cbnz	r3, 80064c6 <__swbuf_r+0x12>
 80064c2:	f000 f9a7 	bl	8006814 <__sinit>
 80064c6:	4b21      	ldr	r3, [pc, #132]	; (800654c <__swbuf_r+0x98>)
 80064c8:	429c      	cmp	r4, r3
 80064ca:	d12a      	bne.n	8006522 <__swbuf_r+0x6e>
 80064cc:	686c      	ldr	r4, [r5, #4]
 80064ce:	69a3      	ldr	r3, [r4, #24]
 80064d0:	60a3      	str	r3, [r4, #8]
 80064d2:	89a3      	ldrh	r3, [r4, #12]
 80064d4:	071a      	lsls	r2, r3, #28
 80064d6:	d52e      	bpl.n	8006536 <__swbuf_r+0x82>
 80064d8:	6923      	ldr	r3, [r4, #16]
 80064da:	b363      	cbz	r3, 8006536 <__swbuf_r+0x82>
 80064dc:	6923      	ldr	r3, [r4, #16]
 80064de:	6820      	ldr	r0, [r4, #0]
 80064e0:	b2f6      	uxtb	r6, r6
 80064e2:	1ac0      	subs	r0, r0, r3
 80064e4:	6963      	ldr	r3, [r4, #20]
 80064e6:	4637      	mov	r7, r6
 80064e8:	4283      	cmp	r3, r0
 80064ea:	dc04      	bgt.n	80064f6 <__swbuf_r+0x42>
 80064ec:	4621      	mov	r1, r4
 80064ee:	4628      	mov	r0, r5
 80064f0:	f000 f926 	bl	8006740 <_fflush_r>
 80064f4:	bb28      	cbnz	r0, 8006542 <__swbuf_r+0x8e>
 80064f6:	68a3      	ldr	r3, [r4, #8]
 80064f8:	3001      	adds	r0, #1
 80064fa:	3b01      	subs	r3, #1
 80064fc:	60a3      	str	r3, [r4, #8]
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	6022      	str	r2, [r4, #0]
 8006504:	701e      	strb	r6, [r3, #0]
 8006506:	6963      	ldr	r3, [r4, #20]
 8006508:	4283      	cmp	r3, r0
 800650a:	d004      	beq.n	8006516 <__swbuf_r+0x62>
 800650c:	89a3      	ldrh	r3, [r4, #12]
 800650e:	07db      	lsls	r3, r3, #31
 8006510:	d519      	bpl.n	8006546 <__swbuf_r+0x92>
 8006512:	2e0a      	cmp	r6, #10
 8006514:	d117      	bne.n	8006546 <__swbuf_r+0x92>
 8006516:	4621      	mov	r1, r4
 8006518:	4628      	mov	r0, r5
 800651a:	f000 f911 	bl	8006740 <_fflush_r>
 800651e:	b190      	cbz	r0, 8006546 <__swbuf_r+0x92>
 8006520:	e00f      	b.n	8006542 <__swbuf_r+0x8e>
 8006522:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <__swbuf_r+0x9c>)
 8006524:	429c      	cmp	r4, r3
 8006526:	d101      	bne.n	800652c <__swbuf_r+0x78>
 8006528:	68ac      	ldr	r4, [r5, #8]
 800652a:	e7d0      	b.n	80064ce <__swbuf_r+0x1a>
 800652c:	4b09      	ldr	r3, [pc, #36]	; (8006554 <__swbuf_r+0xa0>)
 800652e:	429c      	cmp	r4, r3
 8006530:	bf08      	it	eq
 8006532:	68ec      	ldreq	r4, [r5, #12]
 8006534:	e7cb      	b.n	80064ce <__swbuf_r+0x1a>
 8006536:	4621      	mov	r1, r4
 8006538:	4628      	mov	r0, r5
 800653a:	f000 f80d 	bl	8006558 <__swsetup_r>
 800653e:	2800      	cmp	r0, #0
 8006540:	d0cc      	beq.n	80064dc <__swbuf_r+0x28>
 8006542:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006546:	4638      	mov	r0, r7
 8006548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800654a:	bf00      	nop
 800654c:	08007ca8 	.word	0x08007ca8
 8006550:	08007cc8 	.word	0x08007cc8
 8006554:	08007c88 	.word	0x08007c88

08006558 <__swsetup_r>:
 8006558:	4b32      	ldr	r3, [pc, #200]	; (8006624 <__swsetup_r+0xcc>)
 800655a:	b570      	push	{r4, r5, r6, lr}
 800655c:	681d      	ldr	r5, [r3, #0]
 800655e:	4606      	mov	r6, r0
 8006560:	460c      	mov	r4, r1
 8006562:	b125      	cbz	r5, 800656e <__swsetup_r+0x16>
 8006564:	69ab      	ldr	r3, [r5, #24]
 8006566:	b913      	cbnz	r3, 800656e <__swsetup_r+0x16>
 8006568:	4628      	mov	r0, r5
 800656a:	f000 f953 	bl	8006814 <__sinit>
 800656e:	4b2e      	ldr	r3, [pc, #184]	; (8006628 <__swsetup_r+0xd0>)
 8006570:	429c      	cmp	r4, r3
 8006572:	d10f      	bne.n	8006594 <__swsetup_r+0x3c>
 8006574:	686c      	ldr	r4, [r5, #4]
 8006576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800657a:	b29a      	uxth	r2, r3
 800657c:	0715      	lsls	r5, r2, #28
 800657e:	d42c      	bmi.n	80065da <__swsetup_r+0x82>
 8006580:	06d0      	lsls	r0, r2, #27
 8006582:	d411      	bmi.n	80065a8 <__swsetup_r+0x50>
 8006584:	2209      	movs	r2, #9
 8006586:	6032      	str	r2, [r6, #0]
 8006588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800658c:	81a3      	strh	r3, [r4, #12]
 800658e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006592:	e03e      	b.n	8006612 <__swsetup_r+0xba>
 8006594:	4b25      	ldr	r3, [pc, #148]	; (800662c <__swsetup_r+0xd4>)
 8006596:	429c      	cmp	r4, r3
 8006598:	d101      	bne.n	800659e <__swsetup_r+0x46>
 800659a:	68ac      	ldr	r4, [r5, #8]
 800659c:	e7eb      	b.n	8006576 <__swsetup_r+0x1e>
 800659e:	4b24      	ldr	r3, [pc, #144]	; (8006630 <__swsetup_r+0xd8>)
 80065a0:	429c      	cmp	r4, r3
 80065a2:	bf08      	it	eq
 80065a4:	68ec      	ldreq	r4, [r5, #12]
 80065a6:	e7e6      	b.n	8006576 <__swsetup_r+0x1e>
 80065a8:	0751      	lsls	r1, r2, #29
 80065aa:	d512      	bpl.n	80065d2 <__swsetup_r+0x7a>
 80065ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065ae:	b141      	cbz	r1, 80065c2 <__swsetup_r+0x6a>
 80065b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065b4:	4299      	cmp	r1, r3
 80065b6:	d002      	beq.n	80065be <__swsetup_r+0x66>
 80065b8:	4630      	mov	r0, r6
 80065ba:	f001 f967 	bl	800788c <_free_r>
 80065be:	2300      	movs	r3, #0
 80065c0:	6363      	str	r3, [r4, #52]	; 0x34
 80065c2:	89a3      	ldrh	r3, [r4, #12]
 80065c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065c8:	81a3      	strh	r3, [r4, #12]
 80065ca:	2300      	movs	r3, #0
 80065cc:	6063      	str	r3, [r4, #4]
 80065ce:	6923      	ldr	r3, [r4, #16]
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	89a3      	ldrh	r3, [r4, #12]
 80065d4:	f043 0308 	orr.w	r3, r3, #8
 80065d8:	81a3      	strh	r3, [r4, #12]
 80065da:	6923      	ldr	r3, [r4, #16]
 80065dc:	b94b      	cbnz	r3, 80065f2 <__swsetup_r+0x9a>
 80065de:	89a3      	ldrh	r3, [r4, #12]
 80065e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065e8:	d003      	beq.n	80065f2 <__swsetup_r+0x9a>
 80065ea:	4621      	mov	r1, r4
 80065ec:	4630      	mov	r0, r6
 80065ee:	f000 fce9 	bl	8006fc4 <__smakebuf_r>
 80065f2:	89a2      	ldrh	r2, [r4, #12]
 80065f4:	f012 0301 	ands.w	r3, r2, #1
 80065f8:	d00c      	beq.n	8006614 <__swsetup_r+0xbc>
 80065fa:	2300      	movs	r3, #0
 80065fc:	60a3      	str	r3, [r4, #8]
 80065fe:	6963      	ldr	r3, [r4, #20]
 8006600:	425b      	negs	r3, r3
 8006602:	61a3      	str	r3, [r4, #24]
 8006604:	6923      	ldr	r3, [r4, #16]
 8006606:	b953      	cbnz	r3, 800661e <__swsetup_r+0xc6>
 8006608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800660c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006610:	d1ba      	bne.n	8006588 <__swsetup_r+0x30>
 8006612:	bd70      	pop	{r4, r5, r6, pc}
 8006614:	0792      	lsls	r2, r2, #30
 8006616:	bf58      	it	pl
 8006618:	6963      	ldrpl	r3, [r4, #20]
 800661a:	60a3      	str	r3, [r4, #8]
 800661c:	e7f2      	b.n	8006604 <__swsetup_r+0xac>
 800661e:	2000      	movs	r0, #0
 8006620:	e7f7      	b.n	8006612 <__swsetup_r+0xba>
 8006622:	bf00      	nop
 8006624:	20000050 	.word	0x20000050
 8006628:	08007ca8 	.word	0x08007ca8
 800662c:	08007cc8 	.word	0x08007cc8
 8006630:	08007c88 	.word	0x08007c88

08006634 <__sflush_r>:
 8006634:	898a      	ldrh	r2, [r1, #12]
 8006636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800663a:	4605      	mov	r5, r0
 800663c:	0710      	lsls	r0, r2, #28
 800663e:	460c      	mov	r4, r1
 8006640:	d458      	bmi.n	80066f4 <__sflush_r+0xc0>
 8006642:	684b      	ldr	r3, [r1, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	dc05      	bgt.n	8006654 <__sflush_r+0x20>
 8006648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800664a:	2b00      	cmp	r3, #0
 800664c:	dc02      	bgt.n	8006654 <__sflush_r+0x20>
 800664e:	2000      	movs	r0, #0
 8006650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006656:	2e00      	cmp	r6, #0
 8006658:	d0f9      	beq.n	800664e <__sflush_r+0x1a>
 800665a:	2300      	movs	r3, #0
 800665c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006660:	682f      	ldr	r7, [r5, #0]
 8006662:	6a21      	ldr	r1, [r4, #32]
 8006664:	602b      	str	r3, [r5, #0]
 8006666:	d032      	beq.n	80066ce <__sflush_r+0x9a>
 8006668:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	075a      	lsls	r2, r3, #29
 800666e:	d505      	bpl.n	800667c <__sflush_r+0x48>
 8006670:	6863      	ldr	r3, [r4, #4]
 8006672:	1ac0      	subs	r0, r0, r3
 8006674:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006676:	b10b      	cbz	r3, 800667c <__sflush_r+0x48>
 8006678:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800667a:	1ac0      	subs	r0, r0, r3
 800667c:	2300      	movs	r3, #0
 800667e:	4602      	mov	r2, r0
 8006680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006682:	6a21      	ldr	r1, [r4, #32]
 8006684:	4628      	mov	r0, r5
 8006686:	47b0      	blx	r6
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	d106      	bne.n	800669c <__sflush_r+0x68>
 800668e:	6829      	ldr	r1, [r5, #0]
 8006690:	291d      	cmp	r1, #29
 8006692:	d848      	bhi.n	8006726 <__sflush_r+0xf2>
 8006694:	4a29      	ldr	r2, [pc, #164]	; (800673c <__sflush_r+0x108>)
 8006696:	40ca      	lsrs	r2, r1
 8006698:	07d6      	lsls	r6, r2, #31
 800669a:	d544      	bpl.n	8006726 <__sflush_r+0xf2>
 800669c:	2200      	movs	r2, #0
 800669e:	6062      	str	r2, [r4, #4]
 80066a0:	6922      	ldr	r2, [r4, #16]
 80066a2:	04d9      	lsls	r1, r3, #19
 80066a4:	6022      	str	r2, [r4, #0]
 80066a6:	d504      	bpl.n	80066b2 <__sflush_r+0x7e>
 80066a8:	1c42      	adds	r2, r0, #1
 80066aa:	d101      	bne.n	80066b0 <__sflush_r+0x7c>
 80066ac:	682b      	ldr	r3, [r5, #0]
 80066ae:	b903      	cbnz	r3, 80066b2 <__sflush_r+0x7e>
 80066b0:	6560      	str	r0, [r4, #84]	; 0x54
 80066b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066b4:	602f      	str	r7, [r5, #0]
 80066b6:	2900      	cmp	r1, #0
 80066b8:	d0c9      	beq.n	800664e <__sflush_r+0x1a>
 80066ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066be:	4299      	cmp	r1, r3
 80066c0:	d002      	beq.n	80066c8 <__sflush_r+0x94>
 80066c2:	4628      	mov	r0, r5
 80066c4:	f001 f8e2 	bl	800788c <_free_r>
 80066c8:	2000      	movs	r0, #0
 80066ca:	6360      	str	r0, [r4, #52]	; 0x34
 80066cc:	e7c0      	b.n	8006650 <__sflush_r+0x1c>
 80066ce:	2301      	movs	r3, #1
 80066d0:	4628      	mov	r0, r5
 80066d2:	47b0      	blx	r6
 80066d4:	1c41      	adds	r1, r0, #1
 80066d6:	d1c8      	bne.n	800666a <__sflush_r+0x36>
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0c5      	beq.n	800666a <__sflush_r+0x36>
 80066de:	2b1d      	cmp	r3, #29
 80066e0:	d001      	beq.n	80066e6 <__sflush_r+0xb2>
 80066e2:	2b16      	cmp	r3, #22
 80066e4:	d101      	bne.n	80066ea <__sflush_r+0xb6>
 80066e6:	602f      	str	r7, [r5, #0]
 80066e8:	e7b1      	b.n	800664e <__sflush_r+0x1a>
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066f0:	81a3      	strh	r3, [r4, #12]
 80066f2:	e7ad      	b.n	8006650 <__sflush_r+0x1c>
 80066f4:	690f      	ldr	r7, [r1, #16]
 80066f6:	2f00      	cmp	r7, #0
 80066f8:	d0a9      	beq.n	800664e <__sflush_r+0x1a>
 80066fa:	0793      	lsls	r3, r2, #30
 80066fc:	bf18      	it	ne
 80066fe:	2300      	movne	r3, #0
 8006700:	680e      	ldr	r6, [r1, #0]
 8006702:	bf08      	it	eq
 8006704:	694b      	ldreq	r3, [r1, #20]
 8006706:	eba6 0807 	sub.w	r8, r6, r7
 800670a:	600f      	str	r7, [r1, #0]
 800670c:	608b      	str	r3, [r1, #8]
 800670e:	f1b8 0f00 	cmp.w	r8, #0
 8006712:	dd9c      	ble.n	800664e <__sflush_r+0x1a>
 8006714:	4643      	mov	r3, r8
 8006716:	463a      	mov	r2, r7
 8006718:	6a21      	ldr	r1, [r4, #32]
 800671a:	4628      	mov	r0, r5
 800671c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800671e:	47b0      	blx	r6
 8006720:	2800      	cmp	r0, #0
 8006722:	dc06      	bgt.n	8006732 <__sflush_r+0xfe>
 8006724:	89a3      	ldrh	r3, [r4, #12]
 8006726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800672a:	81a3      	strh	r3, [r4, #12]
 800672c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006730:	e78e      	b.n	8006650 <__sflush_r+0x1c>
 8006732:	4407      	add	r7, r0
 8006734:	eba8 0800 	sub.w	r8, r8, r0
 8006738:	e7e9      	b.n	800670e <__sflush_r+0xda>
 800673a:	bf00      	nop
 800673c:	20400001 	.word	0x20400001

08006740 <_fflush_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	690b      	ldr	r3, [r1, #16]
 8006744:	4605      	mov	r5, r0
 8006746:	460c      	mov	r4, r1
 8006748:	b1db      	cbz	r3, 8006782 <_fflush_r+0x42>
 800674a:	b118      	cbz	r0, 8006754 <_fflush_r+0x14>
 800674c:	6983      	ldr	r3, [r0, #24]
 800674e:	b90b      	cbnz	r3, 8006754 <_fflush_r+0x14>
 8006750:	f000 f860 	bl	8006814 <__sinit>
 8006754:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <_fflush_r+0x48>)
 8006756:	429c      	cmp	r4, r3
 8006758:	d109      	bne.n	800676e <_fflush_r+0x2e>
 800675a:	686c      	ldr	r4, [r5, #4]
 800675c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006760:	b17b      	cbz	r3, 8006782 <_fflush_r+0x42>
 8006762:	4621      	mov	r1, r4
 8006764:	4628      	mov	r0, r5
 8006766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800676a:	f7ff bf63 	b.w	8006634 <__sflush_r>
 800676e:	4b07      	ldr	r3, [pc, #28]	; (800678c <_fflush_r+0x4c>)
 8006770:	429c      	cmp	r4, r3
 8006772:	d101      	bne.n	8006778 <_fflush_r+0x38>
 8006774:	68ac      	ldr	r4, [r5, #8]
 8006776:	e7f1      	b.n	800675c <_fflush_r+0x1c>
 8006778:	4b05      	ldr	r3, [pc, #20]	; (8006790 <_fflush_r+0x50>)
 800677a:	429c      	cmp	r4, r3
 800677c:	bf08      	it	eq
 800677e:	68ec      	ldreq	r4, [r5, #12]
 8006780:	e7ec      	b.n	800675c <_fflush_r+0x1c>
 8006782:	2000      	movs	r0, #0
 8006784:	bd38      	pop	{r3, r4, r5, pc}
 8006786:	bf00      	nop
 8006788:	08007ca8 	.word	0x08007ca8
 800678c:	08007cc8 	.word	0x08007cc8
 8006790:	08007c88 	.word	0x08007c88

08006794 <std>:
 8006794:	2300      	movs	r3, #0
 8006796:	b510      	push	{r4, lr}
 8006798:	4604      	mov	r4, r0
 800679a:	e9c0 3300 	strd	r3, r3, [r0]
 800679e:	6083      	str	r3, [r0, #8]
 80067a0:	8181      	strh	r1, [r0, #12]
 80067a2:	6643      	str	r3, [r0, #100]	; 0x64
 80067a4:	81c2      	strh	r2, [r0, #14]
 80067a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067aa:	6183      	str	r3, [r0, #24]
 80067ac:	4619      	mov	r1, r3
 80067ae:	2208      	movs	r2, #8
 80067b0:	305c      	adds	r0, #92	; 0x5c
 80067b2:	f7fe ffdf 	bl	8005774 <memset>
 80067b6:	4b05      	ldr	r3, [pc, #20]	; (80067cc <std+0x38>)
 80067b8:	6224      	str	r4, [r4, #32]
 80067ba:	6263      	str	r3, [r4, #36]	; 0x24
 80067bc:	4b04      	ldr	r3, [pc, #16]	; (80067d0 <std+0x3c>)
 80067be:	62a3      	str	r3, [r4, #40]	; 0x28
 80067c0:	4b04      	ldr	r3, [pc, #16]	; (80067d4 <std+0x40>)
 80067c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067c4:	4b04      	ldr	r3, [pc, #16]	; (80067d8 <std+0x44>)
 80067c6:	6323      	str	r3, [r4, #48]	; 0x30
 80067c8:	bd10      	pop	{r4, pc}
 80067ca:	bf00      	nop
 80067cc:	080079f9 	.word	0x080079f9
 80067d0:	08007a1b 	.word	0x08007a1b
 80067d4:	08007a53 	.word	0x08007a53
 80067d8:	08007a77 	.word	0x08007a77

080067dc <_cleanup_r>:
 80067dc:	4901      	ldr	r1, [pc, #4]	; (80067e4 <_cleanup_r+0x8>)
 80067de:	f000 b885 	b.w	80068ec <_fwalk_reent>
 80067e2:	bf00      	nop
 80067e4:	08006741 	.word	0x08006741

080067e8 <__sfmoreglue>:
 80067e8:	b570      	push	{r4, r5, r6, lr}
 80067ea:	2568      	movs	r5, #104	; 0x68
 80067ec:	1e4a      	subs	r2, r1, #1
 80067ee:	4355      	muls	r5, r2
 80067f0:	460e      	mov	r6, r1
 80067f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067f6:	f001 f895 	bl	8007924 <_malloc_r>
 80067fa:	4604      	mov	r4, r0
 80067fc:	b140      	cbz	r0, 8006810 <__sfmoreglue+0x28>
 80067fe:	2100      	movs	r1, #0
 8006800:	e9c0 1600 	strd	r1, r6, [r0]
 8006804:	300c      	adds	r0, #12
 8006806:	60a0      	str	r0, [r4, #8]
 8006808:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800680c:	f7fe ffb2 	bl	8005774 <memset>
 8006810:	4620      	mov	r0, r4
 8006812:	bd70      	pop	{r4, r5, r6, pc}

08006814 <__sinit>:
 8006814:	6983      	ldr	r3, [r0, #24]
 8006816:	b510      	push	{r4, lr}
 8006818:	4604      	mov	r4, r0
 800681a:	bb33      	cbnz	r3, 800686a <__sinit+0x56>
 800681c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006820:	6503      	str	r3, [r0, #80]	; 0x50
 8006822:	4b12      	ldr	r3, [pc, #72]	; (800686c <__sinit+0x58>)
 8006824:	4a12      	ldr	r2, [pc, #72]	; (8006870 <__sinit+0x5c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6282      	str	r2, [r0, #40]	; 0x28
 800682a:	4298      	cmp	r0, r3
 800682c:	bf04      	itt	eq
 800682e:	2301      	moveq	r3, #1
 8006830:	6183      	streq	r3, [r0, #24]
 8006832:	f000 f81f 	bl	8006874 <__sfp>
 8006836:	6060      	str	r0, [r4, #4]
 8006838:	4620      	mov	r0, r4
 800683a:	f000 f81b 	bl	8006874 <__sfp>
 800683e:	60a0      	str	r0, [r4, #8]
 8006840:	4620      	mov	r0, r4
 8006842:	f000 f817 	bl	8006874 <__sfp>
 8006846:	2200      	movs	r2, #0
 8006848:	60e0      	str	r0, [r4, #12]
 800684a:	2104      	movs	r1, #4
 800684c:	6860      	ldr	r0, [r4, #4]
 800684e:	f7ff ffa1 	bl	8006794 <std>
 8006852:	2201      	movs	r2, #1
 8006854:	2109      	movs	r1, #9
 8006856:	68a0      	ldr	r0, [r4, #8]
 8006858:	f7ff ff9c 	bl	8006794 <std>
 800685c:	2202      	movs	r2, #2
 800685e:	2112      	movs	r1, #18
 8006860:	68e0      	ldr	r0, [r4, #12]
 8006862:	f7ff ff97 	bl	8006794 <std>
 8006866:	2301      	movs	r3, #1
 8006868:	61a3      	str	r3, [r4, #24]
 800686a:	bd10      	pop	{r4, pc}
 800686c:	08007c28 	.word	0x08007c28
 8006870:	080067dd 	.word	0x080067dd

08006874 <__sfp>:
 8006874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006876:	4b1b      	ldr	r3, [pc, #108]	; (80068e4 <__sfp+0x70>)
 8006878:	4607      	mov	r7, r0
 800687a:	681e      	ldr	r6, [r3, #0]
 800687c:	69b3      	ldr	r3, [r6, #24]
 800687e:	b913      	cbnz	r3, 8006886 <__sfp+0x12>
 8006880:	4630      	mov	r0, r6
 8006882:	f7ff ffc7 	bl	8006814 <__sinit>
 8006886:	3648      	adds	r6, #72	; 0x48
 8006888:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800688c:	3b01      	subs	r3, #1
 800688e:	d503      	bpl.n	8006898 <__sfp+0x24>
 8006890:	6833      	ldr	r3, [r6, #0]
 8006892:	b133      	cbz	r3, 80068a2 <__sfp+0x2e>
 8006894:	6836      	ldr	r6, [r6, #0]
 8006896:	e7f7      	b.n	8006888 <__sfp+0x14>
 8006898:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800689c:	b16d      	cbz	r5, 80068ba <__sfp+0x46>
 800689e:	3468      	adds	r4, #104	; 0x68
 80068a0:	e7f4      	b.n	800688c <__sfp+0x18>
 80068a2:	2104      	movs	r1, #4
 80068a4:	4638      	mov	r0, r7
 80068a6:	f7ff ff9f 	bl	80067e8 <__sfmoreglue>
 80068aa:	6030      	str	r0, [r6, #0]
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d1f1      	bne.n	8006894 <__sfp+0x20>
 80068b0:	230c      	movs	r3, #12
 80068b2:	4604      	mov	r4, r0
 80068b4:	603b      	str	r3, [r7, #0]
 80068b6:	4620      	mov	r0, r4
 80068b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ba:	4b0b      	ldr	r3, [pc, #44]	; (80068e8 <__sfp+0x74>)
 80068bc:	6665      	str	r5, [r4, #100]	; 0x64
 80068be:	e9c4 5500 	strd	r5, r5, [r4]
 80068c2:	60a5      	str	r5, [r4, #8]
 80068c4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80068c8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80068cc:	2208      	movs	r2, #8
 80068ce:	4629      	mov	r1, r5
 80068d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068d4:	f7fe ff4e 	bl	8005774 <memset>
 80068d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80068dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068e0:	e7e9      	b.n	80068b6 <__sfp+0x42>
 80068e2:	bf00      	nop
 80068e4:	08007c28 	.word	0x08007c28
 80068e8:	ffff0001 	.word	0xffff0001

080068ec <_fwalk_reent>:
 80068ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068f0:	4680      	mov	r8, r0
 80068f2:	4689      	mov	r9, r1
 80068f4:	2600      	movs	r6, #0
 80068f6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80068fa:	b914      	cbnz	r4, 8006902 <_fwalk_reent+0x16>
 80068fc:	4630      	mov	r0, r6
 80068fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006902:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006906:	3f01      	subs	r7, #1
 8006908:	d501      	bpl.n	800690e <_fwalk_reent+0x22>
 800690a:	6824      	ldr	r4, [r4, #0]
 800690c:	e7f5      	b.n	80068fa <_fwalk_reent+0xe>
 800690e:	89ab      	ldrh	r3, [r5, #12]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d907      	bls.n	8006924 <_fwalk_reent+0x38>
 8006914:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006918:	3301      	adds	r3, #1
 800691a:	d003      	beq.n	8006924 <_fwalk_reent+0x38>
 800691c:	4629      	mov	r1, r5
 800691e:	4640      	mov	r0, r8
 8006920:	47c8      	blx	r9
 8006922:	4306      	orrs	r6, r0
 8006924:	3568      	adds	r5, #104	; 0x68
 8006926:	e7ee      	b.n	8006906 <_fwalk_reent+0x1a>

08006928 <rshift>:
 8006928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800692a:	6906      	ldr	r6, [r0, #16]
 800692c:	114b      	asrs	r3, r1, #5
 800692e:	429e      	cmp	r6, r3
 8006930:	f100 0414 	add.w	r4, r0, #20
 8006934:	dd31      	ble.n	800699a <rshift+0x72>
 8006936:	f011 011f 	ands.w	r1, r1, #31
 800693a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800693e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006942:	d108      	bne.n	8006956 <rshift+0x2e>
 8006944:	4621      	mov	r1, r4
 8006946:	42b2      	cmp	r2, r6
 8006948:	460b      	mov	r3, r1
 800694a:	d211      	bcs.n	8006970 <rshift+0x48>
 800694c:	f852 3b04 	ldr.w	r3, [r2], #4
 8006950:	f841 3b04 	str.w	r3, [r1], #4
 8006954:	e7f7      	b.n	8006946 <rshift+0x1e>
 8006956:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800695a:	4623      	mov	r3, r4
 800695c:	f1c1 0c20 	rsb	ip, r1, #32
 8006960:	40cd      	lsrs	r5, r1
 8006962:	3204      	adds	r2, #4
 8006964:	42b2      	cmp	r2, r6
 8006966:	4617      	mov	r7, r2
 8006968:	d30d      	bcc.n	8006986 <rshift+0x5e>
 800696a:	601d      	str	r5, [r3, #0]
 800696c:	b105      	cbz	r5, 8006970 <rshift+0x48>
 800696e:	3304      	adds	r3, #4
 8006970:	42a3      	cmp	r3, r4
 8006972:	eba3 0204 	sub.w	r2, r3, r4
 8006976:	bf08      	it	eq
 8006978:	2300      	moveq	r3, #0
 800697a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800697e:	6102      	str	r2, [r0, #16]
 8006980:	bf08      	it	eq
 8006982:	6143      	streq	r3, [r0, #20]
 8006984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006986:	683f      	ldr	r7, [r7, #0]
 8006988:	fa07 f70c 	lsl.w	r7, r7, ip
 800698c:	433d      	orrs	r5, r7
 800698e:	f843 5b04 	str.w	r5, [r3], #4
 8006992:	f852 5b04 	ldr.w	r5, [r2], #4
 8006996:	40cd      	lsrs	r5, r1
 8006998:	e7e4      	b.n	8006964 <rshift+0x3c>
 800699a:	4623      	mov	r3, r4
 800699c:	e7e8      	b.n	8006970 <rshift+0x48>

0800699e <__hexdig_fun>:
 800699e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80069a2:	2b09      	cmp	r3, #9
 80069a4:	d802      	bhi.n	80069ac <__hexdig_fun+0xe>
 80069a6:	3820      	subs	r0, #32
 80069a8:	b2c0      	uxtb	r0, r0
 80069aa:	4770      	bx	lr
 80069ac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80069b0:	2b05      	cmp	r3, #5
 80069b2:	d801      	bhi.n	80069b8 <__hexdig_fun+0x1a>
 80069b4:	3847      	subs	r0, #71	; 0x47
 80069b6:	e7f7      	b.n	80069a8 <__hexdig_fun+0xa>
 80069b8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80069bc:	2b05      	cmp	r3, #5
 80069be:	d801      	bhi.n	80069c4 <__hexdig_fun+0x26>
 80069c0:	3827      	subs	r0, #39	; 0x27
 80069c2:	e7f1      	b.n	80069a8 <__hexdig_fun+0xa>
 80069c4:	2000      	movs	r0, #0
 80069c6:	4770      	bx	lr

080069c8 <__gethex>:
 80069c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069cc:	b08b      	sub	sp, #44	; 0x2c
 80069ce:	9002      	str	r0, [sp, #8]
 80069d0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80069d2:	468a      	mov	sl, r1
 80069d4:	4690      	mov	r8, r2
 80069d6:	9306      	str	r3, [sp, #24]
 80069d8:	f000 face 	bl	8006f78 <__localeconv_l>
 80069dc:	6803      	ldr	r3, [r0, #0]
 80069de:	f04f 0b00 	mov.w	fp, #0
 80069e2:	4618      	mov	r0, r3
 80069e4:	9303      	str	r3, [sp, #12]
 80069e6:	f7f9 fbb3 	bl	8000150 <strlen>
 80069ea:	9b03      	ldr	r3, [sp, #12]
 80069ec:	9001      	str	r0, [sp, #4]
 80069ee:	4403      	add	r3, r0
 80069f0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80069f4:	9307      	str	r3, [sp, #28]
 80069f6:	f8da 3000 	ldr.w	r3, [sl]
 80069fa:	3302      	adds	r3, #2
 80069fc:	461f      	mov	r7, r3
 80069fe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006a02:	2830      	cmp	r0, #48	; 0x30
 8006a04:	d06c      	beq.n	8006ae0 <__gethex+0x118>
 8006a06:	f7ff ffca 	bl	800699e <__hexdig_fun>
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d16a      	bne.n	8006ae6 <__gethex+0x11e>
 8006a10:	9a01      	ldr	r2, [sp, #4]
 8006a12:	9903      	ldr	r1, [sp, #12]
 8006a14:	4638      	mov	r0, r7
 8006a16:	f001 f832 	bl	8007a7e <strncmp>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d166      	bne.n	8006aec <__gethex+0x124>
 8006a1e:	9b01      	ldr	r3, [sp, #4]
 8006a20:	5cf8      	ldrb	r0, [r7, r3]
 8006a22:	18fe      	adds	r6, r7, r3
 8006a24:	f7ff ffbb 	bl	800699e <__hexdig_fun>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d062      	beq.n	8006af2 <__gethex+0x12a>
 8006a2c:	4633      	mov	r3, r6
 8006a2e:	7818      	ldrb	r0, [r3, #0]
 8006a30:	461f      	mov	r7, r3
 8006a32:	2830      	cmp	r0, #48	; 0x30
 8006a34:	f103 0301 	add.w	r3, r3, #1
 8006a38:	d0f9      	beq.n	8006a2e <__gethex+0x66>
 8006a3a:	f7ff ffb0 	bl	800699e <__hexdig_fun>
 8006a3e:	fab0 f580 	clz	r5, r0
 8006a42:	4634      	mov	r4, r6
 8006a44:	f04f 0b01 	mov.w	fp, #1
 8006a48:	096d      	lsrs	r5, r5, #5
 8006a4a:	463a      	mov	r2, r7
 8006a4c:	4616      	mov	r6, r2
 8006a4e:	7830      	ldrb	r0, [r6, #0]
 8006a50:	3201      	adds	r2, #1
 8006a52:	f7ff ffa4 	bl	800699e <__hexdig_fun>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d1f8      	bne.n	8006a4c <__gethex+0x84>
 8006a5a:	9a01      	ldr	r2, [sp, #4]
 8006a5c:	9903      	ldr	r1, [sp, #12]
 8006a5e:	4630      	mov	r0, r6
 8006a60:	f001 f80d 	bl	8007a7e <strncmp>
 8006a64:	b950      	cbnz	r0, 8006a7c <__gethex+0xb4>
 8006a66:	b954      	cbnz	r4, 8006a7e <__gethex+0xb6>
 8006a68:	9b01      	ldr	r3, [sp, #4]
 8006a6a:	18f4      	adds	r4, r6, r3
 8006a6c:	4622      	mov	r2, r4
 8006a6e:	4616      	mov	r6, r2
 8006a70:	7830      	ldrb	r0, [r6, #0]
 8006a72:	3201      	adds	r2, #1
 8006a74:	f7ff ff93 	bl	800699e <__hexdig_fun>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d1f8      	bne.n	8006a6e <__gethex+0xa6>
 8006a7c:	b10c      	cbz	r4, 8006a82 <__gethex+0xba>
 8006a7e:	1ba4      	subs	r4, r4, r6
 8006a80:	00a4      	lsls	r4, r4, #2
 8006a82:	7833      	ldrb	r3, [r6, #0]
 8006a84:	2b50      	cmp	r3, #80	; 0x50
 8006a86:	d001      	beq.n	8006a8c <__gethex+0xc4>
 8006a88:	2b70      	cmp	r3, #112	; 0x70
 8006a8a:	d140      	bne.n	8006b0e <__gethex+0x146>
 8006a8c:	7873      	ldrb	r3, [r6, #1]
 8006a8e:	2b2b      	cmp	r3, #43	; 0x2b
 8006a90:	d031      	beq.n	8006af6 <__gethex+0x12e>
 8006a92:	2b2d      	cmp	r3, #45	; 0x2d
 8006a94:	d033      	beq.n	8006afe <__gethex+0x136>
 8006a96:	f04f 0900 	mov.w	r9, #0
 8006a9a:	1c71      	adds	r1, r6, #1
 8006a9c:	7808      	ldrb	r0, [r1, #0]
 8006a9e:	f7ff ff7e 	bl	800699e <__hexdig_fun>
 8006aa2:	1e43      	subs	r3, r0, #1
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b18      	cmp	r3, #24
 8006aa8:	d831      	bhi.n	8006b0e <__gethex+0x146>
 8006aaa:	f1a0 0210 	sub.w	r2, r0, #16
 8006aae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006ab2:	f7ff ff74 	bl	800699e <__hexdig_fun>
 8006ab6:	1e43      	subs	r3, r0, #1
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b18      	cmp	r3, #24
 8006abc:	d922      	bls.n	8006b04 <__gethex+0x13c>
 8006abe:	f1b9 0f00 	cmp.w	r9, #0
 8006ac2:	d000      	beq.n	8006ac6 <__gethex+0xfe>
 8006ac4:	4252      	negs	r2, r2
 8006ac6:	4414      	add	r4, r2
 8006ac8:	f8ca 1000 	str.w	r1, [sl]
 8006acc:	b30d      	cbz	r5, 8006b12 <__gethex+0x14a>
 8006ace:	f1bb 0f00 	cmp.w	fp, #0
 8006ad2:	bf0c      	ite	eq
 8006ad4:	2706      	moveq	r7, #6
 8006ad6:	2700      	movne	r7, #0
 8006ad8:	4638      	mov	r0, r7
 8006ada:	b00b      	add	sp, #44	; 0x2c
 8006adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae0:	f10b 0b01 	add.w	fp, fp, #1
 8006ae4:	e78a      	b.n	80069fc <__gethex+0x34>
 8006ae6:	2500      	movs	r5, #0
 8006ae8:	462c      	mov	r4, r5
 8006aea:	e7ae      	b.n	8006a4a <__gethex+0x82>
 8006aec:	463e      	mov	r6, r7
 8006aee:	2501      	movs	r5, #1
 8006af0:	e7c7      	b.n	8006a82 <__gethex+0xba>
 8006af2:	4604      	mov	r4, r0
 8006af4:	e7fb      	b.n	8006aee <__gethex+0x126>
 8006af6:	f04f 0900 	mov.w	r9, #0
 8006afa:	1cb1      	adds	r1, r6, #2
 8006afc:	e7ce      	b.n	8006a9c <__gethex+0xd4>
 8006afe:	f04f 0901 	mov.w	r9, #1
 8006b02:	e7fa      	b.n	8006afa <__gethex+0x132>
 8006b04:	230a      	movs	r3, #10
 8006b06:	fb03 0202 	mla	r2, r3, r2, r0
 8006b0a:	3a10      	subs	r2, #16
 8006b0c:	e7cf      	b.n	8006aae <__gethex+0xe6>
 8006b0e:	4631      	mov	r1, r6
 8006b10:	e7da      	b.n	8006ac8 <__gethex+0x100>
 8006b12:	4629      	mov	r1, r5
 8006b14:	1bf3      	subs	r3, r6, r7
 8006b16:	3b01      	subs	r3, #1
 8006b18:	2b07      	cmp	r3, #7
 8006b1a:	dc49      	bgt.n	8006bb0 <__gethex+0x1e8>
 8006b1c:	9802      	ldr	r0, [sp, #8]
 8006b1e:	f000 faae 	bl	800707e <_Balloc>
 8006b22:	f04f 0b00 	mov.w	fp, #0
 8006b26:	4605      	mov	r5, r0
 8006b28:	46da      	mov	sl, fp
 8006b2a:	9b01      	ldr	r3, [sp, #4]
 8006b2c:	f100 0914 	add.w	r9, r0, #20
 8006b30:	f1c3 0301 	rsb	r3, r3, #1
 8006b34:	f8cd 9010 	str.w	r9, [sp, #16]
 8006b38:	9308      	str	r3, [sp, #32]
 8006b3a:	42b7      	cmp	r7, r6
 8006b3c:	d33b      	bcc.n	8006bb6 <__gethex+0x1ee>
 8006b3e:	9804      	ldr	r0, [sp, #16]
 8006b40:	f840 ab04 	str.w	sl, [r0], #4
 8006b44:	eba0 0009 	sub.w	r0, r0, r9
 8006b48:	1080      	asrs	r0, r0, #2
 8006b4a:	6128      	str	r0, [r5, #16]
 8006b4c:	0147      	lsls	r7, r0, #5
 8006b4e:	4650      	mov	r0, sl
 8006b50:	f000 fb59 	bl	8007206 <__hi0bits>
 8006b54:	f8d8 6000 	ldr.w	r6, [r8]
 8006b58:	1a3f      	subs	r7, r7, r0
 8006b5a:	42b7      	cmp	r7, r6
 8006b5c:	dd64      	ble.n	8006c28 <__gethex+0x260>
 8006b5e:	1bbf      	subs	r7, r7, r6
 8006b60:	4639      	mov	r1, r7
 8006b62:	4628      	mov	r0, r5
 8006b64:	f000 fe63 	bl	800782e <__any_on>
 8006b68:	4682      	mov	sl, r0
 8006b6a:	b178      	cbz	r0, 8006b8c <__gethex+0x1c4>
 8006b6c:	f04f 0a01 	mov.w	sl, #1
 8006b70:	1e7b      	subs	r3, r7, #1
 8006b72:	1159      	asrs	r1, r3, #5
 8006b74:	f003 021f 	and.w	r2, r3, #31
 8006b78:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006b7c:	fa0a f202 	lsl.w	r2, sl, r2
 8006b80:	420a      	tst	r2, r1
 8006b82:	d003      	beq.n	8006b8c <__gethex+0x1c4>
 8006b84:	4553      	cmp	r3, sl
 8006b86:	dc46      	bgt.n	8006c16 <__gethex+0x24e>
 8006b88:	f04f 0a02 	mov.w	sl, #2
 8006b8c:	4639      	mov	r1, r7
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f7ff feca 	bl	8006928 <rshift>
 8006b94:	443c      	add	r4, r7
 8006b96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b9a:	42a3      	cmp	r3, r4
 8006b9c:	da52      	bge.n	8006c44 <__gethex+0x27c>
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	9802      	ldr	r0, [sp, #8]
 8006ba2:	f000 faa0 	bl	80070e6 <_Bfree>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006baa:	27a3      	movs	r7, #163	; 0xa3
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	e793      	b.n	8006ad8 <__gethex+0x110>
 8006bb0:	3101      	adds	r1, #1
 8006bb2:	105b      	asrs	r3, r3, #1
 8006bb4:	e7b0      	b.n	8006b18 <__gethex+0x150>
 8006bb6:	1e73      	subs	r3, r6, #1
 8006bb8:	9305      	str	r3, [sp, #20]
 8006bba:	9a07      	ldr	r2, [sp, #28]
 8006bbc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d018      	beq.n	8006bf6 <__gethex+0x22e>
 8006bc4:	f1bb 0f20 	cmp.w	fp, #32
 8006bc8:	d107      	bne.n	8006bda <__gethex+0x212>
 8006bca:	9b04      	ldr	r3, [sp, #16]
 8006bcc:	f8c3 a000 	str.w	sl, [r3]
 8006bd0:	f04f 0a00 	mov.w	sl, #0
 8006bd4:	46d3      	mov	fp, sl
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	9304      	str	r3, [sp, #16]
 8006bda:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006bde:	f7ff fede 	bl	800699e <__hexdig_fun>
 8006be2:	f000 000f 	and.w	r0, r0, #15
 8006be6:	fa00 f00b 	lsl.w	r0, r0, fp
 8006bea:	ea4a 0a00 	orr.w	sl, sl, r0
 8006bee:	f10b 0b04 	add.w	fp, fp, #4
 8006bf2:	9b05      	ldr	r3, [sp, #20]
 8006bf4:	e00d      	b.n	8006c12 <__gethex+0x24a>
 8006bf6:	9b05      	ldr	r3, [sp, #20]
 8006bf8:	9a08      	ldr	r2, [sp, #32]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	42bb      	cmp	r3, r7
 8006bfe:	d3e1      	bcc.n	8006bc4 <__gethex+0x1fc>
 8006c00:	4618      	mov	r0, r3
 8006c02:	9a01      	ldr	r2, [sp, #4]
 8006c04:	9903      	ldr	r1, [sp, #12]
 8006c06:	9309      	str	r3, [sp, #36]	; 0x24
 8006c08:	f000 ff39 	bl	8007a7e <strncmp>
 8006c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d1d8      	bne.n	8006bc4 <__gethex+0x1fc>
 8006c12:	461e      	mov	r6, r3
 8006c14:	e791      	b.n	8006b3a <__gethex+0x172>
 8006c16:	1eb9      	subs	r1, r7, #2
 8006c18:	4628      	mov	r0, r5
 8006c1a:	f000 fe08 	bl	800782e <__any_on>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d0b2      	beq.n	8006b88 <__gethex+0x1c0>
 8006c22:	f04f 0a03 	mov.w	sl, #3
 8006c26:	e7b1      	b.n	8006b8c <__gethex+0x1c4>
 8006c28:	da09      	bge.n	8006c3e <__gethex+0x276>
 8006c2a:	1bf7      	subs	r7, r6, r7
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	463a      	mov	r2, r7
 8006c30:	9802      	ldr	r0, [sp, #8]
 8006c32:	f000 fc23 	bl	800747c <__lshift>
 8006c36:	4605      	mov	r5, r0
 8006c38:	1be4      	subs	r4, r4, r7
 8006c3a:	f100 0914 	add.w	r9, r0, #20
 8006c3e:	f04f 0a00 	mov.w	sl, #0
 8006c42:	e7a8      	b.n	8006b96 <__gethex+0x1ce>
 8006c44:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006c48:	42a0      	cmp	r0, r4
 8006c4a:	dd6b      	ble.n	8006d24 <__gethex+0x35c>
 8006c4c:	1b04      	subs	r4, r0, r4
 8006c4e:	42a6      	cmp	r6, r4
 8006c50:	dc2e      	bgt.n	8006cb0 <__gethex+0x2e8>
 8006c52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d022      	beq.n	8006ca0 <__gethex+0x2d8>
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d024      	beq.n	8006ca8 <__gethex+0x2e0>
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d115      	bne.n	8006c8e <__gethex+0x2c6>
 8006c62:	42a6      	cmp	r6, r4
 8006c64:	d113      	bne.n	8006c8e <__gethex+0x2c6>
 8006c66:	2e01      	cmp	r6, #1
 8006c68:	dc0b      	bgt.n	8006c82 <__gethex+0x2ba>
 8006c6a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006c6e:	9a06      	ldr	r2, [sp, #24]
 8006c70:	2762      	movs	r7, #98	; 0x62
 8006c72:	6013      	str	r3, [r2, #0]
 8006c74:	2301      	movs	r3, #1
 8006c76:	612b      	str	r3, [r5, #16]
 8006c78:	f8c9 3000 	str.w	r3, [r9]
 8006c7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c7e:	601d      	str	r5, [r3, #0]
 8006c80:	e72a      	b.n	8006ad8 <__gethex+0x110>
 8006c82:	1e71      	subs	r1, r6, #1
 8006c84:	4628      	mov	r0, r5
 8006c86:	f000 fdd2 	bl	800782e <__any_on>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d1ed      	bne.n	8006c6a <__gethex+0x2a2>
 8006c8e:	4629      	mov	r1, r5
 8006c90:	9802      	ldr	r0, [sp, #8]
 8006c92:	f000 fa28 	bl	80070e6 <_Bfree>
 8006c96:	2300      	movs	r3, #0
 8006c98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c9a:	2750      	movs	r7, #80	; 0x50
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	e71b      	b.n	8006ad8 <__gethex+0x110>
 8006ca0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d0e1      	beq.n	8006c6a <__gethex+0x2a2>
 8006ca6:	e7f2      	b.n	8006c8e <__gethex+0x2c6>
 8006ca8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1dd      	bne.n	8006c6a <__gethex+0x2a2>
 8006cae:	e7ee      	b.n	8006c8e <__gethex+0x2c6>
 8006cb0:	1e67      	subs	r7, r4, #1
 8006cb2:	f1ba 0f00 	cmp.w	sl, #0
 8006cb6:	d132      	bne.n	8006d1e <__gethex+0x356>
 8006cb8:	b127      	cbz	r7, 8006cc4 <__gethex+0x2fc>
 8006cba:	4639      	mov	r1, r7
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	f000 fdb6 	bl	800782e <__any_on>
 8006cc2:	4682      	mov	sl, r0
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	117a      	asrs	r2, r7, #5
 8006cc8:	f007 071f 	and.w	r7, r7, #31
 8006ccc:	fa03 f707 	lsl.w	r7, r3, r7
 8006cd0:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	421f      	tst	r7, r3
 8006cd8:	f04f 0702 	mov.w	r7, #2
 8006cdc:	4628      	mov	r0, r5
 8006cde:	bf18      	it	ne
 8006ce0:	f04a 0a02 	orrne.w	sl, sl, #2
 8006ce4:	1b36      	subs	r6, r6, r4
 8006ce6:	f7ff fe1f 	bl	8006928 <rshift>
 8006cea:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006cee:	f1ba 0f00 	cmp.w	sl, #0
 8006cf2:	d048      	beq.n	8006d86 <__gethex+0x3be>
 8006cf4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d015      	beq.n	8006d28 <__gethex+0x360>
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d017      	beq.n	8006d30 <__gethex+0x368>
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d109      	bne.n	8006d18 <__gethex+0x350>
 8006d04:	f01a 0f02 	tst.w	sl, #2
 8006d08:	d006      	beq.n	8006d18 <__gethex+0x350>
 8006d0a:	f8d9 3000 	ldr.w	r3, [r9]
 8006d0e:	ea4a 0a03 	orr.w	sl, sl, r3
 8006d12:	f01a 0f01 	tst.w	sl, #1
 8006d16:	d10e      	bne.n	8006d36 <__gethex+0x36e>
 8006d18:	f047 0710 	orr.w	r7, r7, #16
 8006d1c:	e033      	b.n	8006d86 <__gethex+0x3be>
 8006d1e:	f04f 0a01 	mov.w	sl, #1
 8006d22:	e7cf      	b.n	8006cc4 <__gethex+0x2fc>
 8006d24:	2701      	movs	r7, #1
 8006d26:	e7e2      	b.n	8006cee <__gethex+0x326>
 8006d28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d2a:	f1c3 0301 	rsb	r3, r3, #1
 8006d2e:	9315      	str	r3, [sp, #84]	; 0x54
 8006d30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0f0      	beq.n	8006d18 <__gethex+0x350>
 8006d36:	f04f 0c00 	mov.w	ip, #0
 8006d3a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006d3e:	f105 0314 	add.w	r3, r5, #20
 8006d42:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006d46:	eb03 010a 	add.w	r1, r3, sl
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d50:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006d54:	d01c      	beq.n	8006d90 <__gethex+0x3c8>
 8006d56:	3201      	adds	r2, #1
 8006d58:	6002      	str	r2, [r0, #0]
 8006d5a:	2f02      	cmp	r7, #2
 8006d5c:	f105 0314 	add.w	r3, r5, #20
 8006d60:	d138      	bne.n	8006dd4 <__gethex+0x40c>
 8006d62:	f8d8 2000 	ldr.w	r2, [r8]
 8006d66:	3a01      	subs	r2, #1
 8006d68:	42b2      	cmp	r2, r6
 8006d6a:	d10a      	bne.n	8006d82 <__gethex+0x3ba>
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	1171      	asrs	r1, r6, #5
 8006d70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d74:	f006 061f 	and.w	r6, r6, #31
 8006d78:	fa02 f606 	lsl.w	r6, r2, r6
 8006d7c:	421e      	tst	r6, r3
 8006d7e:	bf18      	it	ne
 8006d80:	4617      	movne	r7, r2
 8006d82:	f047 0720 	orr.w	r7, r7, #32
 8006d86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d88:	601d      	str	r5, [r3, #0]
 8006d8a:	9b06      	ldr	r3, [sp, #24]
 8006d8c:	601c      	str	r4, [r3, #0]
 8006d8e:	e6a3      	b.n	8006ad8 <__gethex+0x110>
 8006d90:	4299      	cmp	r1, r3
 8006d92:	f843 cc04 	str.w	ip, [r3, #-4]
 8006d96:	d8d8      	bhi.n	8006d4a <__gethex+0x382>
 8006d98:	68ab      	ldr	r3, [r5, #8]
 8006d9a:	4599      	cmp	r9, r3
 8006d9c:	db12      	blt.n	8006dc4 <__gethex+0x3fc>
 8006d9e:	6869      	ldr	r1, [r5, #4]
 8006da0:	9802      	ldr	r0, [sp, #8]
 8006da2:	3101      	adds	r1, #1
 8006da4:	f000 f96b 	bl	800707e <_Balloc>
 8006da8:	4683      	mov	fp, r0
 8006daa:	692a      	ldr	r2, [r5, #16]
 8006dac:	f105 010c 	add.w	r1, r5, #12
 8006db0:	3202      	adds	r2, #2
 8006db2:	0092      	lsls	r2, r2, #2
 8006db4:	300c      	adds	r0, #12
 8006db6:	f000 f957 	bl	8007068 <memcpy>
 8006dba:	4629      	mov	r1, r5
 8006dbc:	9802      	ldr	r0, [sp, #8]
 8006dbe:	f000 f992 	bl	80070e6 <_Bfree>
 8006dc2:	465d      	mov	r5, fp
 8006dc4:	692b      	ldr	r3, [r5, #16]
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	612a      	str	r2, [r5, #16]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006dd0:	615a      	str	r2, [r3, #20]
 8006dd2:	e7c2      	b.n	8006d5a <__gethex+0x392>
 8006dd4:	692a      	ldr	r2, [r5, #16]
 8006dd6:	454a      	cmp	r2, r9
 8006dd8:	dd0b      	ble.n	8006df2 <__gethex+0x42a>
 8006dda:	2101      	movs	r1, #1
 8006ddc:	4628      	mov	r0, r5
 8006dde:	f7ff fda3 	bl	8006928 <rshift>
 8006de2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006de6:	3401      	adds	r4, #1
 8006de8:	42a3      	cmp	r3, r4
 8006dea:	f6ff aed8 	blt.w	8006b9e <__gethex+0x1d6>
 8006dee:	2701      	movs	r7, #1
 8006df0:	e7c7      	b.n	8006d82 <__gethex+0x3ba>
 8006df2:	f016 061f 	ands.w	r6, r6, #31
 8006df6:	d0fa      	beq.n	8006dee <__gethex+0x426>
 8006df8:	449a      	add	sl, r3
 8006dfa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006dfe:	f000 fa02 	bl	8007206 <__hi0bits>
 8006e02:	f1c6 0620 	rsb	r6, r6, #32
 8006e06:	42b0      	cmp	r0, r6
 8006e08:	dbe7      	blt.n	8006dda <__gethex+0x412>
 8006e0a:	e7f0      	b.n	8006dee <__gethex+0x426>

08006e0c <L_shift>:
 8006e0c:	f1c2 0208 	rsb	r2, r2, #8
 8006e10:	0092      	lsls	r2, r2, #2
 8006e12:	b570      	push	{r4, r5, r6, lr}
 8006e14:	f1c2 0620 	rsb	r6, r2, #32
 8006e18:	6843      	ldr	r3, [r0, #4]
 8006e1a:	6804      	ldr	r4, [r0, #0]
 8006e1c:	fa03 f506 	lsl.w	r5, r3, r6
 8006e20:	432c      	orrs	r4, r5
 8006e22:	40d3      	lsrs	r3, r2
 8006e24:	6004      	str	r4, [r0, #0]
 8006e26:	f840 3f04 	str.w	r3, [r0, #4]!
 8006e2a:	4288      	cmp	r0, r1
 8006e2c:	d3f4      	bcc.n	8006e18 <L_shift+0xc>
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}

08006e30 <__match>:
 8006e30:	b530      	push	{r4, r5, lr}
 8006e32:	6803      	ldr	r3, [r0, #0]
 8006e34:	3301      	adds	r3, #1
 8006e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e3a:	b914      	cbnz	r4, 8006e42 <__match+0x12>
 8006e3c:	6003      	str	r3, [r0, #0]
 8006e3e:	2001      	movs	r0, #1
 8006e40:	bd30      	pop	{r4, r5, pc}
 8006e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006e4a:	2d19      	cmp	r5, #25
 8006e4c:	bf98      	it	ls
 8006e4e:	3220      	addls	r2, #32
 8006e50:	42a2      	cmp	r2, r4
 8006e52:	d0f0      	beq.n	8006e36 <__match+0x6>
 8006e54:	2000      	movs	r0, #0
 8006e56:	e7f3      	b.n	8006e40 <__match+0x10>

08006e58 <__hexnan>:
 8006e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5c:	2500      	movs	r5, #0
 8006e5e:	680b      	ldr	r3, [r1, #0]
 8006e60:	4682      	mov	sl, r0
 8006e62:	115f      	asrs	r7, r3, #5
 8006e64:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006e68:	f013 031f 	ands.w	r3, r3, #31
 8006e6c:	bf18      	it	ne
 8006e6e:	3704      	addne	r7, #4
 8006e70:	1f3e      	subs	r6, r7, #4
 8006e72:	4690      	mov	r8, r2
 8006e74:	46b1      	mov	r9, r6
 8006e76:	4634      	mov	r4, r6
 8006e78:	46ab      	mov	fp, r5
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	6801      	ldr	r1, [r0, #0]
 8006e7e:	9301      	str	r3, [sp, #4]
 8006e80:	f847 5c04 	str.w	r5, [r7, #-4]
 8006e84:	9502      	str	r5, [sp, #8]
 8006e86:	784a      	ldrb	r2, [r1, #1]
 8006e88:	1c4b      	adds	r3, r1, #1
 8006e8a:	9303      	str	r3, [sp, #12]
 8006e8c:	b342      	cbz	r2, 8006ee0 <__hexnan+0x88>
 8006e8e:	4610      	mov	r0, r2
 8006e90:	9105      	str	r1, [sp, #20]
 8006e92:	9204      	str	r2, [sp, #16]
 8006e94:	f7ff fd83 	bl	800699e <__hexdig_fun>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d143      	bne.n	8006f24 <__hexnan+0xcc>
 8006e9c:	9a04      	ldr	r2, [sp, #16]
 8006e9e:	9905      	ldr	r1, [sp, #20]
 8006ea0:	2a20      	cmp	r2, #32
 8006ea2:	d818      	bhi.n	8006ed6 <__hexnan+0x7e>
 8006ea4:	9b02      	ldr	r3, [sp, #8]
 8006ea6:	459b      	cmp	fp, r3
 8006ea8:	dd13      	ble.n	8006ed2 <__hexnan+0x7a>
 8006eaa:	454c      	cmp	r4, r9
 8006eac:	d206      	bcs.n	8006ebc <__hexnan+0x64>
 8006eae:	2d07      	cmp	r5, #7
 8006eb0:	dc04      	bgt.n	8006ebc <__hexnan+0x64>
 8006eb2:	462a      	mov	r2, r5
 8006eb4:	4649      	mov	r1, r9
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f7ff ffa8 	bl	8006e0c <L_shift>
 8006ebc:	4544      	cmp	r4, r8
 8006ebe:	d944      	bls.n	8006f4a <__hexnan+0xf2>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	f1a4 0904 	sub.w	r9, r4, #4
 8006ec6:	f844 3c04 	str.w	r3, [r4, #-4]
 8006eca:	461d      	mov	r5, r3
 8006ecc:	464c      	mov	r4, r9
 8006ece:	f8cd b008 	str.w	fp, [sp, #8]
 8006ed2:	9903      	ldr	r1, [sp, #12]
 8006ed4:	e7d7      	b.n	8006e86 <__hexnan+0x2e>
 8006ed6:	2a29      	cmp	r2, #41	; 0x29
 8006ed8:	d14a      	bne.n	8006f70 <__hexnan+0x118>
 8006eda:	3102      	adds	r1, #2
 8006edc:	f8ca 1000 	str.w	r1, [sl]
 8006ee0:	f1bb 0f00 	cmp.w	fp, #0
 8006ee4:	d044      	beq.n	8006f70 <__hexnan+0x118>
 8006ee6:	454c      	cmp	r4, r9
 8006ee8:	d206      	bcs.n	8006ef8 <__hexnan+0xa0>
 8006eea:	2d07      	cmp	r5, #7
 8006eec:	dc04      	bgt.n	8006ef8 <__hexnan+0xa0>
 8006eee:	462a      	mov	r2, r5
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f7ff ff8a 	bl	8006e0c <L_shift>
 8006ef8:	4544      	cmp	r4, r8
 8006efa:	d928      	bls.n	8006f4e <__hexnan+0xf6>
 8006efc:	4643      	mov	r3, r8
 8006efe:	f854 2b04 	ldr.w	r2, [r4], #4
 8006f02:	42a6      	cmp	r6, r4
 8006f04:	f843 2b04 	str.w	r2, [r3], #4
 8006f08:	d2f9      	bcs.n	8006efe <__hexnan+0xa6>
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f843 2b04 	str.w	r2, [r3], #4
 8006f10:	429e      	cmp	r6, r3
 8006f12:	d2fb      	bcs.n	8006f0c <__hexnan+0xb4>
 8006f14:	6833      	ldr	r3, [r6, #0]
 8006f16:	b91b      	cbnz	r3, 8006f20 <__hexnan+0xc8>
 8006f18:	4546      	cmp	r6, r8
 8006f1a:	d127      	bne.n	8006f6c <__hexnan+0x114>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	6033      	str	r3, [r6, #0]
 8006f20:	2005      	movs	r0, #5
 8006f22:	e026      	b.n	8006f72 <__hexnan+0x11a>
 8006f24:	3501      	adds	r5, #1
 8006f26:	2d08      	cmp	r5, #8
 8006f28:	f10b 0b01 	add.w	fp, fp, #1
 8006f2c:	dd06      	ble.n	8006f3c <__hexnan+0xe4>
 8006f2e:	4544      	cmp	r4, r8
 8006f30:	d9cf      	bls.n	8006ed2 <__hexnan+0x7a>
 8006f32:	2300      	movs	r3, #0
 8006f34:	2501      	movs	r5, #1
 8006f36:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f3a:	3c04      	subs	r4, #4
 8006f3c:	6822      	ldr	r2, [r4, #0]
 8006f3e:	f000 000f 	and.w	r0, r0, #15
 8006f42:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006f46:	6020      	str	r0, [r4, #0]
 8006f48:	e7c3      	b.n	8006ed2 <__hexnan+0x7a>
 8006f4a:	2508      	movs	r5, #8
 8006f4c:	e7c1      	b.n	8006ed2 <__hexnan+0x7a>
 8006f4e:	9b01      	ldr	r3, [sp, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d0df      	beq.n	8006f14 <__hexnan+0xbc>
 8006f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f58:	f1c3 0320 	rsb	r3, r3, #32
 8006f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f60:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006f64:	401a      	ands	r2, r3
 8006f66:	f847 2c04 	str.w	r2, [r7, #-4]
 8006f6a:	e7d3      	b.n	8006f14 <__hexnan+0xbc>
 8006f6c:	3e04      	subs	r6, #4
 8006f6e:	e7d1      	b.n	8006f14 <__hexnan+0xbc>
 8006f70:	2004      	movs	r0, #4
 8006f72:	b007      	add	sp, #28
 8006f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f78 <__localeconv_l>:
 8006f78:	30f0      	adds	r0, #240	; 0xf0
 8006f7a:	4770      	bx	lr

08006f7c <__swhatbuf_r>:
 8006f7c:	b570      	push	{r4, r5, r6, lr}
 8006f7e:	460e      	mov	r6, r1
 8006f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f84:	b096      	sub	sp, #88	; 0x58
 8006f86:	2900      	cmp	r1, #0
 8006f88:	4614      	mov	r4, r2
 8006f8a:	461d      	mov	r5, r3
 8006f8c:	da07      	bge.n	8006f9e <__swhatbuf_r+0x22>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	602b      	str	r3, [r5, #0]
 8006f92:	89b3      	ldrh	r3, [r6, #12]
 8006f94:	061a      	lsls	r2, r3, #24
 8006f96:	d410      	bmi.n	8006fba <__swhatbuf_r+0x3e>
 8006f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f9c:	e00e      	b.n	8006fbc <__swhatbuf_r+0x40>
 8006f9e:	466a      	mov	r2, sp
 8006fa0:	f000 fdae 	bl	8007b00 <_fstat_r>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	dbf2      	blt.n	8006f8e <__swhatbuf_r+0x12>
 8006fa8:	9a01      	ldr	r2, [sp, #4]
 8006faa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006fae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006fb2:	425a      	negs	r2, r3
 8006fb4:	415a      	adcs	r2, r3
 8006fb6:	602a      	str	r2, [r5, #0]
 8006fb8:	e7ee      	b.n	8006f98 <__swhatbuf_r+0x1c>
 8006fba:	2340      	movs	r3, #64	; 0x40
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	6023      	str	r3, [r4, #0]
 8006fc0:	b016      	add	sp, #88	; 0x58
 8006fc2:	bd70      	pop	{r4, r5, r6, pc}

08006fc4 <__smakebuf_r>:
 8006fc4:	898b      	ldrh	r3, [r1, #12]
 8006fc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fc8:	079d      	lsls	r5, r3, #30
 8006fca:	4606      	mov	r6, r0
 8006fcc:	460c      	mov	r4, r1
 8006fce:	d507      	bpl.n	8006fe0 <__smakebuf_r+0x1c>
 8006fd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	6123      	str	r3, [r4, #16]
 8006fd8:	2301      	movs	r3, #1
 8006fda:	6163      	str	r3, [r4, #20]
 8006fdc:	b002      	add	sp, #8
 8006fde:	bd70      	pop	{r4, r5, r6, pc}
 8006fe0:	ab01      	add	r3, sp, #4
 8006fe2:	466a      	mov	r2, sp
 8006fe4:	f7ff ffca 	bl	8006f7c <__swhatbuf_r>
 8006fe8:	9900      	ldr	r1, [sp, #0]
 8006fea:	4605      	mov	r5, r0
 8006fec:	4630      	mov	r0, r6
 8006fee:	f000 fc99 	bl	8007924 <_malloc_r>
 8006ff2:	b948      	cbnz	r0, 8007008 <__smakebuf_r+0x44>
 8006ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ff8:	059a      	lsls	r2, r3, #22
 8006ffa:	d4ef      	bmi.n	8006fdc <__smakebuf_r+0x18>
 8006ffc:	f023 0303 	bic.w	r3, r3, #3
 8007000:	f043 0302 	orr.w	r3, r3, #2
 8007004:	81a3      	strh	r3, [r4, #12]
 8007006:	e7e3      	b.n	8006fd0 <__smakebuf_r+0xc>
 8007008:	4b0d      	ldr	r3, [pc, #52]	; (8007040 <__smakebuf_r+0x7c>)
 800700a:	62b3      	str	r3, [r6, #40]	; 0x28
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	6020      	str	r0, [r4, #0]
 8007010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007014:	81a3      	strh	r3, [r4, #12]
 8007016:	9b00      	ldr	r3, [sp, #0]
 8007018:	6120      	str	r0, [r4, #16]
 800701a:	6163      	str	r3, [r4, #20]
 800701c:	9b01      	ldr	r3, [sp, #4]
 800701e:	b15b      	cbz	r3, 8007038 <__smakebuf_r+0x74>
 8007020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007024:	4630      	mov	r0, r6
 8007026:	f000 fd7d 	bl	8007b24 <_isatty_r>
 800702a:	b128      	cbz	r0, 8007038 <__smakebuf_r+0x74>
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	f023 0303 	bic.w	r3, r3, #3
 8007032:	f043 0301 	orr.w	r3, r3, #1
 8007036:	81a3      	strh	r3, [r4, #12]
 8007038:	89a3      	ldrh	r3, [r4, #12]
 800703a:	431d      	orrs	r5, r3
 800703c:	81a5      	strh	r5, [r4, #12]
 800703e:	e7cd      	b.n	8006fdc <__smakebuf_r+0x18>
 8007040:	080067dd 	.word	0x080067dd

08007044 <__ascii_mbtowc>:
 8007044:	b082      	sub	sp, #8
 8007046:	b901      	cbnz	r1, 800704a <__ascii_mbtowc+0x6>
 8007048:	a901      	add	r1, sp, #4
 800704a:	b142      	cbz	r2, 800705e <__ascii_mbtowc+0x1a>
 800704c:	b14b      	cbz	r3, 8007062 <__ascii_mbtowc+0x1e>
 800704e:	7813      	ldrb	r3, [r2, #0]
 8007050:	600b      	str	r3, [r1, #0]
 8007052:	7812      	ldrb	r2, [r2, #0]
 8007054:	1c10      	adds	r0, r2, #0
 8007056:	bf18      	it	ne
 8007058:	2001      	movne	r0, #1
 800705a:	b002      	add	sp, #8
 800705c:	4770      	bx	lr
 800705e:	4610      	mov	r0, r2
 8007060:	e7fb      	b.n	800705a <__ascii_mbtowc+0x16>
 8007062:	f06f 0001 	mvn.w	r0, #1
 8007066:	e7f8      	b.n	800705a <__ascii_mbtowc+0x16>

08007068 <memcpy>:
 8007068:	b510      	push	{r4, lr}
 800706a:	1e43      	subs	r3, r0, #1
 800706c:	440a      	add	r2, r1
 800706e:	4291      	cmp	r1, r2
 8007070:	d100      	bne.n	8007074 <memcpy+0xc>
 8007072:	bd10      	pop	{r4, pc}
 8007074:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007078:	f803 4f01 	strb.w	r4, [r3, #1]!
 800707c:	e7f7      	b.n	800706e <memcpy+0x6>

0800707e <_Balloc>:
 800707e:	b570      	push	{r4, r5, r6, lr}
 8007080:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007082:	4604      	mov	r4, r0
 8007084:	460e      	mov	r6, r1
 8007086:	b93d      	cbnz	r5, 8007098 <_Balloc+0x1a>
 8007088:	2010      	movs	r0, #16
 800708a:	f000 fd6d 	bl	8007b68 <malloc>
 800708e:	6260      	str	r0, [r4, #36]	; 0x24
 8007090:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007094:	6005      	str	r5, [r0, #0]
 8007096:	60c5      	str	r5, [r0, #12]
 8007098:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800709a:	68eb      	ldr	r3, [r5, #12]
 800709c:	b183      	cbz	r3, 80070c0 <_Balloc+0x42>
 800709e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80070a6:	b9b8      	cbnz	r0, 80070d8 <_Balloc+0x5a>
 80070a8:	2101      	movs	r1, #1
 80070aa:	fa01 f506 	lsl.w	r5, r1, r6
 80070ae:	1d6a      	adds	r2, r5, #5
 80070b0:	0092      	lsls	r2, r2, #2
 80070b2:	4620      	mov	r0, r4
 80070b4:	f000 fbdc 	bl	8007870 <_calloc_r>
 80070b8:	b160      	cbz	r0, 80070d4 <_Balloc+0x56>
 80070ba:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80070be:	e00e      	b.n	80070de <_Balloc+0x60>
 80070c0:	2221      	movs	r2, #33	; 0x21
 80070c2:	2104      	movs	r1, #4
 80070c4:	4620      	mov	r0, r4
 80070c6:	f000 fbd3 	bl	8007870 <_calloc_r>
 80070ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070cc:	60e8      	str	r0, [r5, #12]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e4      	bne.n	800709e <_Balloc+0x20>
 80070d4:	2000      	movs	r0, #0
 80070d6:	bd70      	pop	{r4, r5, r6, pc}
 80070d8:	6802      	ldr	r2, [r0, #0]
 80070da:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80070de:	2300      	movs	r3, #0
 80070e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070e4:	e7f7      	b.n	80070d6 <_Balloc+0x58>

080070e6 <_Bfree>:
 80070e6:	b570      	push	{r4, r5, r6, lr}
 80070e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80070ea:	4606      	mov	r6, r0
 80070ec:	460d      	mov	r5, r1
 80070ee:	b93c      	cbnz	r4, 8007100 <_Bfree+0x1a>
 80070f0:	2010      	movs	r0, #16
 80070f2:	f000 fd39 	bl	8007b68 <malloc>
 80070f6:	6270      	str	r0, [r6, #36]	; 0x24
 80070f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070fc:	6004      	str	r4, [r0, #0]
 80070fe:	60c4      	str	r4, [r0, #12]
 8007100:	b13d      	cbz	r5, 8007112 <_Bfree+0x2c>
 8007102:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007104:	686a      	ldr	r2, [r5, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800710c:	6029      	str	r1, [r5, #0]
 800710e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007112:	bd70      	pop	{r4, r5, r6, pc}

08007114 <__multadd>:
 8007114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007118:	461f      	mov	r7, r3
 800711a:	4606      	mov	r6, r0
 800711c:	460c      	mov	r4, r1
 800711e:	2300      	movs	r3, #0
 8007120:	690d      	ldr	r5, [r1, #16]
 8007122:	f101 0c14 	add.w	ip, r1, #20
 8007126:	f8dc 0000 	ldr.w	r0, [ip]
 800712a:	3301      	adds	r3, #1
 800712c:	b281      	uxth	r1, r0
 800712e:	fb02 7101 	mla	r1, r2, r1, r7
 8007132:	0c00      	lsrs	r0, r0, #16
 8007134:	0c0f      	lsrs	r7, r1, #16
 8007136:	fb02 7000 	mla	r0, r2, r0, r7
 800713a:	b289      	uxth	r1, r1
 800713c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007140:	429d      	cmp	r5, r3
 8007142:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007146:	f84c 1b04 	str.w	r1, [ip], #4
 800714a:	dcec      	bgt.n	8007126 <__multadd+0x12>
 800714c:	b1d7      	cbz	r7, 8007184 <__multadd+0x70>
 800714e:	68a3      	ldr	r3, [r4, #8]
 8007150:	42ab      	cmp	r3, r5
 8007152:	dc12      	bgt.n	800717a <__multadd+0x66>
 8007154:	6861      	ldr	r1, [r4, #4]
 8007156:	4630      	mov	r0, r6
 8007158:	3101      	adds	r1, #1
 800715a:	f7ff ff90 	bl	800707e <_Balloc>
 800715e:	4680      	mov	r8, r0
 8007160:	6922      	ldr	r2, [r4, #16]
 8007162:	f104 010c 	add.w	r1, r4, #12
 8007166:	3202      	adds	r2, #2
 8007168:	0092      	lsls	r2, r2, #2
 800716a:	300c      	adds	r0, #12
 800716c:	f7ff ff7c 	bl	8007068 <memcpy>
 8007170:	4621      	mov	r1, r4
 8007172:	4630      	mov	r0, r6
 8007174:	f7ff ffb7 	bl	80070e6 <_Bfree>
 8007178:	4644      	mov	r4, r8
 800717a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800717e:	3501      	adds	r5, #1
 8007180:	615f      	str	r7, [r3, #20]
 8007182:	6125      	str	r5, [r4, #16]
 8007184:	4620      	mov	r0, r4
 8007186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800718a <__s2b>:
 800718a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800718e:	4615      	mov	r5, r2
 8007190:	2209      	movs	r2, #9
 8007192:	461f      	mov	r7, r3
 8007194:	3308      	adds	r3, #8
 8007196:	460c      	mov	r4, r1
 8007198:	fb93 f3f2 	sdiv	r3, r3, r2
 800719c:	4606      	mov	r6, r0
 800719e:	2201      	movs	r2, #1
 80071a0:	2100      	movs	r1, #0
 80071a2:	429a      	cmp	r2, r3
 80071a4:	db20      	blt.n	80071e8 <__s2b+0x5e>
 80071a6:	4630      	mov	r0, r6
 80071a8:	f7ff ff69 	bl	800707e <_Balloc>
 80071ac:	9b08      	ldr	r3, [sp, #32]
 80071ae:	2d09      	cmp	r5, #9
 80071b0:	6143      	str	r3, [r0, #20]
 80071b2:	f04f 0301 	mov.w	r3, #1
 80071b6:	6103      	str	r3, [r0, #16]
 80071b8:	dd19      	ble.n	80071ee <__s2b+0x64>
 80071ba:	f104 0809 	add.w	r8, r4, #9
 80071be:	46c1      	mov	r9, r8
 80071c0:	442c      	add	r4, r5
 80071c2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80071c6:	4601      	mov	r1, r0
 80071c8:	3b30      	subs	r3, #48	; 0x30
 80071ca:	220a      	movs	r2, #10
 80071cc:	4630      	mov	r0, r6
 80071ce:	f7ff ffa1 	bl	8007114 <__multadd>
 80071d2:	45a1      	cmp	r9, r4
 80071d4:	d1f5      	bne.n	80071c2 <__s2b+0x38>
 80071d6:	eb08 0405 	add.w	r4, r8, r5
 80071da:	3c08      	subs	r4, #8
 80071dc:	1b2d      	subs	r5, r5, r4
 80071de:	1963      	adds	r3, r4, r5
 80071e0:	42bb      	cmp	r3, r7
 80071e2:	db07      	blt.n	80071f4 <__s2b+0x6a>
 80071e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071e8:	0052      	lsls	r2, r2, #1
 80071ea:	3101      	adds	r1, #1
 80071ec:	e7d9      	b.n	80071a2 <__s2b+0x18>
 80071ee:	340a      	adds	r4, #10
 80071f0:	2509      	movs	r5, #9
 80071f2:	e7f3      	b.n	80071dc <__s2b+0x52>
 80071f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80071f8:	4601      	mov	r1, r0
 80071fa:	3b30      	subs	r3, #48	; 0x30
 80071fc:	220a      	movs	r2, #10
 80071fe:	4630      	mov	r0, r6
 8007200:	f7ff ff88 	bl	8007114 <__multadd>
 8007204:	e7eb      	b.n	80071de <__s2b+0x54>

08007206 <__hi0bits>:
 8007206:	0c02      	lsrs	r2, r0, #16
 8007208:	0412      	lsls	r2, r2, #16
 800720a:	4603      	mov	r3, r0
 800720c:	b9b2      	cbnz	r2, 800723c <__hi0bits+0x36>
 800720e:	0403      	lsls	r3, r0, #16
 8007210:	2010      	movs	r0, #16
 8007212:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007216:	bf04      	itt	eq
 8007218:	021b      	lsleq	r3, r3, #8
 800721a:	3008      	addeq	r0, #8
 800721c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007220:	bf04      	itt	eq
 8007222:	011b      	lsleq	r3, r3, #4
 8007224:	3004      	addeq	r0, #4
 8007226:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800722a:	bf04      	itt	eq
 800722c:	009b      	lsleq	r3, r3, #2
 800722e:	3002      	addeq	r0, #2
 8007230:	2b00      	cmp	r3, #0
 8007232:	db06      	blt.n	8007242 <__hi0bits+0x3c>
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	d503      	bpl.n	8007240 <__hi0bits+0x3a>
 8007238:	3001      	adds	r0, #1
 800723a:	4770      	bx	lr
 800723c:	2000      	movs	r0, #0
 800723e:	e7e8      	b.n	8007212 <__hi0bits+0xc>
 8007240:	2020      	movs	r0, #32
 8007242:	4770      	bx	lr

08007244 <__lo0bits>:
 8007244:	6803      	ldr	r3, [r0, #0]
 8007246:	4601      	mov	r1, r0
 8007248:	f013 0207 	ands.w	r2, r3, #7
 800724c:	d00b      	beq.n	8007266 <__lo0bits+0x22>
 800724e:	07da      	lsls	r2, r3, #31
 8007250:	d423      	bmi.n	800729a <__lo0bits+0x56>
 8007252:	0798      	lsls	r0, r3, #30
 8007254:	bf49      	itett	mi
 8007256:	085b      	lsrmi	r3, r3, #1
 8007258:	089b      	lsrpl	r3, r3, #2
 800725a:	2001      	movmi	r0, #1
 800725c:	600b      	strmi	r3, [r1, #0]
 800725e:	bf5c      	itt	pl
 8007260:	600b      	strpl	r3, [r1, #0]
 8007262:	2002      	movpl	r0, #2
 8007264:	4770      	bx	lr
 8007266:	b298      	uxth	r0, r3
 8007268:	b9a8      	cbnz	r0, 8007296 <__lo0bits+0x52>
 800726a:	2010      	movs	r0, #16
 800726c:	0c1b      	lsrs	r3, r3, #16
 800726e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007272:	bf04      	itt	eq
 8007274:	0a1b      	lsreq	r3, r3, #8
 8007276:	3008      	addeq	r0, #8
 8007278:	071a      	lsls	r2, r3, #28
 800727a:	bf04      	itt	eq
 800727c:	091b      	lsreq	r3, r3, #4
 800727e:	3004      	addeq	r0, #4
 8007280:	079a      	lsls	r2, r3, #30
 8007282:	bf04      	itt	eq
 8007284:	089b      	lsreq	r3, r3, #2
 8007286:	3002      	addeq	r0, #2
 8007288:	07da      	lsls	r2, r3, #31
 800728a:	d402      	bmi.n	8007292 <__lo0bits+0x4e>
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	d006      	beq.n	800729e <__lo0bits+0x5a>
 8007290:	3001      	adds	r0, #1
 8007292:	600b      	str	r3, [r1, #0]
 8007294:	4770      	bx	lr
 8007296:	4610      	mov	r0, r2
 8007298:	e7e9      	b.n	800726e <__lo0bits+0x2a>
 800729a:	2000      	movs	r0, #0
 800729c:	4770      	bx	lr
 800729e:	2020      	movs	r0, #32
 80072a0:	4770      	bx	lr

080072a2 <__i2b>:
 80072a2:	b510      	push	{r4, lr}
 80072a4:	460c      	mov	r4, r1
 80072a6:	2101      	movs	r1, #1
 80072a8:	f7ff fee9 	bl	800707e <_Balloc>
 80072ac:	2201      	movs	r2, #1
 80072ae:	6144      	str	r4, [r0, #20]
 80072b0:	6102      	str	r2, [r0, #16]
 80072b2:	bd10      	pop	{r4, pc}

080072b4 <__multiply>:
 80072b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b8:	4614      	mov	r4, r2
 80072ba:	690a      	ldr	r2, [r1, #16]
 80072bc:	6923      	ldr	r3, [r4, #16]
 80072be:	4688      	mov	r8, r1
 80072c0:	429a      	cmp	r2, r3
 80072c2:	bfbe      	ittt	lt
 80072c4:	460b      	movlt	r3, r1
 80072c6:	46a0      	movlt	r8, r4
 80072c8:	461c      	movlt	r4, r3
 80072ca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80072ce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80072d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80072da:	eb07 0609 	add.w	r6, r7, r9
 80072de:	42b3      	cmp	r3, r6
 80072e0:	bfb8      	it	lt
 80072e2:	3101      	addlt	r1, #1
 80072e4:	f7ff fecb 	bl	800707e <_Balloc>
 80072e8:	f100 0514 	add.w	r5, r0, #20
 80072ec:	462b      	mov	r3, r5
 80072ee:	2200      	movs	r2, #0
 80072f0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80072f4:	4573      	cmp	r3, lr
 80072f6:	d316      	bcc.n	8007326 <__multiply+0x72>
 80072f8:	f104 0214 	add.w	r2, r4, #20
 80072fc:	f108 0114 	add.w	r1, r8, #20
 8007300:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007304:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	9b00      	ldr	r3, [sp, #0]
 800730c:	9201      	str	r2, [sp, #4]
 800730e:	4293      	cmp	r3, r2
 8007310:	d80c      	bhi.n	800732c <__multiply+0x78>
 8007312:	2e00      	cmp	r6, #0
 8007314:	dd03      	ble.n	800731e <__multiply+0x6a>
 8007316:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800731a:	2b00      	cmp	r3, #0
 800731c:	d05d      	beq.n	80073da <__multiply+0x126>
 800731e:	6106      	str	r6, [r0, #16]
 8007320:	b003      	add	sp, #12
 8007322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007326:	f843 2b04 	str.w	r2, [r3], #4
 800732a:	e7e3      	b.n	80072f4 <__multiply+0x40>
 800732c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007330:	f1bb 0f00 	cmp.w	fp, #0
 8007334:	d023      	beq.n	800737e <__multiply+0xca>
 8007336:	4689      	mov	r9, r1
 8007338:	46ac      	mov	ip, r5
 800733a:	f04f 0800 	mov.w	r8, #0
 800733e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007342:	f8dc a000 	ldr.w	sl, [ip]
 8007346:	b2a3      	uxth	r3, r4
 8007348:	fa1f fa8a 	uxth.w	sl, sl
 800734c:	fb0b a303 	mla	r3, fp, r3, sl
 8007350:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007354:	f8dc 4000 	ldr.w	r4, [ip]
 8007358:	4443      	add	r3, r8
 800735a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800735e:	fb0b 840a 	mla	r4, fp, sl, r8
 8007362:	46e2      	mov	sl, ip
 8007364:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007368:	b29b      	uxth	r3, r3
 800736a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800736e:	454f      	cmp	r7, r9
 8007370:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007374:	f84a 3b04 	str.w	r3, [sl], #4
 8007378:	d82b      	bhi.n	80073d2 <__multiply+0x11e>
 800737a:	f8cc 8004 	str.w	r8, [ip, #4]
 800737e:	9b01      	ldr	r3, [sp, #4]
 8007380:	3204      	adds	r2, #4
 8007382:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007386:	f1ba 0f00 	cmp.w	sl, #0
 800738a:	d020      	beq.n	80073ce <__multiply+0x11a>
 800738c:	4689      	mov	r9, r1
 800738e:	46a8      	mov	r8, r5
 8007390:	f04f 0b00 	mov.w	fp, #0
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	f8b9 c000 	ldrh.w	ip, [r9]
 800739a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	fb0a 440c 	mla	r4, sl, ip, r4
 80073a4:	46c4      	mov	ip, r8
 80073a6:	445c      	add	r4, fp
 80073a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80073ac:	f84c 3b04 	str.w	r3, [ip], #4
 80073b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80073b4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80073b8:	0c1b      	lsrs	r3, r3, #16
 80073ba:	fb0a b303 	mla	r3, sl, r3, fp
 80073be:	454f      	cmp	r7, r9
 80073c0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80073c4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80073c8:	d805      	bhi.n	80073d6 <__multiply+0x122>
 80073ca:	f8c8 3004 	str.w	r3, [r8, #4]
 80073ce:	3504      	adds	r5, #4
 80073d0:	e79b      	b.n	800730a <__multiply+0x56>
 80073d2:	46d4      	mov	ip, sl
 80073d4:	e7b3      	b.n	800733e <__multiply+0x8a>
 80073d6:	46e0      	mov	r8, ip
 80073d8:	e7dd      	b.n	8007396 <__multiply+0xe2>
 80073da:	3e01      	subs	r6, #1
 80073dc:	e799      	b.n	8007312 <__multiply+0x5e>
	...

080073e0 <__pow5mult>:
 80073e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e4:	4615      	mov	r5, r2
 80073e6:	f012 0203 	ands.w	r2, r2, #3
 80073ea:	4606      	mov	r6, r0
 80073ec:	460f      	mov	r7, r1
 80073ee:	d007      	beq.n	8007400 <__pow5mult+0x20>
 80073f0:	4c21      	ldr	r4, [pc, #132]	; (8007478 <__pow5mult+0x98>)
 80073f2:	3a01      	subs	r2, #1
 80073f4:	2300      	movs	r3, #0
 80073f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073fa:	f7ff fe8b 	bl	8007114 <__multadd>
 80073fe:	4607      	mov	r7, r0
 8007400:	10ad      	asrs	r5, r5, #2
 8007402:	d035      	beq.n	8007470 <__pow5mult+0x90>
 8007404:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007406:	b93c      	cbnz	r4, 8007418 <__pow5mult+0x38>
 8007408:	2010      	movs	r0, #16
 800740a:	f000 fbad 	bl	8007b68 <malloc>
 800740e:	6270      	str	r0, [r6, #36]	; 0x24
 8007410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007414:	6004      	str	r4, [r0, #0]
 8007416:	60c4      	str	r4, [r0, #12]
 8007418:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800741c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007420:	b94c      	cbnz	r4, 8007436 <__pow5mult+0x56>
 8007422:	f240 2171 	movw	r1, #625	; 0x271
 8007426:	4630      	mov	r0, r6
 8007428:	f7ff ff3b 	bl	80072a2 <__i2b>
 800742c:	2300      	movs	r3, #0
 800742e:	4604      	mov	r4, r0
 8007430:	f8c8 0008 	str.w	r0, [r8, #8]
 8007434:	6003      	str	r3, [r0, #0]
 8007436:	f04f 0800 	mov.w	r8, #0
 800743a:	07eb      	lsls	r3, r5, #31
 800743c:	d50a      	bpl.n	8007454 <__pow5mult+0x74>
 800743e:	4639      	mov	r1, r7
 8007440:	4622      	mov	r2, r4
 8007442:	4630      	mov	r0, r6
 8007444:	f7ff ff36 	bl	80072b4 <__multiply>
 8007448:	4681      	mov	r9, r0
 800744a:	4639      	mov	r1, r7
 800744c:	4630      	mov	r0, r6
 800744e:	f7ff fe4a 	bl	80070e6 <_Bfree>
 8007452:	464f      	mov	r7, r9
 8007454:	106d      	asrs	r5, r5, #1
 8007456:	d00b      	beq.n	8007470 <__pow5mult+0x90>
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	b938      	cbnz	r0, 800746c <__pow5mult+0x8c>
 800745c:	4622      	mov	r2, r4
 800745e:	4621      	mov	r1, r4
 8007460:	4630      	mov	r0, r6
 8007462:	f7ff ff27 	bl	80072b4 <__multiply>
 8007466:	6020      	str	r0, [r4, #0]
 8007468:	f8c0 8000 	str.w	r8, [r0]
 800746c:	4604      	mov	r4, r0
 800746e:	e7e4      	b.n	800743a <__pow5mult+0x5a>
 8007470:	4638      	mov	r0, r7
 8007472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007476:	bf00      	nop
 8007478:	08007de8 	.word	0x08007de8

0800747c <__lshift>:
 800747c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007480:	460c      	mov	r4, r1
 8007482:	4607      	mov	r7, r0
 8007484:	4616      	mov	r6, r2
 8007486:	6923      	ldr	r3, [r4, #16]
 8007488:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800748c:	eb0a 0903 	add.w	r9, sl, r3
 8007490:	6849      	ldr	r1, [r1, #4]
 8007492:	68a3      	ldr	r3, [r4, #8]
 8007494:	f109 0501 	add.w	r5, r9, #1
 8007498:	42ab      	cmp	r3, r5
 800749a:	db32      	blt.n	8007502 <__lshift+0x86>
 800749c:	4638      	mov	r0, r7
 800749e:	f7ff fdee 	bl	800707e <_Balloc>
 80074a2:	2300      	movs	r3, #0
 80074a4:	4680      	mov	r8, r0
 80074a6:	461a      	mov	r2, r3
 80074a8:	f100 0114 	add.w	r1, r0, #20
 80074ac:	4553      	cmp	r3, sl
 80074ae:	db2b      	blt.n	8007508 <__lshift+0x8c>
 80074b0:	6920      	ldr	r0, [r4, #16]
 80074b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074b6:	f104 0314 	add.w	r3, r4, #20
 80074ba:	f016 021f 	ands.w	r2, r6, #31
 80074be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80074c6:	d025      	beq.n	8007514 <__lshift+0x98>
 80074c8:	2000      	movs	r0, #0
 80074ca:	f1c2 0e20 	rsb	lr, r2, #32
 80074ce:	468a      	mov	sl, r1
 80074d0:	681e      	ldr	r6, [r3, #0]
 80074d2:	4096      	lsls	r6, r2
 80074d4:	4330      	orrs	r0, r6
 80074d6:	f84a 0b04 	str.w	r0, [sl], #4
 80074da:	f853 0b04 	ldr.w	r0, [r3], #4
 80074de:	459c      	cmp	ip, r3
 80074e0:	fa20 f00e 	lsr.w	r0, r0, lr
 80074e4:	d814      	bhi.n	8007510 <__lshift+0x94>
 80074e6:	6048      	str	r0, [r1, #4]
 80074e8:	b108      	cbz	r0, 80074ee <__lshift+0x72>
 80074ea:	f109 0502 	add.w	r5, r9, #2
 80074ee:	3d01      	subs	r5, #1
 80074f0:	4638      	mov	r0, r7
 80074f2:	f8c8 5010 	str.w	r5, [r8, #16]
 80074f6:	4621      	mov	r1, r4
 80074f8:	f7ff fdf5 	bl	80070e6 <_Bfree>
 80074fc:	4640      	mov	r0, r8
 80074fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007502:	3101      	adds	r1, #1
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	e7c7      	b.n	8007498 <__lshift+0x1c>
 8007508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800750c:	3301      	adds	r3, #1
 800750e:	e7cd      	b.n	80074ac <__lshift+0x30>
 8007510:	4651      	mov	r1, sl
 8007512:	e7dc      	b.n	80074ce <__lshift+0x52>
 8007514:	3904      	subs	r1, #4
 8007516:	f853 2b04 	ldr.w	r2, [r3], #4
 800751a:	459c      	cmp	ip, r3
 800751c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007520:	d8f9      	bhi.n	8007516 <__lshift+0x9a>
 8007522:	e7e4      	b.n	80074ee <__lshift+0x72>

08007524 <__mcmp>:
 8007524:	6903      	ldr	r3, [r0, #16]
 8007526:	690a      	ldr	r2, [r1, #16]
 8007528:	b530      	push	{r4, r5, lr}
 800752a:	1a9b      	subs	r3, r3, r2
 800752c:	d10c      	bne.n	8007548 <__mcmp+0x24>
 800752e:	0092      	lsls	r2, r2, #2
 8007530:	3014      	adds	r0, #20
 8007532:	3114      	adds	r1, #20
 8007534:	1884      	adds	r4, r0, r2
 8007536:	4411      	add	r1, r2
 8007538:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800753c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007540:	4295      	cmp	r5, r2
 8007542:	d003      	beq.n	800754c <__mcmp+0x28>
 8007544:	d305      	bcc.n	8007552 <__mcmp+0x2e>
 8007546:	2301      	movs	r3, #1
 8007548:	4618      	mov	r0, r3
 800754a:	bd30      	pop	{r4, r5, pc}
 800754c:	42a0      	cmp	r0, r4
 800754e:	d3f3      	bcc.n	8007538 <__mcmp+0x14>
 8007550:	e7fa      	b.n	8007548 <__mcmp+0x24>
 8007552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007556:	e7f7      	b.n	8007548 <__mcmp+0x24>

08007558 <__mdiff>:
 8007558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800755c:	460d      	mov	r5, r1
 800755e:	4607      	mov	r7, r0
 8007560:	4611      	mov	r1, r2
 8007562:	4628      	mov	r0, r5
 8007564:	4614      	mov	r4, r2
 8007566:	f7ff ffdd 	bl	8007524 <__mcmp>
 800756a:	1e06      	subs	r6, r0, #0
 800756c:	d108      	bne.n	8007580 <__mdiff+0x28>
 800756e:	4631      	mov	r1, r6
 8007570:	4638      	mov	r0, r7
 8007572:	f7ff fd84 	bl	800707e <_Balloc>
 8007576:	2301      	movs	r3, #1
 8007578:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800757c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007580:	bfa4      	itt	ge
 8007582:	4623      	movge	r3, r4
 8007584:	462c      	movge	r4, r5
 8007586:	4638      	mov	r0, r7
 8007588:	6861      	ldr	r1, [r4, #4]
 800758a:	bfa6      	itte	ge
 800758c:	461d      	movge	r5, r3
 800758e:	2600      	movge	r6, #0
 8007590:	2601      	movlt	r6, #1
 8007592:	f7ff fd74 	bl	800707e <_Balloc>
 8007596:	f04f 0e00 	mov.w	lr, #0
 800759a:	60c6      	str	r6, [r0, #12]
 800759c:	692b      	ldr	r3, [r5, #16]
 800759e:	6926      	ldr	r6, [r4, #16]
 80075a0:	f104 0214 	add.w	r2, r4, #20
 80075a4:	f105 0914 	add.w	r9, r5, #20
 80075a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80075ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80075b0:	f100 0114 	add.w	r1, r0, #20
 80075b4:	f852 ab04 	ldr.w	sl, [r2], #4
 80075b8:	f859 5b04 	ldr.w	r5, [r9], #4
 80075bc:	fa1f f38a 	uxth.w	r3, sl
 80075c0:	4473      	add	r3, lr
 80075c2:	b2ac      	uxth	r4, r5
 80075c4:	1b1b      	subs	r3, r3, r4
 80075c6:	0c2c      	lsrs	r4, r5, #16
 80075c8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80075cc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80075d6:	45c8      	cmp	r8, r9
 80075d8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80075dc:	4694      	mov	ip, r2
 80075de:	f841 4b04 	str.w	r4, [r1], #4
 80075e2:	d8e7      	bhi.n	80075b4 <__mdiff+0x5c>
 80075e4:	45bc      	cmp	ip, r7
 80075e6:	d304      	bcc.n	80075f2 <__mdiff+0x9a>
 80075e8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80075ec:	b183      	cbz	r3, 8007610 <__mdiff+0xb8>
 80075ee:	6106      	str	r6, [r0, #16]
 80075f0:	e7c4      	b.n	800757c <__mdiff+0x24>
 80075f2:	f85c 4b04 	ldr.w	r4, [ip], #4
 80075f6:	b2a2      	uxth	r2, r4
 80075f8:	4472      	add	r2, lr
 80075fa:	1413      	asrs	r3, r2, #16
 80075fc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007600:	b292      	uxth	r2, r2
 8007602:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007606:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800760a:	f841 2b04 	str.w	r2, [r1], #4
 800760e:	e7e9      	b.n	80075e4 <__mdiff+0x8c>
 8007610:	3e01      	subs	r6, #1
 8007612:	e7e9      	b.n	80075e8 <__mdiff+0x90>

08007614 <__ulp>:
 8007614:	4b10      	ldr	r3, [pc, #64]	; (8007658 <__ulp+0x44>)
 8007616:	400b      	ands	r3, r1
 8007618:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800761c:	2b00      	cmp	r3, #0
 800761e:	dd02      	ble.n	8007626 <__ulp+0x12>
 8007620:	2000      	movs	r0, #0
 8007622:	4619      	mov	r1, r3
 8007624:	4770      	bx	lr
 8007626:	425b      	negs	r3, r3
 8007628:	151b      	asrs	r3, r3, #20
 800762a:	2b13      	cmp	r3, #19
 800762c:	f04f 0000 	mov.w	r0, #0
 8007630:	f04f 0100 	mov.w	r1, #0
 8007634:	dc04      	bgt.n	8007640 <__ulp+0x2c>
 8007636:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800763a:	fa42 f103 	asr.w	r1, r2, r3
 800763e:	4770      	bx	lr
 8007640:	2201      	movs	r2, #1
 8007642:	3b14      	subs	r3, #20
 8007644:	2b1e      	cmp	r3, #30
 8007646:	bfce      	itee	gt
 8007648:	4613      	movgt	r3, r2
 800764a:	f1c3 031f 	rsble	r3, r3, #31
 800764e:	fa02 f303 	lslle.w	r3, r2, r3
 8007652:	4618      	mov	r0, r3
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	7ff00000 	.word	0x7ff00000

0800765c <__b2d>:
 800765c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007660:	6907      	ldr	r7, [r0, #16]
 8007662:	f100 0914 	add.w	r9, r0, #20
 8007666:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800766a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800766e:	f1a7 0804 	sub.w	r8, r7, #4
 8007672:	4630      	mov	r0, r6
 8007674:	f7ff fdc7 	bl	8007206 <__hi0bits>
 8007678:	f1c0 0320 	rsb	r3, r0, #32
 800767c:	280a      	cmp	r0, #10
 800767e:	600b      	str	r3, [r1, #0]
 8007680:	491e      	ldr	r1, [pc, #120]	; (80076fc <__b2d+0xa0>)
 8007682:	dc17      	bgt.n	80076b4 <__b2d+0x58>
 8007684:	45c1      	cmp	r9, r8
 8007686:	bf28      	it	cs
 8007688:	2200      	movcs	r2, #0
 800768a:	f1c0 0c0b 	rsb	ip, r0, #11
 800768e:	fa26 f30c 	lsr.w	r3, r6, ip
 8007692:	bf38      	it	cc
 8007694:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007698:	ea43 0501 	orr.w	r5, r3, r1
 800769c:	f100 0315 	add.w	r3, r0, #21
 80076a0:	fa06 f303 	lsl.w	r3, r6, r3
 80076a4:	fa22 f20c 	lsr.w	r2, r2, ip
 80076a8:	ea43 0402 	orr.w	r4, r3, r2
 80076ac:	4620      	mov	r0, r4
 80076ae:	4629      	mov	r1, r5
 80076b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076b4:	45c1      	cmp	r9, r8
 80076b6:	bf3a      	itte	cc
 80076b8:	f1a7 0808 	subcc.w	r8, r7, #8
 80076bc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80076c0:	2200      	movcs	r2, #0
 80076c2:	f1b0 030b 	subs.w	r3, r0, #11
 80076c6:	d015      	beq.n	80076f4 <__b2d+0x98>
 80076c8:	409e      	lsls	r6, r3
 80076ca:	f1c3 0720 	rsb	r7, r3, #32
 80076ce:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80076d2:	fa22 f107 	lsr.w	r1, r2, r7
 80076d6:	45c8      	cmp	r8, r9
 80076d8:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80076dc:	ea46 0501 	orr.w	r5, r6, r1
 80076e0:	bf94      	ite	ls
 80076e2:	2100      	movls	r1, #0
 80076e4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80076e8:	fa02 f003 	lsl.w	r0, r2, r3
 80076ec:	40f9      	lsrs	r1, r7
 80076ee:	ea40 0401 	orr.w	r4, r0, r1
 80076f2:	e7db      	b.n	80076ac <__b2d+0x50>
 80076f4:	ea46 0501 	orr.w	r5, r6, r1
 80076f8:	4614      	mov	r4, r2
 80076fa:	e7d7      	b.n	80076ac <__b2d+0x50>
 80076fc:	3ff00000 	.word	0x3ff00000

08007700 <__d2b>:
 8007700:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007704:	461c      	mov	r4, r3
 8007706:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800770a:	2101      	movs	r1, #1
 800770c:	4690      	mov	r8, r2
 800770e:	f7ff fcb6 	bl	800707e <_Balloc>
 8007712:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007716:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800771a:	4607      	mov	r7, r0
 800771c:	bb34      	cbnz	r4, 800776c <__d2b+0x6c>
 800771e:	9201      	str	r2, [sp, #4]
 8007720:	f1b8 0200 	subs.w	r2, r8, #0
 8007724:	d027      	beq.n	8007776 <__d2b+0x76>
 8007726:	a802      	add	r0, sp, #8
 8007728:	f840 2d08 	str.w	r2, [r0, #-8]!
 800772c:	f7ff fd8a 	bl	8007244 <__lo0bits>
 8007730:	9900      	ldr	r1, [sp, #0]
 8007732:	b1f0      	cbz	r0, 8007772 <__d2b+0x72>
 8007734:	9a01      	ldr	r2, [sp, #4]
 8007736:	f1c0 0320 	rsb	r3, r0, #32
 800773a:	fa02 f303 	lsl.w	r3, r2, r3
 800773e:	430b      	orrs	r3, r1
 8007740:	40c2      	lsrs	r2, r0
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	9201      	str	r2, [sp, #4]
 8007746:	9b01      	ldr	r3, [sp, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	bf14      	ite	ne
 800774c:	2102      	movne	r1, #2
 800774e:	2101      	moveq	r1, #1
 8007750:	61bb      	str	r3, [r7, #24]
 8007752:	6139      	str	r1, [r7, #16]
 8007754:	b1c4      	cbz	r4, 8007788 <__d2b+0x88>
 8007756:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800775a:	4404      	add	r4, r0
 800775c:	6034      	str	r4, [r6, #0]
 800775e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007762:	6028      	str	r0, [r5, #0]
 8007764:	4638      	mov	r0, r7
 8007766:	b002      	add	sp, #8
 8007768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800776c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007770:	e7d5      	b.n	800771e <__d2b+0x1e>
 8007772:	6179      	str	r1, [r7, #20]
 8007774:	e7e7      	b.n	8007746 <__d2b+0x46>
 8007776:	a801      	add	r0, sp, #4
 8007778:	f7ff fd64 	bl	8007244 <__lo0bits>
 800777c:	2101      	movs	r1, #1
 800777e:	9b01      	ldr	r3, [sp, #4]
 8007780:	6139      	str	r1, [r7, #16]
 8007782:	617b      	str	r3, [r7, #20]
 8007784:	3020      	adds	r0, #32
 8007786:	e7e5      	b.n	8007754 <__d2b+0x54>
 8007788:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800778c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007790:	6030      	str	r0, [r6, #0]
 8007792:	6918      	ldr	r0, [r3, #16]
 8007794:	f7ff fd37 	bl	8007206 <__hi0bits>
 8007798:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800779c:	e7e1      	b.n	8007762 <__d2b+0x62>

0800779e <__ratio>:
 800779e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a2:	4688      	mov	r8, r1
 80077a4:	4669      	mov	r1, sp
 80077a6:	4681      	mov	r9, r0
 80077a8:	f7ff ff58 	bl	800765c <__b2d>
 80077ac:	468b      	mov	fp, r1
 80077ae:	4606      	mov	r6, r0
 80077b0:	460f      	mov	r7, r1
 80077b2:	4640      	mov	r0, r8
 80077b4:	a901      	add	r1, sp, #4
 80077b6:	f7ff ff51 	bl	800765c <__b2d>
 80077ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80077c2:	460d      	mov	r5, r1
 80077c4:	eba3 0c02 	sub.w	ip, r3, r2
 80077c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80077cc:	1a9b      	subs	r3, r3, r2
 80077ce:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bfd5      	itete	le
 80077d6:	460a      	movle	r2, r1
 80077d8:	463a      	movgt	r2, r7
 80077da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80077de:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80077e2:	bfd8      	it	le
 80077e4:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80077e8:	462b      	mov	r3, r5
 80077ea:	4602      	mov	r2, r0
 80077ec:	4659      	mov	r1, fp
 80077ee:	4630      	mov	r0, r6
 80077f0:	f7f8 ff9c 	bl	800072c <__aeabi_ddiv>
 80077f4:	b003      	add	sp, #12
 80077f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080077fa <__copybits>:
 80077fa:	3901      	subs	r1, #1
 80077fc:	b510      	push	{r4, lr}
 80077fe:	1149      	asrs	r1, r1, #5
 8007800:	6914      	ldr	r4, [r2, #16]
 8007802:	3101      	adds	r1, #1
 8007804:	f102 0314 	add.w	r3, r2, #20
 8007808:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800780c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007810:	42a3      	cmp	r3, r4
 8007812:	4602      	mov	r2, r0
 8007814:	d303      	bcc.n	800781e <__copybits+0x24>
 8007816:	2300      	movs	r3, #0
 8007818:	428a      	cmp	r2, r1
 800781a:	d305      	bcc.n	8007828 <__copybits+0x2e>
 800781c:	bd10      	pop	{r4, pc}
 800781e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007822:	f840 2b04 	str.w	r2, [r0], #4
 8007826:	e7f3      	b.n	8007810 <__copybits+0x16>
 8007828:	f842 3b04 	str.w	r3, [r2], #4
 800782c:	e7f4      	b.n	8007818 <__copybits+0x1e>

0800782e <__any_on>:
 800782e:	f100 0214 	add.w	r2, r0, #20
 8007832:	6900      	ldr	r0, [r0, #16]
 8007834:	114b      	asrs	r3, r1, #5
 8007836:	4298      	cmp	r0, r3
 8007838:	b510      	push	{r4, lr}
 800783a:	db11      	blt.n	8007860 <__any_on+0x32>
 800783c:	dd0a      	ble.n	8007854 <__any_on+0x26>
 800783e:	f011 011f 	ands.w	r1, r1, #31
 8007842:	d007      	beq.n	8007854 <__any_on+0x26>
 8007844:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007848:	fa24 f001 	lsr.w	r0, r4, r1
 800784c:	fa00 f101 	lsl.w	r1, r0, r1
 8007850:	428c      	cmp	r4, r1
 8007852:	d10b      	bne.n	800786c <__any_on+0x3e>
 8007854:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007858:	4293      	cmp	r3, r2
 800785a:	d803      	bhi.n	8007864 <__any_on+0x36>
 800785c:	2000      	movs	r0, #0
 800785e:	bd10      	pop	{r4, pc}
 8007860:	4603      	mov	r3, r0
 8007862:	e7f7      	b.n	8007854 <__any_on+0x26>
 8007864:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007868:	2900      	cmp	r1, #0
 800786a:	d0f5      	beq.n	8007858 <__any_on+0x2a>
 800786c:	2001      	movs	r0, #1
 800786e:	e7f6      	b.n	800785e <__any_on+0x30>

08007870 <_calloc_r>:
 8007870:	b538      	push	{r3, r4, r5, lr}
 8007872:	fb02 f401 	mul.w	r4, r2, r1
 8007876:	4621      	mov	r1, r4
 8007878:	f000 f854 	bl	8007924 <_malloc_r>
 800787c:	4605      	mov	r5, r0
 800787e:	b118      	cbz	r0, 8007888 <_calloc_r+0x18>
 8007880:	4622      	mov	r2, r4
 8007882:	2100      	movs	r1, #0
 8007884:	f7fd ff76 	bl	8005774 <memset>
 8007888:	4628      	mov	r0, r5
 800788a:	bd38      	pop	{r3, r4, r5, pc}

0800788c <_free_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	4605      	mov	r5, r0
 8007890:	2900      	cmp	r1, #0
 8007892:	d043      	beq.n	800791c <_free_r+0x90>
 8007894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007898:	1f0c      	subs	r4, r1, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	bfb8      	it	lt
 800789e:	18e4      	addlt	r4, r4, r3
 80078a0:	f000 f96a 	bl	8007b78 <__malloc_lock>
 80078a4:	4a1e      	ldr	r2, [pc, #120]	; (8007920 <_free_r+0x94>)
 80078a6:	6813      	ldr	r3, [r2, #0]
 80078a8:	4610      	mov	r0, r2
 80078aa:	b933      	cbnz	r3, 80078ba <_free_r+0x2e>
 80078ac:	6063      	str	r3, [r4, #4]
 80078ae:	6014      	str	r4, [r2, #0]
 80078b0:	4628      	mov	r0, r5
 80078b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078b6:	f000 b960 	b.w	8007b7a <__malloc_unlock>
 80078ba:	42a3      	cmp	r3, r4
 80078bc:	d90b      	bls.n	80078d6 <_free_r+0x4a>
 80078be:	6821      	ldr	r1, [r4, #0]
 80078c0:	1862      	adds	r2, r4, r1
 80078c2:	4293      	cmp	r3, r2
 80078c4:	bf01      	itttt	eq
 80078c6:	681a      	ldreq	r2, [r3, #0]
 80078c8:	685b      	ldreq	r3, [r3, #4]
 80078ca:	1852      	addeq	r2, r2, r1
 80078cc:	6022      	streq	r2, [r4, #0]
 80078ce:	6063      	str	r3, [r4, #4]
 80078d0:	6004      	str	r4, [r0, #0]
 80078d2:	e7ed      	b.n	80078b0 <_free_r+0x24>
 80078d4:	4613      	mov	r3, r2
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	b10a      	cbz	r2, 80078de <_free_r+0x52>
 80078da:	42a2      	cmp	r2, r4
 80078dc:	d9fa      	bls.n	80078d4 <_free_r+0x48>
 80078de:	6819      	ldr	r1, [r3, #0]
 80078e0:	1858      	adds	r0, r3, r1
 80078e2:	42a0      	cmp	r0, r4
 80078e4:	d10b      	bne.n	80078fe <_free_r+0x72>
 80078e6:	6820      	ldr	r0, [r4, #0]
 80078e8:	4401      	add	r1, r0
 80078ea:	1858      	adds	r0, r3, r1
 80078ec:	4282      	cmp	r2, r0
 80078ee:	6019      	str	r1, [r3, #0]
 80078f0:	d1de      	bne.n	80078b0 <_free_r+0x24>
 80078f2:	6810      	ldr	r0, [r2, #0]
 80078f4:	6852      	ldr	r2, [r2, #4]
 80078f6:	4401      	add	r1, r0
 80078f8:	6019      	str	r1, [r3, #0]
 80078fa:	605a      	str	r2, [r3, #4]
 80078fc:	e7d8      	b.n	80078b0 <_free_r+0x24>
 80078fe:	d902      	bls.n	8007906 <_free_r+0x7a>
 8007900:	230c      	movs	r3, #12
 8007902:	602b      	str	r3, [r5, #0]
 8007904:	e7d4      	b.n	80078b0 <_free_r+0x24>
 8007906:	6820      	ldr	r0, [r4, #0]
 8007908:	1821      	adds	r1, r4, r0
 800790a:	428a      	cmp	r2, r1
 800790c:	bf01      	itttt	eq
 800790e:	6811      	ldreq	r1, [r2, #0]
 8007910:	6852      	ldreq	r2, [r2, #4]
 8007912:	1809      	addeq	r1, r1, r0
 8007914:	6021      	streq	r1, [r4, #0]
 8007916:	6062      	str	r2, [r4, #4]
 8007918:	605c      	str	r4, [r3, #4]
 800791a:	e7c9      	b.n	80078b0 <_free_r+0x24>
 800791c:	bd38      	pop	{r3, r4, r5, pc}
 800791e:	bf00      	nop
 8007920:	200002fc 	.word	0x200002fc

08007924 <_malloc_r>:
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	1ccd      	adds	r5, r1, #3
 8007928:	f025 0503 	bic.w	r5, r5, #3
 800792c:	3508      	adds	r5, #8
 800792e:	2d0c      	cmp	r5, #12
 8007930:	bf38      	it	cc
 8007932:	250c      	movcc	r5, #12
 8007934:	2d00      	cmp	r5, #0
 8007936:	4606      	mov	r6, r0
 8007938:	db01      	blt.n	800793e <_malloc_r+0x1a>
 800793a:	42a9      	cmp	r1, r5
 800793c:	d903      	bls.n	8007946 <_malloc_r+0x22>
 800793e:	230c      	movs	r3, #12
 8007940:	6033      	str	r3, [r6, #0]
 8007942:	2000      	movs	r0, #0
 8007944:	bd70      	pop	{r4, r5, r6, pc}
 8007946:	f000 f917 	bl	8007b78 <__malloc_lock>
 800794a:	4a21      	ldr	r2, [pc, #132]	; (80079d0 <_malloc_r+0xac>)
 800794c:	6814      	ldr	r4, [r2, #0]
 800794e:	4621      	mov	r1, r4
 8007950:	b991      	cbnz	r1, 8007978 <_malloc_r+0x54>
 8007952:	4c20      	ldr	r4, [pc, #128]	; (80079d4 <_malloc_r+0xb0>)
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	b91b      	cbnz	r3, 8007960 <_malloc_r+0x3c>
 8007958:	4630      	mov	r0, r6
 800795a:	f000 f83d 	bl	80079d8 <_sbrk_r>
 800795e:	6020      	str	r0, [r4, #0]
 8007960:	4629      	mov	r1, r5
 8007962:	4630      	mov	r0, r6
 8007964:	f000 f838 	bl	80079d8 <_sbrk_r>
 8007968:	1c43      	adds	r3, r0, #1
 800796a:	d124      	bne.n	80079b6 <_malloc_r+0x92>
 800796c:	230c      	movs	r3, #12
 800796e:	4630      	mov	r0, r6
 8007970:	6033      	str	r3, [r6, #0]
 8007972:	f000 f902 	bl	8007b7a <__malloc_unlock>
 8007976:	e7e4      	b.n	8007942 <_malloc_r+0x1e>
 8007978:	680b      	ldr	r3, [r1, #0]
 800797a:	1b5b      	subs	r3, r3, r5
 800797c:	d418      	bmi.n	80079b0 <_malloc_r+0x8c>
 800797e:	2b0b      	cmp	r3, #11
 8007980:	d90f      	bls.n	80079a2 <_malloc_r+0x7e>
 8007982:	600b      	str	r3, [r1, #0]
 8007984:	18cc      	adds	r4, r1, r3
 8007986:	50cd      	str	r5, [r1, r3]
 8007988:	4630      	mov	r0, r6
 800798a:	f000 f8f6 	bl	8007b7a <__malloc_unlock>
 800798e:	f104 000b 	add.w	r0, r4, #11
 8007992:	1d23      	adds	r3, r4, #4
 8007994:	f020 0007 	bic.w	r0, r0, #7
 8007998:	1ac3      	subs	r3, r0, r3
 800799a:	d0d3      	beq.n	8007944 <_malloc_r+0x20>
 800799c:	425a      	negs	r2, r3
 800799e:	50e2      	str	r2, [r4, r3]
 80079a0:	e7d0      	b.n	8007944 <_malloc_r+0x20>
 80079a2:	684b      	ldr	r3, [r1, #4]
 80079a4:	428c      	cmp	r4, r1
 80079a6:	bf16      	itet	ne
 80079a8:	6063      	strne	r3, [r4, #4]
 80079aa:	6013      	streq	r3, [r2, #0]
 80079ac:	460c      	movne	r4, r1
 80079ae:	e7eb      	b.n	8007988 <_malloc_r+0x64>
 80079b0:	460c      	mov	r4, r1
 80079b2:	6849      	ldr	r1, [r1, #4]
 80079b4:	e7cc      	b.n	8007950 <_malloc_r+0x2c>
 80079b6:	1cc4      	adds	r4, r0, #3
 80079b8:	f024 0403 	bic.w	r4, r4, #3
 80079bc:	42a0      	cmp	r0, r4
 80079be:	d005      	beq.n	80079cc <_malloc_r+0xa8>
 80079c0:	1a21      	subs	r1, r4, r0
 80079c2:	4630      	mov	r0, r6
 80079c4:	f000 f808 	bl	80079d8 <_sbrk_r>
 80079c8:	3001      	adds	r0, #1
 80079ca:	d0cf      	beq.n	800796c <_malloc_r+0x48>
 80079cc:	6025      	str	r5, [r4, #0]
 80079ce:	e7db      	b.n	8007988 <_malloc_r+0x64>
 80079d0:	200002fc 	.word	0x200002fc
 80079d4:	20000300 	.word	0x20000300

080079d8 <_sbrk_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	2300      	movs	r3, #0
 80079dc:	4c05      	ldr	r4, [pc, #20]	; (80079f4 <_sbrk_r+0x1c>)
 80079de:	4605      	mov	r5, r0
 80079e0:	4608      	mov	r0, r1
 80079e2:	6023      	str	r3, [r4, #0]
 80079e4:	f7fa fd04 	bl	80023f0 <_sbrk>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d102      	bne.n	80079f2 <_sbrk_r+0x1a>
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	b103      	cbz	r3, 80079f2 <_sbrk_r+0x1a>
 80079f0:	602b      	str	r3, [r5, #0]
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	200004c0 	.word	0x200004c0

080079f8 <__sread>:
 80079f8:	b510      	push	{r4, lr}
 80079fa:	460c      	mov	r4, r1
 80079fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a00:	f000 f8bc 	bl	8007b7c <_read_r>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	bfab      	itete	ge
 8007a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a0c:	181b      	addge	r3, r3, r0
 8007a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a12:	bfac      	ite	ge
 8007a14:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a16:	81a3      	strhlt	r3, [r4, #12]
 8007a18:	bd10      	pop	{r4, pc}

08007a1a <__swrite>:
 8007a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a1e:	461f      	mov	r7, r3
 8007a20:	898b      	ldrh	r3, [r1, #12]
 8007a22:	4605      	mov	r5, r0
 8007a24:	05db      	lsls	r3, r3, #23
 8007a26:	460c      	mov	r4, r1
 8007a28:	4616      	mov	r6, r2
 8007a2a:	d505      	bpl.n	8007a38 <__swrite+0x1e>
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a34:	f000 f886 	bl	8007b44 <_lseek_r>
 8007a38:	89a3      	ldrh	r3, [r4, #12]
 8007a3a:	4632      	mov	r2, r6
 8007a3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a40:	81a3      	strh	r3, [r4, #12]
 8007a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a46:	463b      	mov	r3, r7
 8007a48:	4628      	mov	r0, r5
 8007a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a4e:	f000 b835 	b.w	8007abc <_write_r>

08007a52 <__sseek>:
 8007a52:	b510      	push	{r4, lr}
 8007a54:	460c      	mov	r4, r1
 8007a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a5a:	f000 f873 	bl	8007b44 <_lseek_r>
 8007a5e:	1c43      	adds	r3, r0, #1
 8007a60:	89a3      	ldrh	r3, [r4, #12]
 8007a62:	bf15      	itete	ne
 8007a64:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a6e:	81a3      	strheq	r3, [r4, #12]
 8007a70:	bf18      	it	ne
 8007a72:	81a3      	strhne	r3, [r4, #12]
 8007a74:	bd10      	pop	{r4, pc}

08007a76 <__sclose>:
 8007a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a7a:	f000 b831 	b.w	8007ae0 <_close_r>

08007a7e <strncmp>:
 8007a7e:	b510      	push	{r4, lr}
 8007a80:	b16a      	cbz	r2, 8007a9e <strncmp+0x20>
 8007a82:	3901      	subs	r1, #1
 8007a84:	1884      	adds	r4, r0, r2
 8007a86:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007a8a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d103      	bne.n	8007a9a <strncmp+0x1c>
 8007a92:	42a0      	cmp	r0, r4
 8007a94:	d001      	beq.n	8007a9a <strncmp+0x1c>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1f5      	bne.n	8007a86 <strncmp+0x8>
 8007a9a:	1a98      	subs	r0, r3, r2
 8007a9c:	bd10      	pop	{r4, pc}
 8007a9e:	4610      	mov	r0, r2
 8007aa0:	e7fc      	b.n	8007a9c <strncmp+0x1e>

08007aa2 <__ascii_wctomb>:
 8007aa2:	b149      	cbz	r1, 8007ab8 <__ascii_wctomb+0x16>
 8007aa4:	2aff      	cmp	r2, #255	; 0xff
 8007aa6:	bf8b      	itete	hi
 8007aa8:	238a      	movhi	r3, #138	; 0x8a
 8007aaa:	700a      	strbls	r2, [r1, #0]
 8007aac:	6003      	strhi	r3, [r0, #0]
 8007aae:	2001      	movls	r0, #1
 8007ab0:	bf88      	it	hi
 8007ab2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007ab6:	4770      	bx	lr
 8007ab8:	4608      	mov	r0, r1
 8007aba:	4770      	bx	lr

08007abc <_write_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4605      	mov	r5, r0
 8007ac0:	4608      	mov	r0, r1
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	4c05      	ldr	r4, [pc, #20]	; (8007adc <_write_r+0x20>)
 8007ac8:	6022      	str	r2, [r4, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	f7fa fc43 	bl	8002356 <_write>
 8007ad0:	1c43      	adds	r3, r0, #1
 8007ad2:	d102      	bne.n	8007ada <_write_r+0x1e>
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	b103      	cbz	r3, 8007ada <_write_r+0x1e>
 8007ad8:	602b      	str	r3, [r5, #0]
 8007ada:	bd38      	pop	{r3, r4, r5, pc}
 8007adc:	200004c0 	.word	0x200004c0

08007ae0 <_close_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	4c05      	ldr	r4, [pc, #20]	; (8007afc <_close_r+0x1c>)
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	4608      	mov	r0, r1
 8007aea:	6023      	str	r3, [r4, #0]
 8007aec:	f7fa fc4f 	bl	800238e <_close>
 8007af0:	1c43      	adds	r3, r0, #1
 8007af2:	d102      	bne.n	8007afa <_close_r+0x1a>
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	b103      	cbz	r3, 8007afa <_close_r+0x1a>
 8007af8:	602b      	str	r3, [r5, #0]
 8007afa:	bd38      	pop	{r3, r4, r5, pc}
 8007afc:	200004c0 	.word	0x200004c0

08007b00 <_fstat_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	2300      	movs	r3, #0
 8007b04:	4c06      	ldr	r4, [pc, #24]	; (8007b20 <_fstat_r+0x20>)
 8007b06:	4605      	mov	r5, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	f7fa fc49 	bl	80023a4 <_fstat>
 8007b12:	1c43      	adds	r3, r0, #1
 8007b14:	d102      	bne.n	8007b1c <_fstat_r+0x1c>
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	b103      	cbz	r3, 8007b1c <_fstat_r+0x1c>
 8007b1a:	602b      	str	r3, [r5, #0]
 8007b1c:	bd38      	pop	{r3, r4, r5, pc}
 8007b1e:	bf00      	nop
 8007b20:	200004c0 	.word	0x200004c0

08007b24 <_isatty_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	2300      	movs	r3, #0
 8007b28:	4c05      	ldr	r4, [pc, #20]	; (8007b40 <_isatty_r+0x1c>)
 8007b2a:	4605      	mov	r5, r0
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	6023      	str	r3, [r4, #0]
 8007b30:	f7fa fc47 	bl	80023c2 <_isatty>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d102      	bne.n	8007b3e <_isatty_r+0x1a>
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	b103      	cbz	r3, 8007b3e <_isatty_r+0x1a>
 8007b3c:	602b      	str	r3, [r5, #0]
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	200004c0 	.word	0x200004c0

08007b44 <_lseek_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	4605      	mov	r5, r0
 8007b48:	4608      	mov	r0, r1
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	4c05      	ldr	r4, [pc, #20]	; (8007b64 <_lseek_r+0x20>)
 8007b50:	6022      	str	r2, [r4, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	f7fa fc3f 	bl	80023d6 <_lseek>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d102      	bne.n	8007b62 <_lseek_r+0x1e>
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	b103      	cbz	r3, 8007b62 <_lseek_r+0x1e>
 8007b60:	602b      	str	r3, [r5, #0]
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	200004c0 	.word	0x200004c0

08007b68 <malloc>:
 8007b68:	4b02      	ldr	r3, [pc, #8]	; (8007b74 <malloc+0xc>)
 8007b6a:	4601      	mov	r1, r0
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	f7ff bed9 	b.w	8007924 <_malloc_r>
 8007b72:	bf00      	nop
 8007b74:	20000050 	.word	0x20000050

08007b78 <__malloc_lock>:
 8007b78:	4770      	bx	lr

08007b7a <__malloc_unlock>:
 8007b7a:	4770      	bx	lr

08007b7c <_read_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4605      	mov	r5, r0
 8007b80:	4608      	mov	r0, r1
 8007b82:	4611      	mov	r1, r2
 8007b84:	2200      	movs	r2, #0
 8007b86:	4c05      	ldr	r4, [pc, #20]	; (8007b9c <_read_r+0x20>)
 8007b88:	6022      	str	r2, [r4, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	f7fa fbc6 	bl	800231c <_read>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	d102      	bne.n	8007b9a <_read_r+0x1e>
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	b103      	cbz	r3, 8007b9a <_read_r+0x1e>
 8007b98:	602b      	str	r3, [r5, #0]
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
 8007b9c:	200004c0 	.word	0x200004c0

08007ba0 <_init>:
 8007ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba2:	bf00      	nop
 8007ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ba6:	bc08      	pop	{r3}
 8007ba8:	469e      	mov	lr, r3
 8007baa:	4770      	bx	lr

08007bac <_fini>:
 8007bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bae:	bf00      	nop
 8007bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb2:	bc08      	pop	{r3}
 8007bb4:	469e      	mov	lr, r3
 8007bb6:	4770      	bx	lr
