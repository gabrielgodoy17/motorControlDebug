
motorControlDebug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a50  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08007b60  08007b60  00017b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e90  08007e90  00020230  2**0
                  CONTENTS
  4 .ARM          00000000  08007e90  08007e90  00020230  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e90  08007e90  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e90  08007e90  00017e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e94  08007e94  00017e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08007e98  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000230  080080c8  00020230  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  080080c8  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca5d  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d0d  00000000  00000000  0002ccb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  0002e9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c00  00000000  00000000  0002f6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d7a  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009bb3  00000000  00000000  0004902a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c496  00000000  00000000  00052bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df073  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000438c  00000000  00000000  000df0f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000230 	.word	0x20000230
 800012c:	00000000 	.word	0x00000000
 8000130:	08007b48 	.word	0x08007b48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000234 	.word	0x20000234
 800014c:	08007b48 	.word	0x08007b48

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <interpreteComando>:
		resp_speed = (uint8_t) vel;
		return &resp_speed;
	}
	return 0;
}
void interpreteComando() {
 8000b3c:	b5b0      	push	{r4, r5, r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0

	//uint32_t duty_cycle;
	double consigna;

	switch (buffer[0]) {
 8000b42:	4bb8      	ldr	r3, [pc, #736]	; (8000e24 <interpreteComando+0x2e8>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	3b44      	subs	r3, #68	; 0x44
 8000b48:	2b33      	cmp	r3, #51	; 0x33
 8000b4a:	f200 8266 	bhi.w	800101a <interpreteComando+0x4de>
 8000b4e:	a201      	add	r2, pc, #4	; (adr r2, 8000b54 <interpreteComando+0x18>)
 8000b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b54:	08000fab 	.word	0x08000fab
 8000b58:	0800101b 	.word	0x0800101b
 8000b5c:	0800101b 	.word	0x0800101b
 8000b60:	0800101b 	.word	0x0800101b
 8000b64:	0800101b 	.word	0x0800101b
 8000b68:	08000f3b 	.word	0x08000f3b
 8000b6c:	0800101b 	.word	0x0800101b
 8000b70:	0800101b 	.word	0x0800101b
 8000b74:	0800101b 	.word	0x0800101b
 8000b78:	0800101b 	.word	0x0800101b
 8000b7c:	0800101b 	.word	0x0800101b
 8000b80:	0800101b 	.word	0x0800101b
 8000b84:	08000ecb 	.word	0x08000ecb
 8000b88:	08000c25 	.word	0x08000c25
 8000b8c:	0800101b 	.word	0x0800101b
 8000b90:	0800101b 	.word	0x0800101b
 8000b94:	0800101b 	.word	0x0800101b
 8000b98:	0800101b 	.word	0x0800101b
 8000b9c:	0800101b 	.word	0x0800101b
 8000ba0:	08000c2d 	.word	0x08000c2d
 8000ba4:	0800101b 	.word	0x0800101b
 8000ba8:	0800101b 	.word	0x0800101b
 8000bac:	0800101b 	.word	0x0800101b
 8000bb0:	0800101b 	.word	0x0800101b
 8000bb4:	0800101b 	.word	0x0800101b
 8000bb8:	0800101b 	.word	0x0800101b
 8000bbc:	0800101b 	.word	0x0800101b
 8000bc0:	0800101b 	.word	0x0800101b
 8000bc4:	0800101b 	.word	0x0800101b
 8000bc8:	0800101b 	.word	0x0800101b
 8000bcc:	0800101b 	.word	0x0800101b
 8000bd0:	0800101b 	.word	0x0800101b
 8000bd4:	08000fab 	.word	0x08000fab
 8000bd8:	0800101b 	.word	0x0800101b
 8000bdc:	0800101b 	.word	0x0800101b
 8000be0:	0800101b 	.word	0x0800101b
 8000be4:	0800101b 	.word	0x0800101b
 8000be8:	08000f3b 	.word	0x08000f3b
 8000bec:	0800101b 	.word	0x0800101b
 8000bf0:	0800101b 	.word	0x0800101b
 8000bf4:	0800101b 	.word	0x0800101b
 8000bf8:	0800101b 	.word	0x0800101b
 8000bfc:	0800101b 	.word	0x0800101b
 8000c00:	0800101b 	.word	0x0800101b
 8000c04:	08000ecb 	.word	0x08000ecb
 8000c08:	08000c25 	.word	0x08000c25
 8000c0c:	0800101b 	.word	0x0800101b
 8000c10:	0800101b 	.word	0x0800101b
 8000c14:	0800101b 	.word	0x0800101b
 8000c18:	0800101b 	.word	0x0800101b
 8000c1c:	0800101b 	.word	0x0800101b
 8000c20:	08000c2d 	.word	0x08000c2d
	case 'q':
	case 'Q':
		questionFlag = 1;
 8000c24:	4b80      	ldr	r3, [pc, #512]	; (8000e28 <interpreteComando+0x2ec>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
		break;
 8000c2a:	e1f6      	b.n	800101a <interpreteComando+0x4de>
	case 'W':
	case 'w':
		switch (buffer[1]) {
 8000c2c:	4b7d      	ldr	r3, [pc, #500]	; (8000e24 <interpreteComando+0x2e8>)
 8000c2e:	785b      	ldrb	r3, [r3, #1]
 8000c30:	2b32      	cmp	r3, #50	; 0x32
 8000c32:	f000 808f 	beq.w	8000d54 <interpreteComando+0x218>
 8000c36:	2b3f      	cmp	r3, #63	; 0x3f
 8000c38:	f000 813c 	beq.w	8000eb4 <interpreteComando+0x378>
 8000c3c:	2b31      	cmp	r3, #49	; 0x31
 8000c3e:	d000      	beq.n	8000c42 <interpreteComando+0x106>
//					HAL_SPI_Transmit(&hspi2, &out_buffer[i], 1, 100);//, &_data[i], 1, 100);
//				}
			questionFlag = 1;
			break;
		}
		break;
 8000c40:	e1eb      	b.n	800101a <interpreteComando+0x4de>
			if (buffer[2]) {
 8000c42:	4b78      	ldr	r3, [pc, #480]	; (8000e24 <interpreteComando+0x2e8>)
 8000c44:	789b      	ldrb	r3, [r3, #2]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f000 813b 	beq.w	8000ec2 <interpreteComando+0x386>
				if (buffer[2] == 43) {
 8000c4c:	4b75      	ldr	r3, [pc, #468]	; (8000e24 <interpreteComando+0x2e8>)
 8000c4e:	789b      	ldrb	r3, [r3, #2]
 8000c50:	2b2b      	cmp	r3, #43	; 0x2b
 8000c52:	d12d      	bne.n	8000cb0 <interpreteComando+0x174>
					stop1 = 0;
 8000c54:	4b75      	ldr	r3, [pc, #468]	; (8000e2c <interpreteComando+0x2f0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2110      	movs	r1, #16
 8000c5e:	4874      	ldr	r0, [pc, #464]	; (8000e30 <interpreteComando+0x2f4>)
 8000c60:	f001 ff5e 	bl	8002b20 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2120      	movs	r1, #32
 8000c68:	4871      	ldr	r0, [pc, #452]	; (8000e30 <interpreteComando+0x2f4>)
 8000c6a:	f001 ff59 	bl	8002b20 <HAL_GPIO_WritePin>
					if (buffer[3]) {
 8000c6e:	4b6d      	ldr	r3, [pc, #436]	; (8000e24 <interpreteComando+0x2e8>)
 8000c70:	78db      	ldrb	r3, [r3, #3]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f000 8125 	beq.w	8000ec2 <interpreteComando+0x386>
						consigna = atof(&buffer[3]);
 8000c78:	486e      	ldr	r0, [pc, #440]	; (8000e34 <interpreteComando+0x2f8>)
 8000c7a:	f004 fd22 	bl	80056c2 <atof>
 8000c7e:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000c82:	f04f 0200 	mov.w	r2, #0
 8000c86:	4b6c      	ldr	r3, [pc, #432]	; (8000e38 <interpreteComando+0x2fc>)
 8000c88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c8c:	f7ff fe96 	bl	80009bc <__aeabi_dcmplt>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d005      	beq.n	8000ca2 <interpreteComando+0x166>
							velocidad_consigna = consigna;
 8000c96:	4a69      	ldr	r2, [pc, #420]	; (8000e3c <interpreteComando+0x300>)
 8000c98:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000c9c:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8000ca0:	e10f      	b.n	8000ec2 <interpreteComando+0x386>
							velocidad_consigna = 35;
 8000ca2:	4a66      	ldr	r2, [pc, #408]	; (8000e3c <interpreteComando+0x300>)
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	4c63      	ldr	r4, [pc, #396]	; (8000e38 <interpreteComando+0x2fc>)
 8000caa:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8000cae:	e108      	b.n	8000ec2 <interpreteComando+0x386>
				} else if (buffer[2] == 45) {
 8000cb0:	4b5c      	ldr	r3, [pc, #368]	; (8000e24 <interpreteComando+0x2e8>)
 8000cb2:	789b      	ldrb	r3, [r3, #2]
 8000cb4:	2b2d      	cmp	r3, #45	; 0x2d
 8000cb6:	d133      	bne.n	8000d20 <interpreteComando+0x1e4>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2110      	movs	r1, #16
 8000cbc:	485c      	ldr	r0, [pc, #368]	; (8000e30 <interpreteComando+0x2f4>)
 8000cbe:	f001 ff2f 	bl	8002b20 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	485a      	ldr	r0, [pc, #360]	; (8000e30 <interpreteComando+0x2f4>)
 8000cc8:	f001 ff2a 	bl	8002b20 <HAL_GPIO_WritePin>
					stop1 = 0;
 8000ccc:	4b57      	ldr	r3, [pc, #348]	; (8000e2c <interpreteComando+0x2f0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
					if (buffer[3]) {
 8000cd2:	4b54      	ldr	r3, [pc, #336]	; (8000e24 <interpreteComando+0x2e8>)
 8000cd4:	78db      	ldrb	r3, [r3, #3]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f000 80f3 	beq.w	8000ec2 <interpreteComando+0x386>
						consigna = atof(&buffer[3]);
 8000cdc:	4855      	ldr	r0, [pc, #340]	; (8000e34 <interpreteComando+0x2f8>)
 8000cde:	f004 fcf0 	bl	80056c2 <atof>
 8000ce2:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000ce6:	f04f 0200 	mov.w	r2, #0
 8000cea:	4b53      	ldr	r3, [pc, #332]	; (8000e38 <interpreteComando+0x2fc>)
 8000cec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cf0:	f7ff fe64 	bl	80009bc <__aeabi_dcmplt>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00b      	beq.n	8000d12 <interpreteComando+0x1d6>
							velocidad_consigna = -consigna;
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b4d      	ldr	r3, [pc, #308]	; (8000e3c <interpreteComando+0x300>)
 8000d08:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000d0c:	e9c3 1200 	strd	r1, r2, [r3]
			break;
 8000d10:	e0d7      	b.n	8000ec2 <interpreteComando+0x386>
							velocidad_consigna = -35;
 8000d12:	4a4a      	ldr	r2, [pc, #296]	; (8000e3c <interpreteComando+0x300>)
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	4c49      	ldr	r4, [pc, #292]	; (8000e40 <interpreteComando+0x304>)
 8000d1a:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8000d1e:	e0d0      	b.n	8000ec2 <interpreteComando+0x386>
				} else if (buffer[2] == 48) {
 8000d20:	4b40      	ldr	r3, [pc, #256]	; (8000e24 <interpreteComando+0x2e8>)
 8000d22:	789b      	ldrb	r3, [r3, #2]
 8000d24:	2b30      	cmp	r3, #48	; 0x30
 8000d26:	f040 80cc 	bne.w	8000ec2 <interpreteComando+0x386>
					velocidad_consigna = 0;
 8000d2a:	4a44      	ldr	r2, [pc, #272]	; (8000e3c <interpreteComando+0x300>)
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	f04f 0400 	mov.w	r4, #0
 8000d34:	e9c2 3400 	strd	r3, r4, [r2]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2110      	movs	r1, #16
 8000d3c:	483c      	ldr	r0, [pc, #240]	; (8000e30 <interpreteComando+0x2f4>)
 8000d3e:	f001 feef 	bl	8002b20 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000d42:	2201      	movs	r2, #1
 8000d44:	2120      	movs	r1, #32
 8000d46:	483a      	ldr	r0, [pc, #232]	; (8000e30 <interpreteComando+0x2f4>)
 8000d48:	f001 feea 	bl	8002b20 <HAL_GPIO_WritePin>
					stop1 = 1;
 8000d4c:	4b37      	ldr	r3, [pc, #220]	; (8000e2c <interpreteComando+0x2f0>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
			break;
 8000d52:	e0b6      	b.n	8000ec2 <interpreteComando+0x386>
			if (buffer[2]) {
 8000d54:	4b33      	ldr	r3, [pc, #204]	; (8000e24 <interpreteComando+0x2e8>)
 8000d56:	789b      	ldrb	r3, [r3, #2]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 80b4 	beq.w	8000ec6 <interpreteComando+0x38a>
				if (buffer[2] == 43) {
 8000d5e:	4b31      	ldr	r3, [pc, #196]	; (8000e24 <interpreteComando+0x2e8>)
 8000d60:	789b      	ldrb	r3, [r3, #2]
 8000d62:	2b2b      	cmp	r3, #43	; 0x2b
 8000d64:	d12f      	bne.n	8000dc6 <interpreteComando+0x28a>
					stop2 = 0;
 8000d66:	4b37      	ldr	r3, [pc, #220]	; (8000e44 <interpreteComando+0x308>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d72:	482f      	ldr	r0, [pc, #188]	; (8000e30 <interpreteComando+0x2f4>)
 8000d74:	f001 fed4 	bl	8002b20 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d7e:	482c      	ldr	r0, [pc, #176]	; (8000e30 <interpreteComando+0x2f4>)
 8000d80:	f001 fece 	bl	8002b20 <HAL_GPIO_WritePin>
					if (buffer[3]) {
 8000d84:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <interpreteComando+0x2e8>)
 8000d86:	78db      	ldrb	r3, [r3, #3]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f000 809c 	beq.w	8000ec6 <interpreteComando+0x38a>
						consigna = atof(&buffer[3]);
 8000d8e:	4829      	ldr	r0, [pc, #164]	; (8000e34 <interpreteComando+0x2f8>)
 8000d90:	f004 fc97 	bl	80056c2 <atof>
 8000d94:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000d98:	f04f 0200 	mov.w	r2, #0
 8000d9c:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <interpreteComando+0x2fc>)
 8000d9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000da2:	f7ff fe0b 	bl	80009bc <__aeabi_dcmplt>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d005      	beq.n	8000db8 <interpreteComando+0x27c>
							velocidad_consigna2 = consigna;
 8000dac:	4a26      	ldr	r2, [pc, #152]	; (8000e48 <interpreteComando+0x30c>)
 8000dae:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000db2:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8000db6:	e086      	b.n	8000ec6 <interpreteComando+0x38a>
							velocidad_consigna2 = 35;
 8000db8:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <interpreteComando+0x30c>)
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	4c1e      	ldr	r4, [pc, #120]	; (8000e38 <interpreteComando+0x2fc>)
 8000dc0:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8000dc4:	e07f      	b.n	8000ec6 <interpreteComando+0x38a>
				} else if (buffer[2] == 45) {
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <interpreteComando+0x2e8>)
 8000dc8:	789b      	ldrb	r3, [r3, #2]
 8000dca:	2b2d      	cmp	r3, #45	; 0x2d
 8000dcc:	d157      	bne.n	8000e7e <interpreteComando+0x342>
					stop2 = 0;
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <interpreteComando+0x308>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dda:	4815      	ldr	r0, [pc, #84]	; (8000e30 <interpreteComando+0x2f4>)
 8000ddc:	f001 fea0 	bl	8002b20 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de6:	4812      	ldr	r0, [pc, #72]	; (8000e30 <interpreteComando+0x2f4>)
 8000de8:	f001 fe9a 	bl	8002b20 <HAL_GPIO_WritePin>
					if (buffer[3]) {
 8000dec:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <interpreteComando+0x2e8>)
 8000dee:	78db      	ldrb	r3, [r3, #3]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d068      	beq.n	8000ec6 <interpreteComando+0x38a>
						consigna = atof(&buffer[3]);
 8000df4:	480f      	ldr	r0, [pc, #60]	; (8000e34 <interpreteComando+0x2f8>)
 8000df6:	f004 fc64 	bl	80056c2 <atof>
 8000dfa:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna == 0) {
 8000dfe:	f04f 0200 	mov.w	r2, #0
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e0a:	f7ff fdcd 	bl	80009a8 <__aeabi_dcmpeq>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d01b      	beq.n	8000e4c <interpreteComando+0x310>
							velocidad_consigna2 = 0;
 8000e14:	4a0c      	ldr	r2, [pc, #48]	; (8000e48 <interpreteComando+0x30c>)
 8000e16:	f04f 0300 	mov.w	r3, #0
 8000e1a:	f04f 0400 	mov.w	r4, #0
 8000e1e:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8000e22:	e050      	b.n	8000ec6 <interpreteComando+0x38a>
 8000e24:	20000420 	.word	0x20000420
 8000e28:	20000250 	.word	0x20000250
 8000e2c:	2000004c 	.word	0x2000004c
 8000e30:	40010800 	.word	0x40010800
 8000e34:	20000423 	.word	0x20000423
 8000e38:	40418000 	.word	0x40418000
 8000e3c:	200002b8 	.word	0x200002b8
 8000e40:	c0418000 	.word	0xc0418000
 8000e44:	20000050 	.word	0x20000050
 8000e48:	200002c0 	.word	0x200002c0
						} else if (consigna < 35) {
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	4b74      	ldr	r3, [pc, #464]	; (8001024 <interpreteComando+0x4e8>)
 8000e52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e56:	f7ff fdb1 	bl	80009bc <__aeabi_dcmplt>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d007      	beq.n	8000e70 <interpreteComando+0x334>
							velocidad_consigna2 = -consigna;
 8000e60:	68bc      	ldr	r4, [r7, #8]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000e68:	4b6f      	ldr	r3, [pc, #444]	; (8001028 <interpreteComando+0x4ec>)
 8000e6a:	e9c3 4500 	strd	r4, r5, [r3]
			break;
 8000e6e:	e02a      	b.n	8000ec6 <interpreteComando+0x38a>
							velocidad_consigna2 = -35;
 8000e70:	4a6d      	ldr	r2, [pc, #436]	; (8001028 <interpreteComando+0x4ec>)
 8000e72:	f04f 0300 	mov.w	r3, #0
 8000e76:	4c6d      	ldr	r4, [pc, #436]	; (800102c <interpreteComando+0x4f0>)
 8000e78:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8000e7c:	e023      	b.n	8000ec6 <interpreteComando+0x38a>
				} else if (buffer[2] == 48) {
 8000e7e:	4b6c      	ldr	r3, [pc, #432]	; (8001030 <interpreteComando+0x4f4>)
 8000e80:	789b      	ldrb	r3, [r3, #2]
 8000e82:	2b30      	cmp	r3, #48	; 0x30
 8000e84:	d11f      	bne.n	8000ec6 <interpreteComando+0x38a>
					velocidad_consigna2 = 0;
 8000e86:	4a68      	ldr	r2, [pc, #416]	; (8001028 <interpreteComando+0x4ec>)
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	f04f 0400 	mov.w	r4, #0
 8000e90:	e9c2 3400 	strd	r3, r4, [r2]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e9a:	4866      	ldr	r0, [pc, #408]	; (8001034 <interpreteComando+0x4f8>)
 8000e9c:	f001 fe40 	bl	8002b20 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea6:	4863      	ldr	r0, [pc, #396]	; (8001034 <interpreteComando+0x4f8>)
 8000ea8:	f001 fe3a 	bl	8002b20 <HAL_GPIO_WritePin>
					stop2 = 0;
 8000eac:	4b62      	ldr	r3, [pc, #392]	; (8001038 <interpreteComando+0x4fc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
			break;
 8000eb2:	e008      	b.n	8000ec6 <interpreteComando+0x38a>
			indexBuf = 0;
 8000eb4:	4b61      	ldr	r3, [pc, #388]	; (800103c <interpreteComando+0x500>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
			questionFlag = 1;
 8000eba:	4b61      	ldr	r3, [pc, #388]	; (8001040 <interpreteComando+0x504>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
			break;
 8000ec0:	e002      	b.n	8000ec8 <interpreteComando+0x38c>
			break;
 8000ec2:	bf00      	nop
 8000ec4:	e0a9      	b.n	800101a <interpreteComando+0x4de>
			break;
 8000ec6:	bf00      	nop
		break;
 8000ec8:	e0a7      	b.n	800101a <interpreteComando+0x4de>
	case 'p':
	case 'P':
		switch (buffer[1]) {
 8000eca:	4b59      	ldr	r3, [pc, #356]	; (8001030 <interpreteComando+0x4f4>)
 8000ecc:	785b      	ldrb	r3, [r3, #1]
 8000ece:	2b31      	cmp	r3, #49	; 0x31
 8000ed0:	d002      	beq.n	8000ed8 <interpreteComando+0x39c>
 8000ed2:	2b32      	cmp	r3, #50	; 0x32
 8000ed4:	d016      	beq.n	8000f04 <interpreteComando+0x3c8>
 8000ed6:	e02b      	b.n	8000f30 <interpreteComando+0x3f4>
		/*codigo ascii de '1' = 49*/
		case 49:
			consigna = atof(&buffer[2]);
 8000ed8:	485a      	ldr	r0, [pc, #360]	; (8001044 <interpreteComando+0x508>)
 8000eda:	f004 fbf2 	bl	80056c2 <atof>
 8000ede:	e9c7 0102 	strd	r0, r1, [r7, #8]
			KP1 = (float) consigna;
 8000ee2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ee6:	f7ff fdd9 	bl	8000a9c <__aeabi_d2f>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fa9b 	bl	8000428 <__aeabi_f2d>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	460c      	mov	r4, r1
 8000ef6:	4a54      	ldr	r2, [pc, #336]	; (8001048 <interpreteComando+0x50c>)
 8000ef8:	e9c2 3400 	strd	r3, r4, [r2]
			printf("\r\n");
 8000efc:	4853      	ldr	r0, [pc, #332]	; (800104c <interpreteComando+0x510>)
 8000efe:	f004 fc71 	bl	80057e4 <puts>
			break;
 8000f02:	e019      	b.n	8000f38 <interpreteComando+0x3fc>
			/*codigo ascii de '2' = 50*/
		case 50:
			consigna = atof(&buffer[2]);
 8000f04:	484f      	ldr	r0, [pc, #316]	; (8001044 <interpreteComando+0x508>)
 8000f06:	f004 fbdc 	bl	80056c2 <atof>
 8000f0a:	e9c7 0102 	strd	r0, r1, [r7, #8]
			KP2 = (float) consigna;
 8000f0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f12:	f7ff fdc3 	bl	8000a9c <__aeabi_d2f>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fa85 	bl	8000428 <__aeabi_f2d>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460c      	mov	r4, r1
 8000f22:	4a4b      	ldr	r2, [pc, #300]	; (8001050 <interpreteComando+0x514>)
 8000f24:	e9c2 3400 	strd	r3, r4, [r2]
			printf("\r\n");
 8000f28:	4848      	ldr	r0, [pc, #288]	; (800104c <interpreteComando+0x510>)
 8000f2a:	f004 fc5b 	bl	80057e4 <puts>
			break;
 8000f2e:	e003      	b.n	8000f38 <interpreteComando+0x3fc>
		default:
			printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8000f30:	4848      	ldr	r0, [pc, #288]	; (8001054 <interpreteComando+0x518>)
 8000f32:	f004 fc57 	bl	80057e4 <puts>
			break;
 8000f36:	bf00      	nop

		}
		break;
 8000f38:	e06f      	b.n	800101a <interpreteComando+0x4de>
	case 'i':
	case 'I':
		switch (buffer[1]) {
 8000f3a:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <interpreteComando+0x4f4>)
 8000f3c:	785b      	ldrb	r3, [r3, #1]
 8000f3e:	2b31      	cmp	r3, #49	; 0x31
 8000f40:	d002      	beq.n	8000f48 <interpreteComando+0x40c>
 8000f42:	2b32      	cmp	r3, #50	; 0x32
 8000f44:	d016      	beq.n	8000f74 <interpreteComando+0x438>
 8000f46:	e02b      	b.n	8000fa0 <interpreteComando+0x464>
		/*codigo ascii de '1' = 49*/
		case 49:
			consigna = atof(&buffer[2]);
 8000f48:	483e      	ldr	r0, [pc, #248]	; (8001044 <interpreteComando+0x508>)
 8000f4a:	f004 fbba 	bl	80056c2 <atof>
 8000f4e:	e9c7 0102 	strd	r0, r1, [r7, #8]
			KI1 = (float) consigna;
 8000f52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f56:	f7ff fda1 	bl	8000a9c <__aeabi_d2f>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fa63 	bl	8000428 <__aeabi_f2d>
 8000f62:	4603      	mov	r3, r0
 8000f64:	460c      	mov	r4, r1
 8000f66:	4a3c      	ldr	r2, [pc, #240]	; (8001058 <interpreteComando+0x51c>)
 8000f68:	e9c2 3400 	strd	r3, r4, [r2]
			printf("\r\n");
 8000f6c:	4837      	ldr	r0, [pc, #220]	; (800104c <interpreteComando+0x510>)
 8000f6e:	f004 fc39 	bl	80057e4 <puts>
			break;
 8000f72:	e019      	b.n	8000fa8 <interpreteComando+0x46c>
			/*codigo ascii de '2' = 50*/
		case 50:
			consigna = atof(&buffer[2]);
 8000f74:	4833      	ldr	r0, [pc, #204]	; (8001044 <interpreteComando+0x508>)
 8000f76:	f004 fba4 	bl	80056c2 <atof>
 8000f7a:	e9c7 0102 	strd	r0, r1, [r7, #8]
			KI2 = (float) consigna;
 8000f7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f82:	f7ff fd8b 	bl	8000a9c <__aeabi_d2f>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fa4d 	bl	8000428 <__aeabi_f2d>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	460c      	mov	r4, r1
 8000f92:	4a32      	ldr	r2, [pc, #200]	; (800105c <interpreteComando+0x520>)
 8000f94:	e9c2 3400 	strd	r3, r4, [r2]
			printf("\r\n");
 8000f98:	482c      	ldr	r0, [pc, #176]	; (800104c <interpreteComando+0x510>)
 8000f9a:	f004 fc23 	bl	80057e4 <puts>
			break;
 8000f9e:	e003      	b.n	8000fa8 <interpreteComando+0x46c>
		default:
			printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8000fa0:	482c      	ldr	r0, [pc, #176]	; (8001054 <interpreteComando+0x518>)
 8000fa2:	f004 fc1f 	bl	80057e4 <puts>
			break;
 8000fa6:	bf00      	nop
		}
		break;
 8000fa8:	e037      	b.n	800101a <interpreteComando+0x4de>
	case 'd':
	case 'D':
		switch (buffer[1]) {
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <interpreteComando+0x4f4>)
 8000fac:	785b      	ldrb	r3, [r3, #1]
 8000fae:	2b31      	cmp	r3, #49	; 0x31
 8000fb0:	d002      	beq.n	8000fb8 <interpreteComando+0x47c>
 8000fb2:	2b32      	cmp	r3, #50	; 0x32
 8000fb4:	d016      	beq.n	8000fe4 <interpreteComando+0x4a8>
 8000fb6:	e02b      	b.n	8001010 <interpreteComando+0x4d4>
		/*codigo ascii de '1' = 49*/
		case 49:
			consigna = atof(&buffer[2]);
 8000fb8:	4822      	ldr	r0, [pc, #136]	; (8001044 <interpreteComando+0x508>)
 8000fba:	f004 fb82 	bl	80056c2 <atof>
 8000fbe:	e9c7 0102 	strd	r0, r1, [r7, #8]
			KD1 = (float) consigna;
 8000fc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fc6:	f7ff fd69 	bl	8000a9c <__aeabi_d2f>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fa2b 	bl	8000428 <__aeabi_f2d>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	460c      	mov	r4, r1
 8000fd6:	4a22      	ldr	r2, [pc, #136]	; (8001060 <interpreteComando+0x524>)
 8000fd8:	e9c2 3400 	strd	r3, r4, [r2]
			printf("\r\n");
 8000fdc:	481b      	ldr	r0, [pc, #108]	; (800104c <interpreteComando+0x510>)
 8000fde:	f004 fc01 	bl	80057e4 <puts>
			break;
 8000fe2:	e019      	b.n	8001018 <interpreteComando+0x4dc>
			/*codigo ascii de '2' = 50*/
		case 50:
			consigna = atof(&buffer[2]);
 8000fe4:	4817      	ldr	r0, [pc, #92]	; (8001044 <interpreteComando+0x508>)
 8000fe6:	f004 fb6c 	bl	80056c2 <atof>
 8000fea:	e9c7 0102 	strd	r0, r1, [r7, #8]
			KD2 = (float) consigna;
 8000fee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ff2:	f7ff fd53 	bl	8000a9c <__aeabi_d2f>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fa15 	bl	8000428 <__aeabi_f2d>
 8000ffe:	4603      	mov	r3, r0
 8001000:	460c      	mov	r4, r1
 8001002:	4a18      	ldr	r2, [pc, #96]	; (8001064 <interpreteComando+0x528>)
 8001004:	e9c2 3400 	strd	r3, r4, [r2]
			printf("\r\n");
 8001008:	4810      	ldr	r0, [pc, #64]	; (800104c <interpreteComando+0x510>)
 800100a:	f004 fbeb 	bl	80057e4 <puts>
			break;
 800100e:	e003      	b.n	8001018 <interpreteComando+0x4dc>
		default:
			printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8001010:	4810      	ldr	r0, [pc, #64]	; (8001054 <interpreteComando+0x518>)
 8001012:	f004 fbe7 	bl	80057e4 <puts>
			break;
 8001016:	bf00      	nop
		}
		break;
 8001018:	bf00      	nop
	}

}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bdb0      	pop	{r4, r5, r7, pc}
 8001022:	bf00      	nop
 8001024:	40418000 	.word	0x40418000
 8001028:	200002c0 	.word	0x200002c0
 800102c:	c0418000 	.word	0xc0418000
 8001030:	20000420 	.word	0x20000420
 8001034:	40010800 	.word	0x40010800
 8001038:	20000050 	.word	0x20000050
 800103c:	20000294 	.word	0x20000294
 8001040:	20000250 	.word	0x20000250
 8001044:	20000422 	.word	0x20000422
 8001048:	20000018 	.word	0x20000018
 800104c:	08007b60 	.word	0x08007b60
 8001050:	20000030 	.word	0x20000030
 8001054:	08007b64 	.word	0x08007b64
 8001058:	20000020 	.word	0x20000020
 800105c:	20000038 	.word	0x20000038
 8001060:	20000028 	.word	0x20000028
 8001064:	20000040 	.word	0x20000040

08001068 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800106c:	b087      	sub	sp, #28
 800106e:	af00      	add	r7, sp, #0
 8001070:	6178      	str	r0, [r7, #20]
	if (htim->Instance == TIM1) {
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a96      	ldr	r2, [pc, #600]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001078:	4293      	cmp	r3, r2
 800107a:	f040 82e8 	bne.w	800164e <HAL_TIM_PeriodElapsedCallback+0x5e6>

		//pulsosAct = contOUFlow*(htim3.Instance->ARR) + __HAL_TIM_GET_COUNTER(&htim3);
		pulsosAct = (contOUFlow * 65000) + __HAL_TIM_GET_COUNTER(&htim3);
 800107e:	4b95      	ldr	r3, [pc, #596]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001086:	fb02 f303 	mul.w	r3, r2, r3
 800108a:	461a      	mov	r2, r3
 800108c:	4b92      	ldr	r3, [pc, #584]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	4413      	add	r3, r2
 8001094:	461a      	mov	r2, r3
 8001096:	4b91      	ldr	r3, [pc, #580]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001098:	601a      	str	r2, [r3, #0]
		velocidadPulsos = (pulsosAct - pulsosAnt) / deltaT;
 800109a:	4b90      	ldr	r3, [pc, #576]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x274>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	4b90      	ldr	r3, [pc, #576]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f9ad 	bl	8000404 <__aeabi_i2d>
 80010aa:	4b8e      	ldr	r3, [pc, #568]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80010ac:	cb18      	ldmia	r3, {r3, r4}
 80010ae:	461a      	mov	r2, r3
 80010b0:	4623      	mov	r3, r4
 80010b2:	f7ff fb3b 	bl	800072c <__aeabi_ddiv>
 80010b6:	4603      	mov	r3, r0
 80010b8:	460c      	mov	r4, r1
 80010ba:	4a8b      	ldr	r2, [pc, #556]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80010bc:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM = velocidadPulsos / (168 * 44) * 60;
 80010c0:	4b89      	ldr	r3, [pc, #548]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80010c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010c6:	a380      	add	r3, pc, #512	; (adr r3, 80012c8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	f7ff fb2e 	bl	800072c <__aeabi_ddiv>
 80010d0:	4603      	mov	r3, r0
 80010d2:	460c      	mov	r4, r1
 80010d4:	4618      	mov	r0, r3
 80010d6:	4621      	mov	r1, r4
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	4b83      	ldr	r3, [pc, #524]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x284>)
 80010de:	f7ff f9fb 	bl	80004d8 <__aeabi_dmul>
 80010e2:	4603      	mov	r3, r0
 80010e4:	460c      	mov	r4, r1
 80010e6:	4a82      	ldr	r2, [pc, #520]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80010e8:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt = pulsosAct;
 80010ec:	4b7b      	ldr	r3, [pc, #492]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x274>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a7b      	ldr	r2, [pc, #492]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80010f2:	6013      	str	r3, [r2, #0]

		pulsosAct2 = (contOUFlow2 * 65000) + __HAL_TIM_GET_COUNTER(&htim4);
 80010f4:	4b7f      	ldr	r3, [pc, #508]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80010fc:	fb02 f303 	mul.w	r3, r2, r3
 8001100:	461a      	mov	r2, r3
 8001102:	4b7d      	ldr	r3, [pc, #500]	; (80012f8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	4413      	add	r3, r2
 800110a:	461a      	mov	r2, r3
 800110c:	4b7b      	ldr	r3, [pc, #492]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x294>)
 800110e:	601a      	str	r2, [r3, #0]
		velocidadPulsos2 = (pulsosAct2 - pulsosAnt2) / deltaT;
 8001110:	4b7a      	ldr	r3, [pc, #488]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b7a      	ldr	r3, [pc, #488]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f972 	bl	8000404 <__aeabi_i2d>
 8001120:	4b70      	ldr	r3, [pc, #448]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001122:	cb18      	ldmia	r3, {r3, r4}
 8001124:	461a      	mov	r2, r3
 8001126:	4623      	mov	r3, r4
 8001128:	f7ff fb00 	bl	800072c <__aeabi_ddiv>
 800112c:	4603      	mov	r3, r0
 800112e:	460c      	mov	r4, r1
 8001130:	4a74      	ldr	r2, [pc, #464]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001132:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM2 = velocidadPulsos2 / (168 * 44) * 60;
 8001136:	4b73      	ldr	r3, [pc, #460]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001138:	e9d3 0100 	ldrd	r0, r1, [r3]
 800113c:	a362      	add	r3, pc, #392	; (adr r3, 80012c8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff faf3 	bl	800072c <__aeabi_ddiv>
 8001146:	4603      	mov	r3, r0
 8001148:	460c      	mov	r4, r1
 800114a:	4618      	mov	r0, r3
 800114c:	4621      	mov	r1, r4
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	4b66      	ldr	r3, [pc, #408]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001154:	f7ff f9c0 	bl	80004d8 <__aeabi_dmul>
 8001158:	4603      	mov	r3, r0
 800115a:	460c      	mov	r4, r1
 800115c:	4a6a      	ldr	r2, [pc, #424]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800115e:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt2 = pulsosAct2;
 8001162:	4b66      	ldr	r3, [pc, #408]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a66      	ldr	r2, [pc, #408]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001168:	6013      	str	r3, [r2, #0]

		//para el control
		if (control == 1) {
 800116a:	4b68      	ldr	r3, [pc, #416]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b01      	cmp	r3, #1
 8001170:	f040 82a0 	bne.w	80016b4 <HAL_TIM_PeriodElapsedCallback+0x64c>
			//calculo PID:
			/*
			 *----------------  control motor 1
			 */
			error_vel_act = velocidad_consigna - velocidadRPM;
 8001174:	4b66      	ldr	r3, [pc, #408]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001176:	e9d3 0100 	ldrd	r0, r1, [r3]
 800117a:	4b5d      	ldr	r3, [pc, #372]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800117c:	cb18      	ldmia	r3, {r3, r4}
 800117e:	461a      	mov	r2, r3
 8001180:	4623      	mov	r3, r4
 8001182:	f7fe fff1 	bl	8000168 <__aeabi_dsub>
 8001186:	4603      	mov	r3, r0
 8001188:	460c      	mov	r4, r1
 800118a:	4a62      	ldr	r2, [pc, #392]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800118c:	e9c2 3400 	strd	r3, r4, [r2]
//			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
//			}
//			else if(error_vel_act==0){
//				Ui_anterior=0;
//			}
			if (stop1 == 1) {
 8001190:	4b61      	ldr	r3, [pc, #388]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d106      	bne.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0x13e>
				Ui_anterior = 0;
 8001198:	4a60      	ldr	r2, [pc, #384]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	f04f 0400 	mov.w	r4, #0
 80011a2:	e9c2 3400 	strd	r3, r4, [r2]
			}
//			error_vel_acterror_vel_act);
			Up = KP1 * error_vel_act;
 80011a6:	4b5e      	ldr	r3, [pc, #376]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80011a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80011ae:	cb18      	ldmia	r3, {r3, r4}
 80011b0:	461a      	mov	r2, r3
 80011b2:	4623      	mov	r3, r4
 80011b4:	f7ff f990 	bl	80004d8 <__aeabi_dmul>
 80011b8:	4603      	mov	r3, r0
 80011ba:	460c      	mov	r4, r1
 80011bc:	4a59      	ldr	r2, [pc, #356]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80011be:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual = Ui_anterior + (KI1 * deltaT * error_vel_ant);
 80011c2:	4b59      	ldr	r3, [pc, #356]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80011c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011c8:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80011ca:	cb18      	ldmia	r3, {r3, r4}
 80011cc:	461a      	mov	r2, r3
 80011ce:	4623      	mov	r3, r4
 80011d0:	f7ff f982 	bl	80004d8 <__aeabi_dmul>
 80011d4:	4603      	mov	r3, r0
 80011d6:	460c      	mov	r4, r1
 80011d8:	4618      	mov	r0, r3
 80011da:	4621      	mov	r1, r4
 80011dc:	4b53      	ldr	r3, [pc, #332]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80011de:	cb18      	ldmia	r3, {r3, r4}
 80011e0:	461a      	mov	r2, r3
 80011e2:	4623      	mov	r3, r4
 80011e4:	f7ff f978 	bl	80004d8 <__aeabi_dmul>
 80011e8:	4603      	mov	r3, r0
 80011ea:	460c      	mov	r4, r1
 80011ec:	4618      	mov	r0, r3
 80011ee:	4621      	mov	r1, r4
 80011f0:	4b4a      	ldr	r3, [pc, #296]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80011f2:	cb18      	ldmia	r3, {r3, r4}
 80011f4:	461a      	mov	r2, r3
 80011f6:	4623      	mov	r3, r4
 80011f8:	f7fe ffb8 	bl	800016c <__adddf3>
 80011fc:	4603      	mov	r3, r0
 80011fe:	460c      	mov	r4, r1
 8001200:	4a4b      	ldr	r2, [pc, #300]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001202:	e9c2 3400 	strd	r3, r4, [r2]
			Ud = (KD1 / deltaT) * (error_vel_act - error_vel_ant);
 8001206:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001208:	e9d3 0100 	ldrd	r0, r1, [r3]
 800120c:	4b35      	ldr	r3, [pc, #212]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800120e:	cb18      	ldmia	r3, {r3, r4}
 8001210:	461a      	mov	r2, r3
 8001212:	4623      	mov	r3, r4
 8001214:	f7ff fa8a 	bl	800072c <__aeabi_ddiv>
 8001218:	4603      	mov	r3, r0
 800121a:	460c      	mov	r4, r1
 800121c:	461d      	mov	r5, r3
 800121e:	4626      	mov	r6, r4
 8001220:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001226:	4b41      	ldr	r3, [pc, #260]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001228:	cb18      	ldmia	r3, {r3, r4}
 800122a:	461a      	mov	r2, r3
 800122c:	4623      	mov	r3, r4
 800122e:	f7fe ff9b 	bl	8000168 <__aeabi_dsub>
 8001232:	4603      	mov	r3, r0
 8001234:	460c      	mov	r4, r1
 8001236:	461a      	mov	r2, r3
 8001238:	4623      	mov	r3, r4
 800123a:	4628      	mov	r0, r5
 800123c:	4631      	mov	r1, r6
 800123e:	f7ff f94b 	bl	80004d8 <__aeabi_dmul>
 8001242:	4603      	mov	r3, r0
 8001244:	460c      	mov	r4, r1
 8001246:	4a3c      	ldr	r2, [pc, #240]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001248:	e9c2 3400 	strd	r3, r4, [r2]
			if (velocidad_consigna > 0) {
 800124c:	4b30      	ldr	r3, [pc, #192]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800124e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	f04f 0300 	mov.w	r3, #0
 800125a:	f7ff fbcd 	bl	80009f8 <__aeabi_dcmpgt>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d06d      	beq.n	8001340 <HAL_TIM_PeriodElapsedCallback+0x2d8>
				duty_cycle_pid = (uint32_t) fabs(
						duty_cycle_pid + (Up + Ui_actual + Ud));
 8001264:	4b35      	ldr	r3, [pc, #212]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f8bb 	bl	80003e4 <__aeabi_ui2d>
 800126e:	4605      	mov	r5, r0
 8001270:	460e      	mov	r6, r1
 8001272:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001274:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001278:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800127a:	cb18      	ldmia	r3, {r3, r4}
 800127c:	461a      	mov	r2, r3
 800127e:	4623      	mov	r3, r4
 8001280:	f7fe ff74 	bl	800016c <__adddf3>
 8001284:	4603      	mov	r3, r0
 8001286:	460c      	mov	r4, r1
 8001288:	4618      	mov	r0, r3
 800128a:	4621      	mov	r1, r4
 800128c:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800128e:	cb18      	ldmia	r3, {r3, r4}
 8001290:	461a      	mov	r2, r3
 8001292:	4623      	mov	r3, r4
 8001294:	f7fe ff6a 	bl	800016c <__adddf3>
 8001298:	4603      	mov	r3, r0
 800129a:	460c      	mov	r4, r1
 800129c:	461a      	mov	r2, r3
 800129e:	4623      	mov	r3, r4
 80012a0:	4628      	mov	r0, r5
 80012a2:	4631      	mov	r1, r6
 80012a4:	f7fe ff62 	bl	800016c <__adddf3>
 80012a8:	4603      	mov	r3, r0
 80012aa:	460c      	mov	r4, r1
				duty_cycle_pid = (uint32_t) fabs(
 80012ac:	469a      	mov	sl, r3
 80012ae:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 80012b2:	4650      	mov	r0, sl
 80012b4:	4659      	mov	r1, fp
 80012b6:	f7ff fbd1 	bl	8000a5c <__aeabi_d2uiz>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	e07c      	b.n	80013bc <HAL_TIM_PeriodElapsedCallback+0x354>
 80012c2:	bf00      	nop
 80012c4:	f3af 8000 	nop.w
 80012c8:	00000000 	.word	0x00000000
 80012cc:	40bce000 	.word	0x40bce000
 80012d0:	40012c00 	.word	0x40012c00
 80012d4:	20000254 	.word	0x20000254
 80012d8:	200003d4 	.word	0x200003d4
 80012dc:	2000025c 	.word	0x2000025c
 80012e0:	20000258 	.word	0x20000258
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000270 	.word	0x20000270
 80012ec:	404e0000 	.word	0x404e0000
 80012f0:	20000278 	.word	0x20000278
 80012f4:	20000260 	.word	0x20000260
 80012f8:	20000374 	.word	0x20000374
 80012fc:	20000268 	.word	0x20000268
 8001300:	20000264 	.word	0x20000264
 8001304:	20000280 	.word	0x20000280
 8001308:	20000288 	.word	0x20000288
 800130c:	20000048 	.word	0x20000048
 8001310:	200002b8 	.word	0x200002b8
 8001314:	20000298 	.word	0x20000298
 8001318:	2000004c 	.word	0x2000004c
 800131c:	200002c8 	.word	0x200002c8
 8001320:	20000018 	.word	0x20000018
 8001324:	200002d8 	.word	0x200002d8
 8001328:	20000020 	.word	0x20000020
 800132c:	200002a0 	.word	0x200002a0
 8001330:	200002d0 	.word	0x200002d0
 8001334:	20000028 	.word	0x20000028
 8001338:	200002e0 	.word	0x200002e0
 800133c:	20000308 	.word	0x20000308
			} else if (velocidad_consigna < 0) {
 8001340:	4b9d      	ldr	r3, [pc, #628]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001342:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	f7ff fb35 	bl	80009bc <__aeabi_dcmplt>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d02e      	beq.n	80013b6 <HAL_TIM_PeriodElapsedCallback+0x34e>
				duty_cycle_pid = (uint32_t) fabs(
						duty_cycle_pid - (Up + Ui_actual + Ud));
 8001358:	4b98      	ldr	r3, [pc, #608]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x554>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f841 	bl	80003e4 <__aeabi_ui2d>
 8001362:	4605      	mov	r5, r0
 8001364:	460e      	mov	r6, r1
 8001366:	4b96      	ldr	r3, [pc, #600]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8001368:	e9d3 0100 	ldrd	r0, r1, [r3]
 800136c:	4b95      	ldr	r3, [pc, #596]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 800136e:	cb18      	ldmia	r3, {r3, r4}
 8001370:	461a      	mov	r2, r3
 8001372:	4623      	mov	r3, r4
 8001374:	f7fe fefa 	bl	800016c <__adddf3>
 8001378:	4603      	mov	r3, r0
 800137a:	460c      	mov	r4, r1
 800137c:	4618      	mov	r0, r3
 800137e:	4621      	mov	r1, r4
 8001380:	4b91      	ldr	r3, [pc, #580]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001382:	cb18      	ldmia	r3, {r3, r4}
 8001384:	461a      	mov	r2, r3
 8001386:	4623      	mov	r3, r4
 8001388:	f7fe fef0 	bl	800016c <__adddf3>
 800138c:	4603      	mov	r3, r0
 800138e:	460c      	mov	r4, r1
 8001390:	461a      	mov	r2, r3
 8001392:	4623      	mov	r3, r4
 8001394:	4628      	mov	r0, r5
 8001396:	4631      	mov	r1, r6
 8001398:	f7fe fee6 	bl	8000168 <__aeabi_dsub>
 800139c:	4603      	mov	r3, r0
 800139e:	460c      	mov	r4, r1
				duty_cycle_pid = (uint32_t) fabs(
 80013a0:	4698      	mov	r8, r3
 80013a2:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 80013a6:	4640      	mov	r0, r8
 80013a8:	4649      	mov	r1, r9
 80013aa:	f7ff fb57 	bl	8000a5c <__aeabi_d2uiz>
 80013ae:	4602      	mov	r2, r0
 80013b0:	4b82      	ldr	r3, [pc, #520]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x554>)
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	e002      	b.n	80013bc <HAL_TIM_PeriodElapsedCallback+0x354>
			} else {
				duty_cycle_pid = 0;
 80013b6:	4b81      	ldr	r3, [pc, #516]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x554>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
			}

			if (duty_cycle_pid > 14000) {
 80013bc:	4b7f      	ldr	r3, [pc, #508]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x554>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d903      	bls.n	80013d0 <HAL_TIM_PeriodElapsedCallback+0x368>
				duty_cycle_pid = 14000;
 80013c8:	4b7c      	ldr	r3, [pc, #496]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x554>)
 80013ca:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80013ce:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle_pid);
 80013d0:	4b7e      	ldr	r3, [pc, #504]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x564>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a79      	ldr	r2, [pc, #484]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x554>)
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	635a      	str	r2, [r3, #52]	; 0x34
			Ui_anterior = Ui_actual;
 80013da:	4b7a      	ldr	r3, [pc, #488]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 80013dc:	cb18      	ldmia	r3, {r3, r4}
 80013de:	4a7c      	ldr	r2, [pc, #496]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x568>)
 80013e0:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant = error_vel_act;
 80013e4:	4b7b      	ldr	r3, [pc, #492]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80013e6:	cb18      	ldmia	r3, {r3, r4}
 80013e8:	4a7b      	ldr	r2, [pc, #492]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80013ea:	e9c2 3400 	strd	r3, r4, [r2]

			/*
			 * ------------------control motor 2
			 */
			error_vel_act2 = velocidad_consigna2 - velocidadRPM2;
 80013ee:	4b7b      	ldr	r3, [pc, #492]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x574>)
 80013f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f4:	4b7a      	ldr	r3, [pc, #488]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x578>)
 80013f6:	cb18      	ldmia	r3, {r3, r4}
 80013f8:	461a      	mov	r2, r3
 80013fa:	4623      	mov	r3, r4
 80013fc:	f7fe feb4 	bl	8000168 <__aeabi_dsub>
 8001400:	4603      	mov	r3, r0
 8001402:	460c      	mov	r4, r1
 8001404:	4a77      	ldr	r2, [pc, #476]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001406:	e9c2 3400 	strd	r3, r4, [r2]
//			}
//			else if(error_vel_act2==0){
//				Ui_anterior2=0;
//			}
//			error_vel_act2= fabs(error_vel_act2);
			if (stop2 == 1) {
 800140a:	4b77      	ldr	r3, [pc, #476]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d106      	bne.n	8001420 <HAL_TIM_PeriodElapsedCallback+0x3b8>
				Ui_anterior2 = 0;
 8001412:	4a76      	ldr	r2, [pc, #472]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x584>)
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	f04f 0400 	mov.w	r4, #0
 800141c:	e9c2 3400 	strd	r3, r4, [r2]
			}
			Up2 = KP2 * error_vel_act2;
 8001420:	4b73      	ldr	r3, [pc, #460]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8001422:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001426:	4b6f      	ldr	r3, [pc, #444]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001428:	cb18      	ldmia	r3, {r3, r4}
 800142a:	461a      	mov	r2, r3
 800142c:	4623      	mov	r3, r4
 800142e:	f7ff f853 	bl	80004d8 <__aeabi_dmul>
 8001432:	4603      	mov	r3, r0
 8001434:	460c      	mov	r4, r1
 8001436:	4a6f      	ldr	r2, [pc, #444]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001438:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual2 = Ui_anterior2 + KI2 * deltaT * error_vel_ant2;
 800143c:	4b6e      	ldr	r3, [pc, #440]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800143e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001442:	4b6e      	ldr	r3, [pc, #440]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x594>)
 8001444:	cb18      	ldmia	r3, {r3, r4}
 8001446:	461a      	mov	r2, r3
 8001448:	4623      	mov	r3, r4
 800144a:	f7ff f845 	bl	80004d8 <__aeabi_dmul>
 800144e:	4603      	mov	r3, r0
 8001450:	460c      	mov	r4, r1
 8001452:	4618      	mov	r0, r3
 8001454:	4621      	mov	r1, r4
 8001456:	4b6a      	ldr	r3, [pc, #424]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001458:	cb18      	ldmia	r3, {r3, r4}
 800145a:	461a      	mov	r2, r3
 800145c:	4623      	mov	r3, r4
 800145e:	f7ff f83b 	bl	80004d8 <__aeabi_dmul>
 8001462:	4603      	mov	r3, r0
 8001464:	460c      	mov	r4, r1
 8001466:	4618      	mov	r0, r3
 8001468:	4621      	mov	r1, r4
 800146a:	4b60      	ldr	r3, [pc, #384]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x584>)
 800146c:	cb18      	ldmia	r3, {r3, r4}
 800146e:	461a      	mov	r2, r3
 8001470:	4623      	mov	r3, r4
 8001472:	f7fe fe7b 	bl	800016c <__adddf3>
 8001476:	4603      	mov	r3, r0
 8001478:	460c      	mov	r4, r1
 800147a:	4a62      	ldr	r2, [pc, #392]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800147c:	e9c2 3400 	strd	r3, r4, [r2]
			Ud2 = KD2 / deltaT * (error_vel_act2 - error_vel_ant2);
 8001480:	4b61      	ldr	r3, [pc, #388]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8001482:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001486:	4b5d      	ldr	r3, [pc, #372]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x594>)
 8001488:	cb18      	ldmia	r3, {r3, r4}
 800148a:	461a      	mov	r2, r3
 800148c:	4623      	mov	r3, r4
 800148e:	f7ff f94d 	bl	800072c <__aeabi_ddiv>
 8001492:	4603      	mov	r3, r0
 8001494:	460c      	mov	r4, r1
 8001496:	461d      	mov	r5, r3
 8001498:	4626      	mov	r6, r4
 800149a:	4b52      	ldr	r3, [pc, #328]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 800149c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014a0:	4b57      	ldr	r3, [pc, #348]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80014a2:	cb18      	ldmia	r3, {r3, r4}
 80014a4:	461a      	mov	r2, r3
 80014a6:	4623      	mov	r3, r4
 80014a8:	f7fe fe5e 	bl	8000168 <__aeabi_dsub>
 80014ac:	4603      	mov	r3, r0
 80014ae:	460c      	mov	r4, r1
 80014b0:	461a      	mov	r2, r3
 80014b2:	4623      	mov	r3, r4
 80014b4:	4628      	mov	r0, r5
 80014b6:	4631      	mov	r1, r6
 80014b8:	f7ff f80e 	bl	80004d8 <__aeabi_dmul>
 80014bc:	4603      	mov	r3, r0
 80014be:	460c      	mov	r4, r1
 80014c0:	4a52      	ldr	r2, [pc, #328]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80014c2:	e9c2 3400 	strd	r3, r4, [r2]
			if (velocidad_consigna2 > 0) {
 80014c6:	4b45      	ldr	r3, [pc, #276]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x574>)
 80014c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	f7ff fa90 	bl	80009f8 <__aeabi_dcmpgt>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d02f      	beq.n	800153e <HAL_TIM_PeriodElapsedCallback+0x4d6>
				duty_cycle_pid2 = (uint32_t) fabs(
						duty_cycle_pid2 + (Up2 + Ui_actual2 + Ud2));
 80014de:	4b4c      	ldr	r3, [pc, #304]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe ff7e 	bl	80003e4 <__aeabi_ui2d>
 80014e8:	4605      	mov	r5, r0
 80014ea:	460e      	mov	r6, r1
 80014ec:	4b41      	ldr	r3, [pc, #260]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80014ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f2:	4b44      	ldr	r3, [pc, #272]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80014f4:	cb18      	ldmia	r3, {r3, r4}
 80014f6:	461a      	mov	r2, r3
 80014f8:	4623      	mov	r3, r4
 80014fa:	f7fe fe37 	bl	800016c <__adddf3>
 80014fe:	4603      	mov	r3, r0
 8001500:	460c      	mov	r4, r1
 8001502:	4618      	mov	r0, r3
 8001504:	4621      	mov	r1, r4
 8001506:	4b41      	ldr	r3, [pc, #260]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8001508:	cb18      	ldmia	r3, {r3, r4}
 800150a:	461a      	mov	r2, r3
 800150c:	4623      	mov	r3, r4
 800150e:	f7fe fe2d 	bl	800016c <__adddf3>
 8001512:	4603      	mov	r3, r0
 8001514:	460c      	mov	r4, r1
 8001516:	461a      	mov	r2, r3
 8001518:	4623      	mov	r3, r4
 800151a:	4628      	mov	r0, r5
 800151c:	4631      	mov	r1, r6
 800151e:	f7fe fe25 	bl	800016c <__adddf3>
 8001522:	4603      	mov	r3, r0
 8001524:	460c      	mov	r4, r1
				duty_cycle_pid2 = (uint32_t) fabs(
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001532:	f7ff fa93 	bl	8000a5c <__aeabi_d2uiz>
 8001536:	4602      	mov	r2, r0
 8001538:	4b35      	ldr	r3, [pc, #212]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	e06d      	b.n	800161a <HAL_TIM_PeriodElapsedCallback+0x5b2>
			} else if (velocidad_consigna2 < 0) {
 800153e:	4b27      	ldr	r3, [pc, #156]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001540:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	f7ff fa36 	bl	80009bc <__aeabi_dcmplt>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d05e      	beq.n	8001614 <HAL_TIM_PeriodElapsedCallback+0x5ac>
				duty_cycle_pid2 = (uint32_t) fabs(
						duty_cycle_pid2 - (Up2 + Ui_actual2 + Ud2));
 8001556:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ff42 	bl	80003e4 <__aeabi_ui2d>
 8001560:	4605      	mov	r5, r0
 8001562:	460e      	mov	r6, r1
 8001564:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001566:	e9d3 0100 	ldrd	r0, r1, [r3]
 800156a:	4b26      	ldr	r3, [pc, #152]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800156c:	cb18      	ldmia	r3, {r3, r4}
 800156e:	461a      	mov	r2, r3
 8001570:	4623      	mov	r3, r4
 8001572:	f7fe fdfb 	bl	800016c <__adddf3>
 8001576:	4603      	mov	r3, r0
 8001578:	460c      	mov	r4, r1
 800157a:	4618      	mov	r0, r3
 800157c:	4621      	mov	r1, r4
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8001580:	cb18      	ldmia	r3, {r3, r4}
 8001582:	461a      	mov	r2, r3
 8001584:	4623      	mov	r3, r4
 8001586:	f7fe fdf1 	bl	800016c <__adddf3>
 800158a:	4603      	mov	r3, r0
 800158c:	460c      	mov	r4, r1
 800158e:	461a      	mov	r2, r3
 8001590:	4623      	mov	r3, r4
 8001592:	4628      	mov	r0, r5
 8001594:	4631      	mov	r1, r6
 8001596:	f7fe fde7 	bl	8000168 <__aeabi_dsub>
 800159a:	4603      	mov	r3, r0
 800159c:	460c      	mov	r4, r1
				duty_cycle_pid2 = (uint32_t) fabs(
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015aa:	f7ff fa57 	bl	8000a5c <__aeabi_d2uiz>
 80015ae:	4602      	mov	r2, r0
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	e031      	b.n	800161a <HAL_TIM_PeriodElapsedCallback+0x5b2>
 80015b6:	bf00      	nop
 80015b8:	200002b8 	.word	0x200002b8
 80015bc:	20000308 	.word	0x20000308
 80015c0:	200002d8 	.word	0x200002d8
 80015c4:	200002d0 	.word	0x200002d0
 80015c8:	200002e0 	.word	0x200002e0
 80015cc:	20000494 	.word	0x20000494
 80015d0:	200002c8 	.word	0x200002c8
 80015d4:	20000298 	.word	0x20000298
 80015d8:	200002a0 	.word	0x200002a0
 80015dc:	200002c0 	.word	0x200002c0
 80015e0:	20000288 	.word	0x20000288
 80015e4:	200002a8 	.word	0x200002a8
 80015e8:	20000050 	.word	0x20000050
 80015ec:	200002e8 	.word	0x200002e8
 80015f0:	20000030 	.word	0x20000030
 80015f4:	200002f8 	.word	0x200002f8
 80015f8:	20000038 	.word	0x20000038
 80015fc:	20000000 	.word	0x20000000
 8001600:	200002b0 	.word	0x200002b0
 8001604:	200002f0 	.word	0x200002f0
 8001608:	20000040 	.word	0x20000040
 800160c:	20000300 	.word	0x20000300
 8001610:	2000030c 	.word	0x2000030c
			} else {
				duty_cycle_pid2 = 0;
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x658>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
			}
			if (duty_cycle_pid2 > 14000) {
 800161a:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8001622:	4293      	cmp	r3, r2
 8001624:	d903      	bls.n	800162e <HAL_TIM_PeriodElapsedCallback+0x5c6>
				duty_cycle_pid2 = 14000;
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x658>)
 8001628:	f243 62b0 	movw	r2, #14000	; 0x36b0
 800162c:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle_pid2);
 800162e:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a23      	ldr	r2, [pc, #140]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x658>)
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	63da      	str	r2, [r3, #60]	; 0x3c
			Ui_anterior2 = Ui_actual2;
 8001638:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800163a:	cb18      	ldmia	r3, {r3, r4}
 800163c:	4a23      	ldr	r2, [pc, #140]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x664>)
 800163e:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant2 = error_vel_act2;
 8001642:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8001644:	cb18      	ldmia	r3, {r3, r4}
 8001646:	4a23      	ldr	r2, [pc, #140]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 8001648:	e9c2 3400 	strd	r3, r4, [r2]
		} else { //Overflow
			contOUFlow2++;
//			printf("overflow motor 2 \r\n");
		}
	}
}
 800164c:	e032      	b.n	80016b4 <HAL_TIM_PeriodElapsedCallback+0x64c>
	} else if (htim->Instance == TIM3) {
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a21      	ldr	r2, [pc, #132]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d114      	bne.n	8001682 <HAL_TIM_PeriodElapsedCallback+0x61a>
		if (__HAL_TIM_GET_COUNTER(&htim3) > (htim->Init.Period + 1) / 2) { //Underflow
 8001658:	4b20      	ldr	r3, [pc, #128]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x674>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	3301      	adds	r3, #1
 8001664:	085b      	lsrs	r3, r3, #1
 8001666:	429a      	cmp	r2, r3
 8001668:	d905      	bls.n	8001676 <HAL_TIM_PeriodElapsedCallback+0x60e>
			contOUFlow--;
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x678>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3b01      	subs	r3, #1
 8001670:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	e01e      	b.n	80016b4 <HAL_TIM_PeriodElapsedCallback+0x64c>
			contOUFlow++;
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	4a18      	ldr	r2, [pc, #96]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x678>)
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	e018      	b.n	80016b4 <HAL_TIM_PeriodElapsedCallback+0x64c>
	} else if (htim->Instance == TIM4) {
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d113      	bne.n	80016b4 <HAL_TIM_PeriodElapsedCallback+0x64c>
		if (__HAL_TIM_GET_COUNTER(&htim4) > (htim->Init.Period + 1) / 2) { //Underflow
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x680>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	3301      	adds	r3, #1
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	429a      	cmp	r2, r3
 800169c:	d905      	bls.n	80016aa <HAL_TIM_PeriodElapsedCallback+0x642>
			contOUFlow2--;
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x684>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x684>)
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	e004      	b.n	80016b4 <HAL_TIM_PeriodElapsedCallback+0x64c>
			contOUFlow2++;
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x684>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x684>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	371c      	adds	r7, #28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016be:	bf00      	nop
 80016c0:	2000030c 	.word	0x2000030c
 80016c4:	20000494 	.word	0x20000494
 80016c8:	200002f0 	.word	0x200002f0
 80016cc:	200002e8 	.word	0x200002e8
 80016d0:	200002a8 	.word	0x200002a8
 80016d4:	200002b0 	.word	0x200002b0
 80016d8:	40000400 	.word	0x40000400
 80016dc:	200003d4 	.word	0x200003d4
 80016e0:	20000254 	.word	0x20000254
 80016e4:	40000800 	.word	0x40000800
 80016e8:	20000374 	.word	0x20000374
 80016ec:	20000260 	.word	0x20000260

080016f0 <HAL_SPI_RxCpltCallback>:

/**
 * @brief  The application entry point.
 * @retval int
 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	num_spi = num_spi + 10;
 80016f8:	4b38      	ldr	r3, [pc, #224]	; (80017dc <HAL_SPI_RxCpltCallback+0xec>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	330a      	adds	r3, #10
 80016fe:	4a37      	ldr	r2, [pc, #220]	; (80017dc <HAL_SPI_RxCpltCallback+0xec>)
 8001700:	6013      	str	r3, [r2, #0]
	if (hspi->Instance == SPI2) {
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a36      	ldr	r2, [pc, #216]	; (80017e0 <HAL_SPI_RxCpltCallback+0xf0>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d162      	bne.n	80017d2 <HAL_SPI_RxCpltCallback+0xe2>
		for (int i = 0; i < 17; i++) {
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	e053      	b.n	80017ba <HAL_SPI_RxCpltCallback+0xca>
			switch (in_buffer[i]) {
 8001712:	4a34      	ldr	r2, [pc, #208]	; (80017e4 <HAL_SPI_RxCpltCallback+0xf4>)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4413      	add	r3, r2
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b0d      	cmp	r3, #13
 800171c:	d010      	beq.n	8001740 <HAL_SPI_RxCpltCallback+0x50>
 800171e:	2b0d      	cmp	r3, #13
 8001720:	dc02      	bgt.n	8001728 <HAL_SPI_RxCpltCallback+0x38>
 8001722:	2b08      	cmp	r3, #8
 8001724:	d01c      	beq.n	8001760 <HAL_SPI_RxCpltCallback+0x70>
 8001726:	e02a      	b.n	800177e <HAL_SPI_RxCpltCallback+0x8e>
 8001728:	2b3a      	cmp	r3, #58	; 0x3a
 800172a:	d002      	beq.n	8001732 <HAL_SPI_RxCpltCallback+0x42>
 800172c:	2b3b      	cmp	r3, #59	; 0x3b
 800172e:	d007      	beq.n	8001740 <HAL_SPI_RxCpltCallback+0x50>
 8001730:	e025      	b.n	800177e <HAL_SPI_RxCpltCallback+0x8e>
			case ':': //Comienzo de la trama
				flagRx = 1;
 8001732:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <HAL_SPI_RxCpltCallback+0xf8>)
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
				indRx = 0;
 8001738:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <HAL_SPI_RxCpltCallback+0xfc>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
				break;
 800173e:	e039      	b.n	80017b4 <HAL_SPI_RxCpltCallback+0xc4>
			case '\r': //Retorno, fin de trama.
			case ';':  //Fin de trama.
				if (flagRx) {
 8001740:	4b29      	ldr	r3, [pc, #164]	; (80017e8 <HAL_SPI_RxCpltCallback+0xf8>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d030      	beq.n	80017aa <HAL_SPI_RxCpltCallback+0xba>
					flagRx = 0;
 8001748:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <HAL_SPI_RxCpltCallback+0xf8>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
					buffer[indRx] = 0;
 800174e:	4b27      	ldr	r3, [pc, #156]	; (80017ec <HAL_SPI_RxCpltCallback+0xfc>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <HAL_SPI_RxCpltCallback+0x100>)
 8001756:	2100      	movs	r1, #0
 8001758:	5499      	strb	r1, [r3, r2]
					interpreteComando();
 800175a:	f7ff f9ef 	bl	8000b3c <interpreteComando>
				}
				break;
 800175e:	e024      	b.n	80017aa <HAL_SPI_RxCpltCallback+0xba>
			case 8: //Retroceso es permitido de esta manera.
				if (flagRx) {
 8001760:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <HAL_SPI_RxCpltCallback+0xf8>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d022      	beq.n	80017ae <HAL_SPI_RxCpltCallback+0xbe>
					if (indRx > 0) {
 8001768:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_SPI_RxCpltCallback+0xfc>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d01e      	beq.n	80017ae <HAL_SPI_RxCpltCallback+0xbe>
						indRx--;
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <HAL_SPI_RxCpltCallback+0xfc>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	3b01      	subs	r3, #1
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_SPI_RxCpltCallback+0xfc>)
 800177a:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 800177c:	e017      	b.n	80017ae <HAL_SPI_RxCpltCallback+0xbe>
			default: //Almacenamiento de la trama.
				if (flagRx) {
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_SPI_RxCpltCallback+0xf8>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d015      	beq.n	80017b2 <HAL_SPI_RxCpltCallback+0xc2>
					buffer[indRx] = byte;
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_SPI_RxCpltCallback+0xfc>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_SPI_RxCpltCallback+0x104>)
 800178e:	7819      	ldrb	r1, [r3, #0]
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_SPI_RxCpltCallback+0x100>)
 8001792:	5499      	strb	r1, [r3, r2]
					if (indRx < MAX_BUFFER - 1) {
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_SPI_RxCpltCallback+0xfc>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b26      	cmp	r3, #38	; 0x26
 800179a:	d80a      	bhi.n	80017b2 <HAL_SPI_RxCpltCallback+0xc2>
						indRx++;
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <HAL_SPI_RxCpltCallback+0xfc>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <HAL_SPI_RxCpltCallback+0xfc>)
 80017a6:	701a      	strb	r2, [r3, #0]
					}

				}
				break;
 80017a8:	e003      	b.n	80017b2 <HAL_SPI_RxCpltCallback+0xc2>
				break;
 80017aa:	bf00      	nop
 80017ac:	e002      	b.n	80017b4 <HAL_SPI_RxCpltCallback+0xc4>
				break;
 80017ae:	bf00      	nop
 80017b0:	e000      	b.n	80017b4 <HAL_SPI_RxCpltCallback+0xc4>
				break;
 80017b2:	bf00      	nop
		for (int i = 0; i < 17; i++) {
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3301      	adds	r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2b10      	cmp	r3, #16
 80017be:	dda8      	ble.n	8001712 <HAL_SPI_RxCpltCallback+0x22>
		}

		/* Receive one byte in interrupt mode */
		//HAL_SPI_TransmitReceive_IT(&hspi2, &out_buffer[indexBuf], &byte, 1);
//		  HAL_SPI_Receive_IT(&hspi2, &byte, 1);
		if (questionFlag == 0) {
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_SPI_RxCpltCallback+0x108>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d104      	bne.n	80017d2 <HAL_SPI_RxCpltCallback+0xe2>
			HAL_SPI_Receive_IT(&hspi2, &in_buffer[0], 18);
 80017c8:	2212      	movs	r2, #18
 80017ca:	4906      	ldr	r1, [pc, #24]	; (80017e4 <HAL_SPI_RxCpltCallback+0xf4>)
 80017cc:	480b      	ldr	r0, [pc, #44]	; (80017fc <HAL_SPI_RxCpltCallback+0x10c>)
 80017ce:	f001 ff69 	bl	80036a4 <HAL_SPI_Receive_IT>
		}

	}
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000290 	.word	0x20000290
 80017e0:	40003800 	.word	0x40003800
 80017e4:	200003c0 	.word	0x200003c0
 80017e8:	200003d1 	.word	0x200003d1
 80017ec:	2000024c 	.word	0x2000024c
 80017f0:	20000420 	.word	0x20000420
 80017f4:	20000448 	.word	0x20000448
 80017f8:	20000250 	.word	0x20000250
 80017fc:	2000031c 	.word	0x2000031c

08001800 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001804:	f000 fe2a 	bl	800245c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001808:	f000 f888 	bl	800191c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800180c:	f000 fac6 	bl	8001d9c <MX_GPIO_Init>
	MX_TIM1_Init();
 8001810:	f000 f8fe 	bl	8001a10 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001814:	f000 f99a 	bl	8001b4c <MX_TIM2_Init>
	MX_TIM3_Init();
 8001818:	f000 fa18 	bl	8001c4c <MX_TIM3_Init>
	MX_TIM4_Init();
 800181c:	f000 fa6a 	bl	8001cf4 <MX_TIM4_Init>
	MX_SPI2_Init();
 8001820:	f000 f8c2 	bl	80019a8 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */

	//HAL_UART_Receive_IT(&huart2, &byte, 1);
	HAL_SPI_Receive_IT(&hspi2, &in_buffer[0], 17);
 8001824:	2211      	movs	r2, #17
 8001826:	4933      	ldr	r1, [pc, #204]	; (80018f4 <main+0xf4>)
 8001828:	4833      	ldr	r0, [pc, #204]	; (80018f8 <main+0xf8>)
 800182a:	f001 ff3b 	bl	80036a4 <HAL_SPI_Receive_IT>

	HAL_TIM_Base_Start_IT(&htim1);
 800182e:	4833      	ldr	r0, [pc, #204]	; (80018fc <main+0xfc>)
 8001830:	f002 fcc6 	bl	80041c0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001834:	2100      	movs	r1, #0
 8001836:	4831      	ldr	r0, [pc, #196]	; (80018fc <main+0xfc>)
 8001838:	f002 fd6c 	bl	8004314 <HAL_TIM_OC_Start_IT>

	/*Se activan canales para generacion PWM- */
	/*canal 1 para motor 1 */
	/*canal  para motor 2*/
	HAL_TIM_Base_Start(&htim2);
 800183c:	4830      	ldr	r0, [pc, #192]	; (8001900 <main+0x100>)
 800183e:	f002 fc75 	bl	800412c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8001842:	2100      	movs	r1, #0
 8001844:	482e      	ldr	r0, [pc, #184]	; (8001900 <main+0x100>)
 8001846:	f002 fea5 	bl	8004594 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 800184a:	2108      	movs	r1, #8
 800184c:	482c      	ldr	r0, [pc, #176]	; (8001900 <main+0x100>)
 800184e:	f002 fea1 	bl	8004594 <HAL_TIM_PWM_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 8001852:	482c      	ldr	r0, [pc, #176]	; (8001904 <main+0x104>)
 8001854:	f002 fcb4 	bl	80041c0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001858:	213c      	movs	r1, #60	; 0x3c
 800185a:	482a      	ldr	r0, [pc, #168]	; (8001904 <main+0x104>)
 800185c:	f003 f824 	bl	80048a8 <HAL_TIM_Encoder_Start_IT>

	HAL_TIM_Base_Start_IT(&htim4);
 8001860:	4829      	ldr	r0, [pc, #164]	; (8001908 <main+0x108>)
 8001862:	f002 fcad 	bl	80041c0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001866:	213c      	movs	r1, #60	; 0x3c
 8001868:	4827      	ldr	r0, [pc, #156]	; (8001908 <main+0x108>)
 800186a:	f003 f81d 	bl	80048a8 <HAL_TIM_Encoder_Start_IT>

	/*Se activa en sentido positivo del motor  1*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800186e:	2201      	movs	r2, #1
 8001870:	2110      	movs	r1, #16
 8001872:	4826      	ldr	r0, [pc, #152]	; (800190c <main+0x10c>)
 8001874:	f001 f954 	bl	8002b20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2120      	movs	r1, #32
 800187c:	4823      	ldr	r0, [pc, #140]	; (800190c <main+0x10c>)
 800187e:	f001 f94f 	bl	8002b20 <HAL_GPIO_WritePin>

	/*Se activa el sentido positivo del motor 2*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001888:	4820      	ldr	r0, [pc, #128]	; (800190c <main+0x10c>)
 800188a:	f001 f949 	bl	8002b20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 800188e:	2201      	movs	r2, #1
 8001890:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001894:	481d      	ldr	r0, [pc, #116]	; (800190c <main+0x10c>)
 8001896:	f001 f943 	bl	8002b20 <HAL_GPIO_WritePin>
	/*Se fuerza valor del contador del timer 3 y 4 para lecturas de encoders*/
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <main+0x104>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2200      	movs	r2, #0
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <main+0x108>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80018aa:	2201      	movs	r2, #1
 80018ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b0:	4817      	ldr	r0, [pc, #92]	; (8001910 <main+0x110>)
 80018b2:	f001 f935 	bl	8002b20 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80018b6:	2064      	movs	r0, #100	; 0x64
 80018b8:	f000 fe32 	bl	8002520 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c2:	4813      	ldr	r0, [pc, #76]	; (8001910 <main+0x110>)
 80018c4:	f001 f92c 	bl	8002b20 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80018c8:	2064      	movs	r0, #100	; 0x64
 80018ca:	f000 fe29 	bl	8002520 <HAL_Delay>

		if(questionFlag){
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <main+0x114>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0e9      	beq.n	80018aa <main+0xaa>
			HAL_SPI_Transmit(&hspi2, &out_buffer[0], 14, 100);
 80018d6:	2364      	movs	r3, #100	; 0x64
 80018d8:	220e      	movs	r2, #14
 80018da:	490f      	ldr	r1, [pc, #60]	; (8001918 <main+0x118>)
 80018dc:	4806      	ldr	r0, [pc, #24]	; (80018f8 <main+0xf8>)
 80018de:	f001 fda5 	bl	800342c <HAL_SPI_Transmit>
			HAL_SPI_Receive_IT(&hspi2, &in_buffer[0], 17);
 80018e2:	2211      	movs	r2, #17
 80018e4:	4903      	ldr	r1, [pc, #12]	; (80018f4 <main+0xf4>)
 80018e6:	4804      	ldr	r0, [pc, #16]	; (80018f8 <main+0xf8>)
 80018e8:	f001 fedc 	bl	80036a4 <HAL_SPI_Receive_IT>
			questionFlag = 0;
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <main+0x114>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80018f2:	e7da      	b.n	80018aa <main+0xaa>
 80018f4:	200003c0 	.word	0x200003c0
 80018f8:	2000031c 	.word	0x2000031c
 80018fc:	2000044c 	.word	0x2000044c
 8001900:	20000494 	.word	0x20000494
 8001904:	200003d4 	.word	0x200003d4
 8001908:	20000374 	.word	0x20000374
 800190c:	40010800 	.word	0x40010800
 8001910:	40011000 	.word	0x40011000
 8001914:	20000250 	.word	0x20000250
 8001918:	20000008 	.word	0x20000008

0800191c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b090      	sub	sp, #64	; 0x40
 8001920:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001922:	f107 0318 	add.w	r3, r7, #24
 8001926:	2228      	movs	r2, #40	; 0x28
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f003 fef6 	bl	800571c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800193e:	2301      	movs	r3, #1
 8001940:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001946:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800194c:	2301      	movs	r3, #1
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001950:	2302      	movs	r3, #2
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001958:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800195a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800195e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001960:	f107 0318 	add.w	r3, r7, #24
 8001964:	4618      	mov	r0, r3
 8001966:	f001 f8f3 	bl	8002b50 <HAL_RCC_OscConfig>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <SystemClock_Config+0x58>
		Error_Handler();
 8001970:	f000 fa82 	bl	8001e78 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001974:	230f      	movs	r3, #15
 8001976:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001978:	2302      	movs	r3, #2
 800197a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001984:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	2102      	movs	r1, #2
 800198e:	4618      	mov	r0, r3
 8001990:	f001 fb5e 	bl	8003050 <HAL_RCC_ClockConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SystemClock_Config+0x82>
		Error_Handler();
 800199a:	f000 fa6d 	bl	8001e78 <Error_Handler>
	}
}
 800199e:	bf00      	nop
 80019a0:	3740      	adds	r7, #64	; 0x40
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <MX_SPI2_Init+0x60>)
 80019ae:	4a17      	ldr	r2, [pc, #92]	; (8001a0c <MX_SPI2_Init+0x64>)
 80019b0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <MX_SPI2_Init+0x60>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <MX_SPI2_Init+0x60>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <MX_SPI2_Init+0x60>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019c4:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <MX_SPI2_Init+0x60>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <MX_SPI2_Init+0x60>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <MX_SPI2_Init+0x60>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <MX_SPI2_Init+0x60>)
 80019d8:	2238      	movs	r2, #56	; 0x38
 80019da:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <MX_SPI2_Init+0x60>)
 80019de:	2200      	movs	r2, #0
 80019e0:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <MX_SPI2_Init+0x60>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <MX_SPI2_Init+0x60>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <MX_SPI2_Init+0x60>)
 80019f0:	220a      	movs	r2, #10
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80019f4:	4804      	ldr	r0, [pc, #16]	; (8001a08 <MX_SPI2_Init+0x60>)
 80019f6:	f001 fc95 	bl	8003324 <HAL_SPI_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_SPI2_Init+0x5c>
		Error_Handler();
 8001a00:	f000 fa3a 	bl	8001e78 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	2000031c 	.word	0x2000031c
 8001a0c:	40003800 	.word	0x40003800

08001a10 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b096      	sub	sp, #88	; 0x58
 8001a14:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]
 8001a3e:	615a      	str	r2, [r3, #20]
 8001a40:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2220      	movs	r2, #32
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 fe67 	bl	800571c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <MX_TIM1_Init+0x134>)
 8001a50:	4a3d      	ldr	r2, [pc, #244]	; (8001b48 <MX_TIM1_Init+0x138>)
 8001a52:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 11;
 8001a54:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <MX_TIM1_Init+0x134>)
 8001a56:	220b      	movs	r2, #11
 8001a58:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5a:	4b3a      	ldr	r3, [pc, #232]	; (8001b44 <MX_TIM1_Init+0x134>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 59999;
 8001a60:	4b38      	ldr	r3, [pc, #224]	; (8001b44 <MX_TIM1_Init+0x134>)
 8001a62:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001a66:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a68:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <MX_TIM1_Init+0x134>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001a6e:	4b35      	ldr	r3, [pc, #212]	; (8001b44 <MX_TIM1_Init+0x134>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a74:	4b33      	ldr	r3, [pc, #204]	; (8001b44 <MX_TIM1_Init+0x134>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001a7a:	4832      	ldr	r0, [pc, #200]	; (8001b44 <MX_TIM1_Init+0x134>)
 8001a7c:	f002 fb07 	bl	800408e <HAL_TIM_Base_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM1_Init+0x7a>
		Error_Handler();
 8001a86:	f000 f9f7 	bl	8001e78 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001a90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a94:	4619      	mov	r1, r3
 8001a96:	482b      	ldr	r0, [pc, #172]	; (8001b44 <MX_TIM1_Init+0x134>)
 8001a98:	f003 f9d2 	bl	8004e40 <HAL_TIM_ConfigClockSource>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM1_Init+0x96>
		Error_Handler();
 8001aa2:	f000 f9e9 	bl	8001e78 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim1) != HAL_OK) {
 8001aa6:	4827      	ldr	r0, [pc, #156]	; (8001b44 <MX_TIM1_Init+0x134>)
 8001aa8:	f002 fbdc 	bl	8004264 <HAL_TIM_OC_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM1_Init+0xa6>
		Error_Handler();
 8001ab2:	f000 f9e1 	bl	8001e78 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001abe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	481f      	ldr	r0, [pc, #124]	; (8001b44 <MX_TIM1_Init+0x134>)
 8001ac6:	f003 fd3b 	bl	8005540 <HAL_TIMEx_MasterConfigSynchronization>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8001ad0:	f000 f9d2 	bl	8001e78 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001adc:	2300      	movs	r3, #0
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aec:	2300      	movs	r3, #0
 8001aee:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af4:	2200      	movs	r2, #0
 8001af6:	4619      	mov	r1, r3
 8001af8:	4812      	ldr	r0, [pc, #72]	; (8001b44 <MX_TIM1_Init+0x134>)
 8001afa:	f003 f88b 	bl	8004c14 <HAL_TIM_OC_ConfigChannel>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM1_Init+0xf8>
		Error_Handler();
 8001b04:	f000 f9b8 	bl	8001e78 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b20:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4806      	ldr	r0, [pc, #24]	; (8001b44 <MX_TIM1_Init+0x134>)
 8001b2c:	f003 fd66 	bl	80055fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 8001b36:	f000 f99f 	bl	8001e78 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	3758      	adds	r7, #88	; 0x58
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000044c 	.word	0x2000044c
 8001b48:	40012c00 	.word	0x40012c00

08001b4c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08e      	sub	sp, #56	; 0x38
 8001b50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b60:	f107 0320 	add.w	r3, r7, #32
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
 8001b78:	615a      	str	r2, [r3, #20]
 8001b7a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001b7c:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <MX_TIM2_Init+0xfc>)
 8001b7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b82:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001b84:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <MX_TIM2_Init+0xfc>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8a:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <MX_TIM2_Init+0xfc>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 15000;
 8001b90:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <MX_TIM2_Init+0xfc>)
 8001b92:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001b96:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b98:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <MX_TIM2_Init+0xfc>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <MX_TIM2_Init+0xfc>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001ba4:	4828      	ldr	r0, [pc, #160]	; (8001c48 <MX_TIM2_Init+0xfc>)
 8001ba6:	f002 fa72 	bl	800408e <HAL_TIM_Base_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM2_Init+0x68>
		Error_Handler();
 8001bb0:	f000 f962 	bl	8001e78 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4821      	ldr	r0, [pc, #132]	; (8001c48 <MX_TIM2_Init+0xfc>)
 8001bc2:	f003 f93d 	bl	8004e40 <HAL_TIM_ConfigClockSource>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM2_Init+0x84>
		Error_Handler();
 8001bcc:	f000 f954 	bl	8001e78 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001bd0:	481d      	ldr	r0, [pc, #116]	; (8001c48 <MX_TIM2_Init+0xfc>)
 8001bd2:	f002 fc87 	bl	80044e4 <HAL_TIM_PWM_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM2_Init+0x94>
		Error_Handler();
 8001bdc:	f000 f94c 	bl	8001e78 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001be8:	f107 0320 	add.w	r3, r7, #32
 8001bec:	4619      	mov	r1, r3
 8001bee:	4816      	ldr	r0, [pc, #88]	; (8001c48 <MX_TIM2_Init+0xfc>)
 8001bf0:	f003 fca6 	bl	8005540 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8001bfa:	f000 f93d 	bl	8001e78 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bfe:	2360      	movs	r3, #96	; 0x60
 8001c00:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2200      	movs	r2, #0
 8001c12:	4619      	mov	r1, r3
 8001c14:	480c      	ldr	r0, [pc, #48]	; (8001c48 <MX_TIM2_Init+0xfc>)
 8001c16:	f003 f855 	bl	8004cc4 <HAL_TIM_PWM_ConfigChannel>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8001c20:	f000 f92a 	bl	8001e78 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2208      	movs	r2, #8
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4807      	ldr	r0, [pc, #28]	; (8001c48 <MX_TIM2_Init+0xfc>)
 8001c2c:	f003 f84a 	bl	8004cc4 <HAL_TIM_PWM_ConfigChannel>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8001c36:	f000 f91f 	bl	8001e78 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001c3a:	4803      	ldr	r0, [pc, #12]	; (8001c48 <MX_TIM2_Init+0xfc>)
 8001c3c:	f000 fa74 	bl	8002128 <HAL_TIM_MspPostInit>

}
 8001c40:	bf00      	nop
 8001c42:	3738      	adds	r7, #56	; 0x38
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000494 	.word	0x20000494

08001c4c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	; 0x30
 8001c50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	2224      	movs	r2, #36	; 0x24
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 fd5e 	bl	800571c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001c6a:	4a21      	ldr	r2, [pc, #132]	; (8001cf0 <MX_TIM3_Init+0xa4>)
 8001c6c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 64999;
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001c7c:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001c80:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c96:	2301      	movs	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480c      	ldr	r0, [pc, #48]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001cba:	f002 fd53 	bl	8004764 <HAL_TIM_Encoder_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM3_Init+0x7c>
		Error_Handler();
 8001cc4:	f000 f8d8 	bl	8001e78 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001cd6:	f003 fc33 	bl	8005540 <HAL_TIMEx_MasterConfigSynchronization>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001ce0:	f000 f8ca 	bl	8001e78 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	3730      	adds	r7, #48	; 0x30
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200003d4 	.word	0x200003d4
 8001cf0:	40000400 	.word	0x40000400

08001cf4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	; 0x30
 8001cf8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	2224      	movs	r2, #36	; 0x24
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 fd0a 	bl	800571c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <MX_TIM4_Init+0xa0>)
 8001d12:	4a21      	ldr	r2, [pc, #132]	; (8001d98 <MX_TIM4_Init+0xa4>)
 8001d14:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001d16:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <MX_TIM4_Init+0xa0>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <MX_TIM4_Init+0xa0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 64999;
 8001d22:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <MX_TIM4_Init+0xa0>)
 8001d24:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001d28:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <MX_TIM4_Init+0xa0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d30:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <MX_TIM4_Init+0xa0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d36:	2303      	movs	r3, #3
 8001d38:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480c      	ldr	r0, [pc, #48]	; (8001d94 <MX_TIM4_Init+0xa0>)
 8001d62:	f002 fcff 	bl	8004764 <HAL_TIM_Encoder_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM4_Init+0x7c>
		Error_Handler();
 8001d6c:	f000 f884 	bl	8001e78 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d70:	2300      	movs	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4805      	ldr	r0, [pc, #20]	; (8001d94 <MX_TIM4_Init+0xa0>)
 8001d7e:	f003 fbdf 	bl	8005540 <HAL_TIMEx_MasterConfigSynchronization>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM4_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001d88:	f000 f876 	bl	8001e78 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	3730      	adds	r7, #48	; 0x30
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000374 	.word	0x20000374
 8001d98:	40000800 	.word	0x40000800

08001d9c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001da2:	f107 0310 	add.w	r3, r7, #16
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001db0:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <MX_GPIO_Init+0xd0>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	4a2d      	ldr	r2, [pc, #180]	; (8001e6c <MX_GPIO_Init+0xd0>)
 8001db6:	f043 0310 	orr.w	r3, r3, #16
 8001dba:	6193      	str	r3, [r2, #24]
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <MX_GPIO_Init+0xd0>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc8:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <MX_GPIO_Init+0xd0>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	4a27      	ldr	r2, [pc, #156]	; (8001e6c <MX_GPIO_Init+0xd0>)
 8001dce:	f043 0320 	orr.w	r3, r3, #32
 8001dd2:	6193      	str	r3, [r2, #24]
 8001dd4:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <MX_GPIO_Init+0xd0>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f003 0320 	and.w	r3, r3, #32
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001de0:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <MX_GPIO_Init+0xd0>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a21      	ldr	r2, [pc, #132]	; (8001e6c <MX_GPIO_Init+0xd0>)
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <MX_GPIO_Init+0xd0>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <MX_GPIO_Init+0xd0>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a1b      	ldr	r2, [pc, #108]	; (8001e6c <MX_GPIO_Init+0xd0>)
 8001dfe:	f043 0308 	orr.w	r3, r3, #8
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <MX_GPIO_Init+0xd0>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e10:	2200      	movs	r2, #0
 8001e12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e16:	4816      	ldr	r0, [pc, #88]	; (8001e70 <MX_GPIO_Init+0xd4>)
 8001e18:	f000 fe82 	bl	8002b20 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_9 | GPIO_PIN_11,
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f44f 6123 	mov.w	r1, #2608	; 0xa30
 8001e22:	4814      	ldr	r0, [pc, #80]	; (8001e74 <MX_GPIO_Init+0xd8>)
 8001e24:	f000 fe7c 	bl	8002b20 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e2c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2302      	movs	r3, #2
 8001e38:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480b      	ldr	r0, [pc, #44]	; (8001e70 <MX_GPIO_Init+0xd4>)
 8001e42:	f000 fd13 	bl	800286c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 PA5 PA9 PA11 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_9 | GPIO_PIN_11;
 8001e46:	f44f 6323 	mov.w	r3, #2608	; 0xa30
 8001e4a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2302      	movs	r3, #2
 8001e56:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e58:	f107 0310 	add.w	r3, r7, #16
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_GPIO_Init+0xd8>)
 8001e60:	f000 fd04 	bl	800286c <HAL_GPIO_Init>

}
 8001e64:	bf00      	nop
 8001e66:	3720      	adds	r7, #32
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40011000 	.word	0x40011000
 8001e74:	40010800 	.word	0x40010800

08001e78 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
	/* User can add his own implementation to report the HAL error return state */
//	__disable_irq();
//	while (1) {
//	}
	/* USER CODE END Error_Handler_Debug */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_MspInit+0x5c>)
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	4a14      	ldr	r2, [pc, #80]	; (8001ee0 <HAL_MspInit+0x5c>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6193      	str	r3, [r2, #24]
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_MspInit+0x5c>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_MspInit+0x5c>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <HAL_MspInit+0x5c>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eac:	61d3      	str	r3, [r2, #28]
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_MspInit+0x5c>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_MspInit+0x60>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <HAL_MspInit+0x60>)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40010000 	.word	0x40010000

08001ee8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a20      	ldr	r2, [pc, #128]	; (8001f84 <HAL_SPI_MspInit+0x9c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d139      	bne.n	8001f7c <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f08:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <HAL_SPI_MspInit+0xa0>)
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	4a1e      	ldr	r2, [pc, #120]	; (8001f88 <HAL_SPI_MspInit+0xa0>)
 8001f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f12:	61d3      	str	r3, [r2, #28]
 8001f14:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <HAL_SPI_MspInit+0xa0>)
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_SPI_MspInit+0xa0>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <HAL_SPI_MspInit+0xa0>)
 8001f26:	f043 0308 	orr.w	r3, r3, #8
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <HAL_SPI_MspInit+0xa0>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001f38:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001f3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f46:	f107 0310 	add.w	r3, r7, #16
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480f      	ldr	r0, [pc, #60]	; (8001f8c <HAL_SPI_MspInit+0xa4>)
 8001f4e:	f000 fc8d 	bl	800286c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	4619      	mov	r1, r3
 8001f66:	4809      	ldr	r0, [pc, #36]	; (8001f8c <HAL_SPI_MspInit+0xa4>)
 8001f68:	f000 fc80 	bl	800286c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	2024      	movs	r0, #36	; 0x24
 8001f72:	f000 fbce 	bl	8002712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001f76:	2024      	movs	r0, #36	; 0x24
 8001f78:	f000 fbe7 	bl	800274a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f7c:	bf00      	nop
 8001f7e:	3720      	adds	r7, #32
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40003800 	.word	0x40003800
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40010c00 	.word	0x40010c00

08001f90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a22      	ldr	r2, [pc, #136]	; (8002028 <HAL_TIM_Base_MspInit+0x98>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d12c      	bne.n	8001ffc <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fa2:	4b22      	ldr	r3, [pc, #136]	; (800202c <HAL_TIM_Base_MspInit+0x9c>)
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	4a21      	ldr	r2, [pc, #132]	; (800202c <HAL_TIM_Base_MspInit+0x9c>)
 8001fa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fac:	6193      	str	r3, [r2, #24]
 8001fae:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_TIM_Base_MspInit+0x9c>)
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2018      	movs	r0, #24
 8001fc0:	f000 fba7 	bl	8002712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001fc4:	2018      	movs	r0, #24
 8001fc6:	f000 fbc0 	bl	800274a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	2019      	movs	r0, #25
 8001fd0:	f000 fb9f 	bl	8002712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001fd4:	2019      	movs	r0, #25
 8001fd6:	f000 fbb8 	bl	800274a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	201a      	movs	r0, #26
 8001fe0:	f000 fb97 	bl	8002712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001fe4:	201a      	movs	r0, #26
 8001fe6:	f000 fbb0 	bl	800274a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2100      	movs	r1, #0
 8001fee:	201b      	movs	r0, #27
 8001ff0:	f000 fb8f 	bl	8002712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ff4:	201b      	movs	r0, #27
 8001ff6:	f000 fba8 	bl	800274a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ffa:	e010      	b.n	800201e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002004:	d10b      	bne.n	800201e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_TIM_Base_MspInit+0x9c>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a08      	ldr	r2, [pc, #32]	; (800202c <HAL_TIM_Base_MspInit+0x9c>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	61d3      	str	r3, [r2, #28]
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_TIM_Base_MspInit+0x9c>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
}
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40012c00 	.word	0x40012c00
 800202c:	40021000 	.word	0x40021000

08002030 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0318 	add.w	r3, r7, #24
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a32      	ldr	r2, [pc, #200]	; (8002114 <HAL_TIM_Encoder_MspInit+0xe4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d12c      	bne.n	80020aa <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002050:	4b31      	ldr	r3, [pc, #196]	; (8002118 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	4a30      	ldr	r2, [pc, #192]	; (8002118 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002056:	f043 0302 	orr.w	r3, r3, #2
 800205a:	61d3      	str	r3, [r2, #28]
 800205c:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <HAL_TIM_Encoder_MspInit+0xe8>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002068:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <HAL_TIM_Encoder_MspInit+0xe8>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	4a2a      	ldr	r2, [pc, #168]	; (8002118 <HAL_TIM_Encoder_MspInit+0xe8>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6193      	str	r3, [r2, #24]
 8002074:	4b28      	ldr	r3, [pc, #160]	; (8002118 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002080:	23c0      	movs	r3, #192	; 0xc0
 8002082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f107 0318 	add.w	r3, r7, #24
 8002090:	4619      	mov	r1, r3
 8002092:	4822      	ldr	r0, [pc, #136]	; (800211c <HAL_TIM_Encoder_MspInit+0xec>)
 8002094:	f000 fbea 	bl	800286c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	2100      	movs	r1, #0
 800209c:	201d      	movs	r0, #29
 800209e:	f000 fb38 	bl	8002712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020a2:	201d      	movs	r0, #29
 80020a4:	f000 fb51 	bl	800274a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020a8:	e030      	b.n	800210c <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1c      	ldr	r2, [pc, #112]	; (8002120 <HAL_TIM_Encoder_MspInit+0xf0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d12b      	bne.n	800210c <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020b4:	4b18      	ldr	r3, [pc, #96]	; (8002118 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	4a17      	ldr	r2, [pc, #92]	; (8002118 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	61d3      	str	r3, [r2, #28]
 80020c0:	4b15      	ldr	r3, [pc, #84]	; (8002118 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	4a11      	ldr	r2, [pc, #68]	; (8002118 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020d2:	f043 0308 	orr.w	r3, r3, #8
 80020d6:	6193      	str	r3, [r2, #24]
 80020d8:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020e4:	23c0      	movs	r3, #192	; 0xc0
 80020e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	f107 0318 	add.w	r3, r7, #24
 80020f4:	4619      	mov	r1, r3
 80020f6:	480b      	ldr	r0, [pc, #44]	; (8002124 <HAL_TIM_Encoder_MspInit+0xf4>)
 80020f8:	f000 fbb8 	bl	800286c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2100      	movs	r1, #0
 8002100:	201e      	movs	r0, #30
 8002102:	f000 fb06 	bl	8002712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002106:	201e      	movs	r0, #30
 8002108:	f000 fb1f 	bl	800274a <HAL_NVIC_EnableIRQ>
}
 800210c:	bf00      	nop
 800210e:	3728      	adds	r7, #40	; 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40000400 	.word	0x40000400
 8002118:	40021000 	.word	0x40021000
 800211c:	40010800 	.word	0x40010800
 8002120:	40000800 	.word	0x40000800
 8002124:	40010c00 	.word	0x40010c00

08002128 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002146:	d142      	bne.n	80021ce <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002148:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <HAL_TIM_MspPostInit+0xb0>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	4a22      	ldr	r2, [pc, #136]	; (80021d8 <HAL_TIM_MspPostInit+0xb0>)
 800214e:	f043 0304 	orr.w	r3, r3, #4
 8002152:	6193      	str	r3, [r2, #24]
 8002154:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <HAL_TIM_MspPostInit+0xb0>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002160:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <HAL_TIM_MspPostInit+0xb0>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4a1c      	ldr	r2, [pc, #112]	; (80021d8 <HAL_TIM_MspPostInit+0xb0>)
 8002166:	f043 0308 	orr.w	r3, r3, #8
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <HAL_TIM_MspPostInit+0xb0>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002178:	2301      	movs	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2302      	movs	r3, #2
 8002182:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	4814      	ldr	r0, [pc, #80]	; (80021dc <HAL_TIM_MspPostInit+0xb4>)
 800218c:	f000 fb6e 	bl	800286c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2302      	movs	r3, #2
 800219c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	480e      	ldr	r0, [pc, #56]	; (80021e0 <HAL_TIM_MspPostInit+0xb8>)
 80021a6:	f000 fb61 	bl	800286c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_TIM_MspPostInit+0xbc>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
 80021c8:	4a06      	ldr	r2, [pc, #24]	; (80021e4 <HAL_TIM_MspPostInit+0xbc>)
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021ce:	bf00      	nop
 80021d0:	3728      	adds	r7, #40	; 0x28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40010800 	.word	0x40010800
 80021e0:	40010c00 	.word	0x40010c00
 80021e4:	40010000 	.word	0x40010000

080021e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021ec:	e7fe      	b.n	80021ec <NMI_Handler+0x4>

080021ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f2:	e7fe      	b.n	80021f2 <HardFault_Handler+0x4>

080021f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <MemManage_Handler+0x4>

080021fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021fe:	e7fe      	b.n	80021fe <BusFault_Handler+0x4>

08002200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <UsageFault_Handler+0x4>

08002206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr

08002212 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800222e:	f000 f95b 	bl	80024e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <TIM1_BRK_IRQHandler+0x10>)
 800223e:	f002 fbe0 	bl	8004a02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	2000044c 	.word	0x2000044c

0800224c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <TIM1_UP_IRQHandler+0x10>)
 8002252:	f002 fbd6 	bl	8004a02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	2000044c 	.word	0x2000044c

08002260 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002264:	4802      	ldr	r0, [pc, #8]	; (8002270 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002266:	f002 fbcc 	bl	8004a02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	2000044c 	.word	0x2000044c

08002274 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <TIM1_CC_IRQHandler+0x10>)
 800227a:	f002 fbc2 	bl	8004a02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	2000044c 	.word	0x2000044c

08002288 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800228c:	4802      	ldr	r0, [pc, #8]	; (8002298 <TIM3_IRQHandler+0x10>)
 800228e:	f002 fbb8 	bl	8004a02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200003d4 	.word	0x200003d4

0800229c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022a0:	4802      	ldr	r0, [pc, #8]	; (80022ac <TIM4_IRQHandler+0x10>)
 80022a2:	f002 fbae 	bl	8004a02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000374 	.word	0x20000374

080022b0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <SPI2_IRQHandler+0x10>)
 80022b6:	f001 fb27 	bl	8003908 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	2000031c 	.word	0x2000031c

080022c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	e00a      	b.n	80022ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022d6:	f3af 8000 	nop.w
 80022da:	4601      	mov	r1, r0
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	60ba      	str	r2, [r7, #8]
 80022e2:	b2ca      	uxtb	r2, r1
 80022e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	3301      	adds	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	dbf0      	blt.n	80022d6 <_read+0x12>
	}

return len;
 80022f4:	687b      	ldr	r3, [r7, #4]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	e009      	b.n	8002324 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	60ba      	str	r2, [r7, #8]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3301      	adds	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	429a      	cmp	r2, r3
 800232a:	dbf1      	blt.n	8002310 <_write+0x12>
	}
	return len;
 800232c:	687b      	ldr	r3, [r7, #4]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <_close>:

int _close(int file)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
	return -1;
 800233e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800235c:	605a      	str	r2, [r3, #4]
	return 0;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <_isatty>:

int _isatty(int file)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
	return 1;
 8002372:	2301      	movs	r3, #1
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
	return 0;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
	...

08002398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a0:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <_sbrk+0x5c>)
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <_sbrk+0x60>)
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023ac:	4b13      	ldr	r3, [pc, #76]	; (80023fc <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d102      	bne.n	80023ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <_sbrk+0x64>)
 80023b6:	4a12      	ldr	r2, [pc, #72]	; (8002400 <_sbrk+0x68>)
 80023b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <_sbrk+0x64>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d207      	bcs.n	80023d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023c8:	f003 f97e 	bl	80056c8 <__errno>
 80023cc:	4602      	mov	r2, r0
 80023ce:	230c      	movs	r3, #12
 80023d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80023d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023d6:	e009      	b.n	80023ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <_sbrk+0x64>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023de:	4b07      	ldr	r3, [pc, #28]	; (80023fc <_sbrk+0x64>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	4a05      	ldr	r2, [pc, #20]	; (80023fc <_sbrk+0x64>)
 80023e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ea:	68fb      	ldr	r3, [r7, #12]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20005000 	.word	0x20005000
 80023f8:	00000400 	.word	0x00000400
 80023fc:	20000310 	.word	0x20000310
 8002400:	200004e8 	.word	0x200004e8

08002404 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002410:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002412:	e003      	b.n	800241c <LoopCopyDataInit>

08002414 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002416:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002418:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800241a:	3104      	adds	r1, #4

0800241c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800241c:	480a      	ldr	r0, [pc, #40]	; (8002448 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002420:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002422:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002424:	d3f6      	bcc.n	8002414 <CopyDataInit>
  ldr r2, =_sbss
 8002426:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002428:	e002      	b.n	8002430 <LoopFillZerobss>

0800242a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800242a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800242c:	f842 3b04 	str.w	r3, [r2], #4

08002430 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002432:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002434:	d3f9      	bcc.n	800242a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002436:	f7ff ffe5 	bl	8002404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800243a:	f003 f94b 	bl	80056d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800243e:	f7ff f9df 	bl	8001800 <main>
  bx lr
 8002442:	4770      	bx	lr
  ldr r3, =_sidata
 8002444:	08007e98 	.word	0x08007e98
  ldr r0, =_sdata
 8002448:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800244c:	20000230 	.word	0x20000230
  ldr r2, =_sbss
 8002450:	20000230 	.word	0x20000230
  ldr r3, = _ebss
 8002454:	200004e4 	.word	0x200004e4

08002458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002458:	e7fe      	b.n	8002458 <ADC1_2_IRQHandler>
	...

0800245c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <HAL_Init+0x28>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a07      	ldr	r2, [pc, #28]	; (8002484 <HAL_Init+0x28>)
 8002466:	f043 0310 	orr.w	r3, r3, #16
 800246a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800246c:	2003      	movs	r0, #3
 800246e:	f000 f945 	bl	80026fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002472:	2000      	movs	r0, #0
 8002474:	f000 f808 	bl	8002488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002478:	f7ff fd04 	bl	8001e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40022000 	.word	0x40022000

08002488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_InitTick+0x54>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_InitTick+0x58>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	4619      	mov	r1, r3
 800249a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249e:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f95d 	bl	8002766 <HAL_SYSTICK_Config>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00e      	b.n	80024d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b0f      	cmp	r3, #15
 80024ba:	d80a      	bhi.n	80024d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024bc:	2200      	movs	r2, #0
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024c4:	f000 f925 	bl	8002712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c8:	4a06      	ldr	r2, [pc, #24]	; (80024e4 <HAL_InitTick+0x5c>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e000      	b.n	80024d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000054 	.word	0x20000054
 80024e0:	2000005c 	.word	0x2000005c
 80024e4:	20000058 	.word	0x20000058

080024e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_IncTick+0x1c>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_IncTick+0x20>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	4a03      	ldr	r2, [pc, #12]	; (8002508 <HAL_IncTick+0x20>)
 80024fa:	6013      	str	r3, [r2, #0]
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	2000005c 	.word	0x2000005c
 8002508:	200004dc 	.word	0x200004dc

0800250c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return uwTick;
 8002510:	4b02      	ldr	r3, [pc, #8]	; (800251c <HAL_GetTick+0x10>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	200004dc 	.word	0x200004dc

08002520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002528:	f7ff fff0 	bl	800250c <HAL_GetTick>
 800252c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002538:	d005      	beq.n	8002546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800253a:	4b09      	ldr	r3, [pc, #36]	; (8002560 <HAL_Delay+0x40>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4413      	add	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002546:	bf00      	nop
 8002548:	f7ff ffe0 	bl	800250c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	429a      	cmp	r2, r3
 8002556:	d8f7      	bhi.n	8002548 <HAL_Delay+0x28>
  {
  }
}
 8002558:	bf00      	nop
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	2000005c 	.word	0x2000005c

08002564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002580:	4013      	ands	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800258c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002596:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	60d3      	str	r3, [r2, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <__NVIC_GetPriorityGrouping+0x18>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	f003 0307 	and.w	r3, r3, #7
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	db0b      	blt.n	80025f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	f003 021f 	and.w	r2, r3, #31
 80025e0:	4906      	ldr	r1, [pc, #24]	; (80025fc <__NVIC_EnableIRQ+0x34>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	2001      	movs	r0, #1
 80025ea:	fa00 f202 	lsl.w	r2, r0, r2
 80025ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	e000e100 	.word	0xe000e100

08002600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	6039      	str	r1, [r7, #0]
 800260a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	2b00      	cmp	r3, #0
 8002612:	db0a      	blt.n	800262a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	b2da      	uxtb	r2, r3
 8002618:	490c      	ldr	r1, [pc, #48]	; (800264c <__NVIC_SetPriority+0x4c>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	440b      	add	r3, r1
 8002624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002628:	e00a      	b.n	8002640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4908      	ldr	r1, [pc, #32]	; (8002650 <__NVIC_SetPriority+0x50>)
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	3b04      	subs	r3, #4
 8002638:	0112      	lsls	r2, r2, #4
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	440b      	add	r3, r1
 800263e:	761a      	strb	r2, [r3, #24]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000e100 	.word	0xe000e100
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	; 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f1c3 0307 	rsb	r3, r3, #7
 800266e:	2b04      	cmp	r3, #4
 8002670:	bf28      	it	cs
 8002672:	2304      	movcs	r3, #4
 8002674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3304      	adds	r3, #4
 800267a:	2b06      	cmp	r3, #6
 800267c:	d902      	bls.n	8002684 <NVIC_EncodePriority+0x30>
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3b03      	subs	r3, #3
 8002682:	e000      	b.n	8002686 <NVIC_EncodePriority+0x32>
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43da      	mvns	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	401a      	ands	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800269c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	43d9      	mvns	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	4313      	orrs	r3, r2
         );
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3724      	adds	r7, #36	; 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c8:	d301      	bcc.n	80026ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ca:	2301      	movs	r3, #1
 80026cc:	e00f      	b.n	80026ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ce:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <SysTick_Config+0x40>)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026d6:	210f      	movs	r1, #15
 80026d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026dc:	f7ff ff90 	bl	8002600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <SysTick_Config+0x40>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026e6:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <SysTick_Config+0x40>)
 80026e8:	2207      	movs	r2, #7
 80026ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	e000e010 	.word	0xe000e010

080026fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ff2d 	bl	8002564 <__NVIC_SetPriorityGrouping>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002712:	b580      	push	{r7, lr}
 8002714:	b086      	sub	sp, #24
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002724:	f7ff ff42 	bl	80025ac <__NVIC_GetPriorityGrouping>
 8002728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	6978      	ldr	r0, [r7, #20]
 8002730:	f7ff ff90 	bl	8002654 <NVIC_EncodePriority>
 8002734:	4602      	mov	r2, r0
 8002736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff5f 	bl	8002600 <__NVIC_SetPriority>
}
 8002742:	bf00      	nop
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	4603      	mov	r3, r0
 8002752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff35 	bl	80025c8 <__NVIC_EnableIRQ>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff ffa2 	bl	80026b8 <SysTick_Config>
 8002774:	4603      	mov	r3, r0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002792:	2b02      	cmp	r3, #2
 8002794:	d005      	beq.n	80027a2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2204      	movs	r2, #4
 800279a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	e051      	b.n	8002846 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 020e 	bic.w	r2, r2, #14
 80027b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0201 	bic.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a22      	ldr	r2, [pc, #136]	; (8002850 <HAL_DMA_Abort_IT+0xd0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d029      	beq.n	8002820 <HAL_DMA_Abort_IT+0xa0>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a20      	ldr	r2, [pc, #128]	; (8002854 <HAL_DMA_Abort_IT+0xd4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d022      	beq.n	800281c <HAL_DMA_Abort_IT+0x9c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a1f      	ldr	r2, [pc, #124]	; (8002858 <HAL_DMA_Abort_IT+0xd8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d01a      	beq.n	8002816 <HAL_DMA_Abort_IT+0x96>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1d      	ldr	r2, [pc, #116]	; (800285c <HAL_DMA_Abort_IT+0xdc>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d012      	beq.n	8002810 <HAL_DMA_Abort_IT+0x90>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1c      	ldr	r2, [pc, #112]	; (8002860 <HAL_DMA_Abort_IT+0xe0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d00a      	beq.n	800280a <HAL_DMA_Abort_IT+0x8a>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1a      	ldr	r2, [pc, #104]	; (8002864 <HAL_DMA_Abort_IT+0xe4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d102      	bne.n	8002804 <HAL_DMA_Abort_IT+0x84>
 80027fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002802:	e00e      	b.n	8002822 <HAL_DMA_Abort_IT+0xa2>
 8002804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002808:	e00b      	b.n	8002822 <HAL_DMA_Abort_IT+0xa2>
 800280a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800280e:	e008      	b.n	8002822 <HAL_DMA_Abort_IT+0xa2>
 8002810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002814:	e005      	b.n	8002822 <HAL_DMA_Abort_IT+0xa2>
 8002816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800281a:	e002      	b.n	8002822 <HAL_DMA_Abort_IT+0xa2>
 800281c:	2310      	movs	r3, #16
 800281e:	e000      	b.n	8002822 <HAL_DMA_Abort_IT+0xa2>
 8002820:	2301      	movs	r3, #1
 8002822:	4a11      	ldr	r2, [pc, #68]	; (8002868 <HAL_DMA_Abort_IT+0xe8>)
 8002824:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	4798      	blx	r3
    } 
  }
  return status;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40020008 	.word	0x40020008
 8002854:	4002001c 	.word	0x4002001c
 8002858:	40020030 	.word	0x40020030
 800285c:	40020044 	.word	0x40020044
 8002860:	40020058 	.word	0x40020058
 8002864:	4002006c 	.word	0x4002006c
 8002868:	40020000 	.word	0x40020000

0800286c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800286c:	b480      	push	{r7}
 800286e:	b08b      	sub	sp, #44	; 0x2c
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800287a:	2300      	movs	r3, #0
 800287c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800287e:	e127      	b.n	8002ad0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002880:	2201      	movs	r2, #1
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	429a      	cmp	r2, r3
 800289a:	f040 8116 	bne.w	8002aca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b12      	cmp	r3, #18
 80028a4:	d034      	beq.n	8002910 <HAL_GPIO_Init+0xa4>
 80028a6:	2b12      	cmp	r3, #18
 80028a8:	d80d      	bhi.n	80028c6 <HAL_GPIO_Init+0x5a>
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d02b      	beq.n	8002906 <HAL_GPIO_Init+0x9a>
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d804      	bhi.n	80028bc <HAL_GPIO_Init+0x50>
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d031      	beq.n	800291a <HAL_GPIO_Init+0xae>
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d01c      	beq.n	80028f4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028ba:	e048      	b.n	800294e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d043      	beq.n	8002948 <HAL_GPIO_Init+0xdc>
 80028c0:	2b11      	cmp	r3, #17
 80028c2:	d01b      	beq.n	80028fc <HAL_GPIO_Init+0x90>
          break;
 80028c4:	e043      	b.n	800294e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028c6:	4a89      	ldr	r2, [pc, #548]	; (8002aec <HAL_GPIO_Init+0x280>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d026      	beq.n	800291a <HAL_GPIO_Init+0xae>
 80028cc:	4a87      	ldr	r2, [pc, #540]	; (8002aec <HAL_GPIO_Init+0x280>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d806      	bhi.n	80028e0 <HAL_GPIO_Init+0x74>
 80028d2:	4a87      	ldr	r2, [pc, #540]	; (8002af0 <HAL_GPIO_Init+0x284>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d020      	beq.n	800291a <HAL_GPIO_Init+0xae>
 80028d8:	4a86      	ldr	r2, [pc, #536]	; (8002af4 <HAL_GPIO_Init+0x288>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01d      	beq.n	800291a <HAL_GPIO_Init+0xae>
          break;
 80028de:	e036      	b.n	800294e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028e0:	4a85      	ldr	r2, [pc, #532]	; (8002af8 <HAL_GPIO_Init+0x28c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d019      	beq.n	800291a <HAL_GPIO_Init+0xae>
 80028e6:	4a85      	ldr	r2, [pc, #532]	; (8002afc <HAL_GPIO_Init+0x290>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d016      	beq.n	800291a <HAL_GPIO_Init+0xae>
 80028ec:	4a84      	ldr	r2, [pc, #528]	; (8002b00 <HAL_GPIO_Init+0x294>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d013      	beq.n	800291a <HAL_GPIO_Init+0xae>
          break;
 80028f2:	e02c      	b.n	800294e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	623b      	str	r3, [r7, #32]
          break;
 80028fa:	e028      	b.n	800294e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	3304      	adds	r3, #4
 8002902:	623b      	str	r3, [r7, #32]
          break;
 8002904:	e023      	b.n	800294e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	3308      	adds	r3, #8
 800290c:	623b      	str	r3, [r7, #32]
          break;
 800290e:	e01e      	b.n	800294e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	330c      	adds	r3, #12
 8002916:	623b      	str	r3, [r7, #32]
          break;
 8002918:	e019      	b.n	800294e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002922:	2304      	movs	r3, #4
 8002924:	623b      	str	r3, [r7, #32]
          break;
 8002926:	e012      	b.n	800294e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d105      	bne.n	800293c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002930:	2308      	movs	r3, #8
 8002932:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	611a      	str	r2, [r3, #16]
          break;
 800293a:	e008      	b.n	800294e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800293c:	2308      	movs	r3, #8
 800293e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	615a      	str	r2, [r3, #20]
          break;
 8002946:	e002      	b.n	800294e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002948:	2300      	movs	r3, #0
 800294a:	623b      	str	r3, [r7, #32]
          break;
 800294c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	2bff      	cmp	r3, #255	; 0xff
 8002952:	d801      	bhi.n	8002958 <HAL_GPIO_Init+0xec>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	e001      	b.n	800295c <HAL_GPIO_Init+0xf0>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3304      	adds	r3, #4
 800295c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	2bff      	cmp	r3, #255	; 0xff
 8002962:	d802      	bhi.n	800296a <HAL_GPIO_Init+0xfe>
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	e002      	b.n	8002970 <HAL_GPIO_Init+0x104>
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	3b08      	subs	r3, #8
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	210f      	movs	r1, #15
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	401a      	ands	r2, r3
 8002982:	6a39      	ldr	r1, [r7, #32]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	431a      	orrs	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 8096 	beq.w	8002aca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800299e:	4b59      	ldr	r3, [pc, #356]	; (8002b04 <HAL_GPIO_Init+0x298>)
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	4a58      	ldr	r2, [pc, #352]	; (8002b04 <HAL_GPIO_Init+0x298>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6193      	str	r3, [r2, #24]
 80029aa:	4b56      	ldr	r3, [pc, #344]	; (8002b04 <HAL_GPIO_Init+0x298>)
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029b6:	4a54      	ldr	r2, [pc, #336]	; (8002b08 <HAL_GPIO_Init+0x29c>)
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	3302      	adds	r3, #2
 80029be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	220f      	movs	r2, #15
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4013      	ands	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4b      	ldr	r2, [pc, #300]	; (8002b0c <HAL_GPIO_Init+0x2a0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_GPIO_Init+0x19e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4a      	ldr	r2, [pc, #296]	; (8002b10 <HAL_GPIO_Init+0x2a4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00d      	beq.n	8002a06 <HAL_GPIO_Init+0x19a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a49      	ldr	r2, [pc, #292]	; (8002b14 <HAL_GPIO_Init+0x2a8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d007      	beq.n	8002a02 <HAL_GPIO_Init+0x196>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a48      	ldr	r2, [pc, #288]	; (8002b18 <HAL_GPIO_Init+0x2ac>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_GPIO_Init+0x192>
 80029fa:	2303      	movs	r3, #3
 80029fc:	e006      	b.n	8002a0c <HAL_GPIO_Init+0x1a0>
 80029fe:	2304      	movs	r3, #4
 8002a00:	e004      	b.n	8002a0c <HAL_GPIO_Init+0x1a0>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e002      	b.n	8002a0c <HAL_GPIO_Init+0x1a0>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_GPIO_Init+0x1a0>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0e:	f002 0203 	and.w	r2, r2, #3
 8002a12:	0092      	lsls	r2, r2, #2
 8002a14:	4093      	lsls	r3, r2
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a1c:	493a      	ldr	r1, [pc, #232]	; (8002b08 <HAL_GPIO_Init+0x29c>)
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	3302      	adds	r3, #2
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d006      	beq.n	8002a44 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a36:	4b39      	ldr	r3, [pc, #228]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4938      	ldr	r1, [pc, #224]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]
 8002a42:	e006      	b.n	8002a52 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a44:	4b35      	ldr	r3, [pc, #212]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	4933      	ldr	r1, [pc, #204]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d006      	beq.n	8002a6c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a5e:	4b2f      	ldr	r3, [pc, #188]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	492e      	ldr	r1, [pc, #184]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
 8002a6a:	e006      	b.n	8002a7a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	4929      	ldr	r1, [pc, #164]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d006      	beq.n	8002a94 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a86:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	4924      	ldr	r1, [pc, #144]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
 8002a92:	e006      	b.n	8002aa2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a94:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	491f      	ldr	r1, [pc, #124]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002aae:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	491a      	ldr	r1, [pc, #104]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60cb      	str	r3, [r1, #12]
 8002aba:	e006      	b.n	8002aca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002abc:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	4915      	ldr	r1, [pc, #84]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	3301      	adds	r3, #1
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f47f aed0 	bne.w	8002880 <HAL_GPIO_Init+0x14>
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	372c      	adds	r7, #44	; 0x2c
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	10210000 	.word	0x10210000
 8002af0:	10110000 	.word	0x10110000
 8002af4:	10120000 	.word	0x10120000
 8002af8:	10310000 	.word	0x10310000
 8002afc:	10320000 	.word	0x10320000
 8002b00:	10220000 	.word	0x10220000
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	40010800 	.word	0x40010800
 8002b10:	40010c00 	.word	0x40010c00
 8002b14:	40011000 	.word	0x40011000
 8002b18:	40011400 	.word	0x40011400
 8002b1c:	40010400 	.word	0x40010400

08002b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	807b      	strh	r3, [r7, #2]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b30:	787b      	ldrb	r3, [r7, #1]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b36:	887a      	ldrh	r2, [r7, #2]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b3c:	e003      	b.n	8002b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b3e:	887b      	ldrh	r3, [r7, #2]
 8002b40:	041a      	lsls	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	611a      	str	r2, [r3, #16]
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e26c      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 8087 	beq.w	8002c7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b70:	4b92      	ldr	r3, [pc, #584]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d00c      	beq.n	8002b96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b7c:	4b8f      	ldr	r3, [pc, #572]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d112      	bne.n	8002bae <HAL_RCC_OscConfig+0x5e>
 8002b88:	4b8c      	ldr	r3, [pc, #560]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b94:	d10b      	bne.n	8002bae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b96:	4b89      	ldr	r3, [pc, #548]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d06c      	beq.n	8002c7c <HAL_RCC_OscConfig+0x12c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d168      	bne.n	8002c7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e246      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x76>
 8002bb8:	4b80      	ldr	r3, [pc, #512]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a7f      	ldr	r2, [pc, #508]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	e02e      	b.n	8002c24 <HAL_RCC_OscConfig+0xd4>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x98>
 8002bce:	4b7b      	ldr	r3, [pc, #492]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a7a      	ldr	r2, [pc, #488]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b78      	ldr	r3, [pc, #480]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a77      	ldr	r2, [pc, #476]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e01d      	b.n	8002c24 <HAL_RCC_OscConfig+0xd4>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0xbc>
 8002bf2:	4b72      	ldr	r3, [pc, #456]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a71      	ldr	r2, [pc, #452]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b6f      	ldr	r3, [pc, #444]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a6e      	ldr	r2, [pc, #440]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e00b      	b.n	8002c24 <HAL_RCC_OscConfig+0xd4>
 8002c0c:	4b6b      	ldr	r3, [pc, #428]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a6a      	ldr	r2, [pc, #424]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b68      	ldr	r3, [pc, #416]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a67      	ldr	r2, [pc, #412]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d013      	beq.n	8002c54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7ff fc6e 	bl	800250c <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c34:	f7ff fc6a 	bl	800250c <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e1fa      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b5d      	ldr	r3, [pc, #372]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0xe4>
 8002c52:	e014      	b.n	8002c7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7ff fc5a 	bl	800250c <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7ff fc56 	bl	800250c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e1e6      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6e:	4b53      	ldr	r3, [pc, #332]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x10c>
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d063      	beq.n	8002d52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c8a:	4b4c      	ldr	r3, [pc, #304]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00b      	beq.n	8002cae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c96:	4b49      	ldr	r3, [pc, #292]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d11c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x18c>
 8002ca2:	4b46      	ldr	r3, [pc, #280]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d116      	bne.n	8002cdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cae:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x176>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e1ba      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc6:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4939      	ldr	r1, [pc, #228]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cda:	e03a      	b.n	8002d52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d020      	beq.n	8002d26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce4:	4b36      	ldr	r3, [pc, #216]	; (8002dc0 <HAL_RCC_OscConfig+0x270>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7ff fc0f 	bl	800250c <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf2:	f7ff fc0b 	bl	800250c <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e19b      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d04:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d10:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4927      	ldr	r1, [pc, #156]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	600b      	str	r3, [r1, #0]
 8002d24:	e015      	b.n	8002d52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d26:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <HAL_RCC_OscConfig+0x270>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7ff fbee 	bl	800250c <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d34:	f7ff fbea 	bl	800250c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e17a      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d46:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d03a      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d019      	beq.n	8002d9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <HAL_RCC_OscConfig+0x274>)
 8002d68:	2201      	movs	r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6c:	f7ff fbce 	bl	800250c <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d74:	f7ff fbca 	bl	800250c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e15a      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d86:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d92:	2001      	movs	r0, #1
 8002d94:	f000 faa8 	bl	80032e8 <RCC_Delay>
 8002d98:	e01c      	b.n	8002dd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <HAL_RCC_OscConfig+0x274>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da0:	f7ff fbb4 	bl	800250c <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da6:	e00f      	b.n	8002dc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da8:	f7ff fbb0 	bl	800250c <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d908      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e140      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	42420000 	.word	0x42420000
 8002dc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc8:	4b9e      	ldr	r3, [pc, #632]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1e9      	bne.n	8002da8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80a6 	beq.w	8002f2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de6:	4b97      	ldr	r3, [pc, #604]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10d      	bne.n	8002e0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	4b94      	ldr	r3, [pc, #592]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	4a93      	ldr	r2, [pc, #588]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	61d3      	str	r3, [r2, #28]
 8002dfe:	4b91      	ldr	r3, [pc, #580]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0e:	4b8e      	ldr	r3, [pc, #568]	; (8003048 <HAL_RCC_OscConfig+0x4f8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d118      	bne.n	8002e4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1a:	4b8b      	ldr	r3, [pc, #556]	; (8003048 <HAL_RCC_OscConfig+0x4f8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a8a      	ldr	r2, [pc, #552]	; (8003048 <HAL_RCC_OscConfig+0x4f8>)
 8002e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e26:	f7ff fb71 	bl	800250c <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2e:	f7ff fb6d 	bl	800250c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b64      	cmp	r3, #100	; 0x64
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0fd      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e40:	4b81      	ldr	r3, [pc, #516]	; (8003048 <HAL_RCC_OscConfig+0x4f8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d106      	bne.n	8002e62 <HAL_RCC_OscConfig+0x312>
 8002e54:	4b7b      	ldr	r3, [pc, #492]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	4a7a      	ldr	r2, [pc, #488]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6213      	str	r3, [r2, #32]
 8002e60:	e02d      	b.n	8002ebe <HAL_RCC_OscConfig+0x36e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x334>
 8002e6a:	4b76      	ldr	r3, [pc, #472]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	4a75      	ldr	r2, [pc, #468]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	6213      	str	r3, [r2, #32]
 8002e76:	4b73      	ldr	r3, [pc, #460]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	4a72      	ldr	r2, [pc, #456]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e7c:	f023 0304 	bic.w	r3, r3, #4
 8002e80:	6213      	str	r3, [r2, #32]
 8002e82:	e01c      	b.n	8002ebe <HAL_RCC_OscConfig+0x36e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b05      	cmp	r3, #5
 8002e8a:	d10c      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x356>
 8002e8c:	4b6d      	ldr	r3, [pc, #436]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	4a6c      	ldr	r2, [pc, #432]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e92:	f043 0304 	orr.w	r3, r3, #4
 8002e96:	6213      	str	r3, [r2, #32]
 8002e98:	4b6a      	ldr	r3, [pc, #424]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	4a69      	ldr	r2, [pc, #420]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6213      	str	r3, [r2, #32]
 8002ea4:	e00b      	b.n	8002ebe <HAL_RCC_OscConfig+0x36e>
 8002ea6:	4b67      	ldr	r3, [pc, #412]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4a66      	ldr	r2, [pc, #408]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002eac:	f023 0301 	bic.w	r3, r3, #1
 8002eb0:	6213      	str	r3, [r2, #32]
 8002eb2:	4b64      	ldr	r3, [pc, #400]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a63      	ldr	r2, [pc, #396]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	f023 0304 	bic.w	r3, r3, #4
 8002ebc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d015      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec6:	f7ff fb21 	bl	800250c <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ece:	f7ff fb1d 	bl	800250c <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e0ab      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee4:	4b57      	ldr	r3, [pc, #348]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ee      	beq.n	8002ece <HAL_RCC_OscConfig+0x37e>
 8002ef0:	e014      	b.n	8002f1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef2:	f7ff fb0b 	bl	800250c <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7ff fb07 	bl	800250c <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e095      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f10:	4b4c      	ldr	r3, [pc, #304]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1ee      	bne.n	8002efa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d105      	bne.n	8002f2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f22:	4b48      	ldr	r3, [pc, #288]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	4a47      	ldr	r2, [pc, #284]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8081 	beq.w	800303a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f38:	4b42      	ldr	r3, [pc, #264]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 030c 	and.w	r3, r3, #12
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d061      	beq.n	8003008 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d146      	bne.n	8002fda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4c:	4b3f      	ldr	r3, [pc, #252]	; (800304c <HAL_RCC_OscConfig+0x4fc>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f52:	f7ff fadb 	bl	800250c <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5a:	f7ff fad7 	bl	800250c <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e067      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f6c:	4b35      	ldr	r3, [pc, #212]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f0      	bne.n	8002f5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f80:	d108      	bne.n	8002f94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f82:	4b30      	ldr	r3, [pc, #192]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	492d      	ldr	r1, [pc, #180]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f94:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a19      	ldr	r1, [r3, #32]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	4927      	ldr	r1, [pc, #156]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fac:	4b27      	ldr	r3, [pc, #156]	; (800304c <HAL_RCC_OscConfig+0x4fc>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb2:	f7ff faab 	bl	800250c <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fba:	f7ff faa7 	bl	800250c <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e037      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x46a>
 8002fd8:	e02f      	b.n	800303a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	4b1c      	ldr	r3, [pc, #112]	; (800304c <HAL_RCC_OscConfig+0x4fc>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7ff fa94 	bl	800250c <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7ff fa90 	bl	800250c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e020      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffa:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x498>
 8003006:	e018      	b.n	800303a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e013      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	429a      	cmp	r2, r3
 8003026:	d106      	bne.n	8003036 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003032:	429a      	cmp	r2, r3
 8003034:	d001      	beq.n	800303a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40021000 	.word	0x40021000
 8003048:	40007000 	.word	0x40007000
 800304c:	42420060 	.word	0x42420060

08003050 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0d0      	b.n	8003206 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003064:	4b6a      	ldr	r3, [pc, #424]	; (8003210 <HAL_RCC_ClockConfig+0x1c0>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d910      	bls.n	8003094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003072:	4b67      	ldr	r3, [pc, #412]	; (8003210 <HAL_RCC_ClockConfig+0x1c0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 0207 	bic.w	r2, r3, #7
 800307a:	4965      	ldr	r1, [pc, #404]	; (8003210 <HAL_RCC_ClockConfig+0x1c0>)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b63      	ldr	r3, [pc, #396]	; (8003210 <HAL_RCC_ClockConfig+0x1c0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0b8      	b.n	8003206 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d020      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030ac:	4b59      	ldr	r3, [pc, #356]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a58      	ldr	r2, [pc, #352]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c4:	4b53      	ldr	r3, [pc, #332]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4a52      	ldr	r2, [pc, #328]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d0:	4b50      	ldr	r3, [pc, #320]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	494d      	ldr	r1, [pc, #308]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d040      	beq.n	8003170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	4b47      	ldr	r3, [pc, #284]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d115      	bne.n	800312e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e07f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d107      	bne.n	800311e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310e:	4b41      	ldr	r3, [pc, #260]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d109      	bne.n	800312e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e073      	b.n	8003206 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311e:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e06b      	b.n	8003206 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800312e:	4b39      	ldr	r3, [pc, #228]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f023 0203 	bic.w	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4936      	ldr	r1, [pc, #216]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003140:	f7ff f9e4 	bl	800250c <HAL_GetTick>
 8003144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003146:	e00a      	b.n	800315e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003148:	f7ff f9e0 	bl	800250c <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	f241 3288 	movw	r2, #5000	; 0x1388
 8003156:	4293      	cmp	r3, r2
 8003158:	d901      	bls.n	800315e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e053      	b.n	8003206 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315e:	4b2d      	ldr	r3, [pc, #180]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 020c 	and.w	r2, r3, #12
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	429a      	cmp	r2, r3
 800316e:	d1eb      	bne.n	8003148 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003170:	4b27      	ldr	r3, [pc, #156]	; (8003210 <HAL_RCC_ClockConfig+0x1c0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d210      	bcs.n	80031a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317e:	4b24      	ldr	r3, [pc, #144]	; (8003210 <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 0207 	bic.w	r2, r3, #7
 8003186:	4922      	ldr	r1, [pc, #136]	; (8003210 <HAL_RCC_ClockConfig+0x1c0>)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	4313      	orrs	r3, r2
 800318c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318e:	4b20      	ldr	r3, [pc, #128]	; (8003210 <HAL_RCC_ClockConfig+0x1c0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e032      	b.n	8003206 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4916      	ldr	r1, [pc, #88]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	490e      	ldr	r1, [pc, #56]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031de:	f000 f821 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 80031e2:	4601      	mov	r1, r0
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80031f0:	5cd3      	ldrb	r3, [r2, r3]
 80031f2:	fa21 f303 	lsr.w	r3, r1, r3
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <HAL_RCC_ClockConfig+0x1cc>)
 80031f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_RCC_ClockConfig+0x1d0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff f942 	bl	8002488 <HAL_InitTick>

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40022000 	.word	0x40022000
 8003214:	40021000 	.word	0x40021000
 8003218:	08007bac 	.word	0x08007bac
 800321c:	20000054 	.word	0x20000054
 8003220:	20000058 	.word	0x20000058

08003224 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003224:	b490      	push	{r4, r7}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800322a:	4b2a      	ldr	r3, [pc, #168]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800322c:	1d3c      	adds	r4, r7, #4
 800322e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003234:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	2300      	movs	r3, #0
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	2300      	movs	r3, #0
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800324e:	4b23      	ldr	r3, [pc, #140]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b04      	cmp	r3, #4
 800325c:	d002      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x40>
 800325e:	2b08      	cmp	r3, #8
 8003260:	d003      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0x46>
 8003262:	e02d      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003264:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003266:	623b      	str	r3, [r7, #32]
      break;
 8003268:	e02d      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	0c9b      	lsrs	r3, r3, #18
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003276:	4413      	add	r3, r2
 8003278:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800327c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003288:	4b14      	ldr	r3, [pc, #80]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	0c5b      	lsrs	r3, r3, #17
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003296:	4413      	add	r3, r2
 8003298:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800329c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032a2:	fb02 f203 	mul.w	r2, r2, r3
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
 80032ae:	e004      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	4a0c      	ldr	r2, [pc, #48]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032b4:	fb02 f303 	mul.w	r3, r2, r3
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	623b      	str	r3, [r7, #32]
      break;
 80032be:	e002      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032c2:	623b      	str	r3, [r7, #32]
      break;
 80032c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c6:	6a3b      	ldr	r3, [r7, #32]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3728      	adds	r7, #40	; 0x28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc90      	pop	{r4, r7}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	08007b98 	.word	0x08007b98
 80032d8:	08007ba8 	.word	0x08007ba8
 80032dc:	40021000 	.word	0x40021000
 80032e0:	007a1200 	.word	0x007a1200
 80032e4:	003d0900 	.word	0x003d0900

080032e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <RCC_Delay+0x34>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <RCC_Delay+0x38>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	0a5b      	lsrs	r3, r3, #9
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	fb02 f303 	mul.w	r3, r2, r3
 8003302:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003304:	bf00      	nop
  }
  while (Delay --);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1e5a      	subs	r2, r3, #1
 800330a:	60fa      	str	r2, [r7, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f9      	bne.n	8003304 <RCC_Delay+0x1c>
}
 8003310:	bf00      	nop
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20000054 	.word	0x20000054
 8003320:	10624dd3 	.word	0x10624dd3

08003324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e076      	b.n	8003424 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d108      	bne.n	8003350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003346:	d009      	beq.n	800335c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	61da      	str	r2, [r3, #28]
 800334e:	e005      	b.n	800335c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fe fdb6 	bl	8001ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003392:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e0:	ea42 0103 	orr.w	r1, r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	0c1a      	lsrs	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f002 0204 	and.w	r2, r2, #4
 8003402:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003412:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_SPI_Transmit+0x22>
 800344a:	2302      	movs	r3, #2
 800344c:	e126      	b.n	800369c <HAL_SPI_Transmit+0x270>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003456:	f7ff f859 	bl	800250c <HAL_GetTick>
 800345a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	d002      	beq.n	8003472 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800346c:	2302      	movs	r3, #2
 800346e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003470:	e10b      	b.n	800368a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_SPI_Transmit+0x52>
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d102      	bne.n	8003484 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003482:	e102      	b.n	800368a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2203      	movs	r2, #3
 8003488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	88fa      	ldrh	r2, [r7, #6]
 800349c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	88fa      	ldrh	r2, [r7, #6]
 80034a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ca:	d10f      	bne.n	80034ec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f6:	2b40      	cmp	r3, #64	; 0x40
 80034f8:	d007      	beq.n	800350a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003508:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003512:	d14b      	bne.n	80035ac <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <HAL_SPI_Transmit+0xf6>
 800351c:	8afb      	ldrh	r3, [r7, #22]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d13e      	bne.n	80035a0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	881a      	ldrh	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	1c9a      	adds	r2, r3, #2
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003546:	e02b      	b.n	80035a0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d112      	bne.n	800357c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	881a      	ldrh	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	1c9a      	adds	r2, r3, #2
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	86da      	strh	r2, [r3, #54]	; 0x36
 800357a:	e011      	b.n	80035a0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800357c:	f7fe ffc6 	bl	800250c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d803      	bhi.n	8003594 <HAL_SPI_Transmit+0x168>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003592:	d102      	bne.n	800359a <HAL_SPI_Transmit+0x16e>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d102      	bne.n	80035a0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800359e:	e074      	b.n	800368a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1ce      	bne.n	8003548 <HAL_SPI_Transmit+0x11c>
 80035aa:	e04c      	b.n	8003646 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <HAL_SPI_Transmit+0x18e>
 80035b4:	8afb      	ldrh	r3, [r7, #22]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d140      	bne.n	800363c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	330c      	adds	r3, #12
 80035c4:	7812      	ldrb	r2, [r2, #0]
 80035c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035e0:	e02c      	b.n	800363c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d113      	bne.n	8003618 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	330c      	adds	r3, #12
 80035fa:	7812      	ldrb	r2, [r2, #0]
 80035fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	86da      	strh	r2, [r3, #54]	; 0x36
 8003616:	e011      	b.n	800363c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003618:	f7fe ff78 	bl	800250c <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d803      	bhi.n	8003630 <HAL_SPI_Transmit+0x204>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800362e:	d102      	bne.n	8003636 <HAL_SPI_Transmit+0x20a>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d102      	bne.n	800363c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	77fb      	strb	r3, [r7, #31]
          goto error;
 800363a:	e026      	b.n	800368a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1cd      	bne.n	80035e2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	6839      	ldr	r1, [r7, #0]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 fc4e 	bl	8003eec <SPI_EndRxTxTransaction>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2220      	movs	r2, #32
 800365a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003664:	2300      	movs	r3, #0
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	77fb      	strb	r3, [r7, #31]
 8003686:	e000      	b.n	800368a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003688:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800369a:	7ffb      	ldrb	r3, [r7, #31]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d110      	bne.n	80036e0 <HAL_SPI_Receive_IT+0x3c>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036c6:	d10b      	bne.n	80036e0 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2204      	movs	r2, #4
 80036cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f882 	bl	80037e0 <HAL_SPI_TransmitReceive_IT>
 80036dc:	4603      	mov	r3, r0
 80036de:	e076      	b.n	80037ce <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_SPI_Receive_IT+0x4a>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e06f      	b.n	80037ce <HAL_SPI_Receive_IT+0x12a>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d002      	beq.n	8003708 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8003702:	2302      	movs	r3, #2
 8003704:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003706:	e05d      	b.n	80037c4 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_SPI_Receive_IT+0x70>
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d102      	bne.n	800371a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003718:	e054      	b.n	80037c4 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2204      	movs	r2, #4
 800371e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	88fa      	ldrh	r2, [r7, #6]
 8003732:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	88fa      	ldrh	r2, [r7, #6]
 8003738:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4a1e      	ldr	r2, [pc, #120]	; (80037d8 <HAL_SPI_Receive_IT+0x134>)
 800375e:	641a      	str	r2, [r3, #64]	; 0x40
 8003760:	e002      	b.n	8003768 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4a1d      	ldr	r2, [pc, #116]	; (80037dc <HAL_SPI_Receive_IT+0x138>)
 8003766:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003770:	d10f      	bne.n	8003792 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003780:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003790:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80037a0:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	d008      	beq.n	80037c2 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	e000      	b.n	80037c4 <HAL_SPI_Receive_IT+0x120>
  }

error :
 80037c2:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	08003cf1 	.word	0x08003cf1
 80037dc:	08003ca7 	.word	0x08003ca7

080037e0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_SPI_TransmitReceive_IT+0x20>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e075      	b.n	80038ec <HAL_SPI_TransmitReceive_IT+0x10c>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800380e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003816:	7dbb      	ldrb	r3, [r7, #22]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d00d      	beq.n	8003838 <HAL_SPI_TransmitReceive_IT+0x58>
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003822:	d106      	bne.n	8003832 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <HAL_SPI_TransmitReceive_IT+0x52>
 800382c:	7dbb      	ldrb	r3, [r7, #22]
 800382e:	2b04      	cmp	r3, #4
 8003830:	d002      	beq.n	8003838 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8003832:	2302      	movs	r3, #2
 8003834:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003836:	e054      	b.n	80038e2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <HAL_SPI_TransmitReceive_IT+0x6a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_SPI_TransmitReceive_IT+0x6a>
 8003844:	887b      	ldrh	r3, [r7, #2]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d102      	bne.n	8003850 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800384e:	e048      	b.n	80038e2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b04      	cmp	r3, #4
 800385a:	d003      	beq.n	8003864 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2205      	movs	r2, #5
 8003860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	887a      	ldrh	r2, [r7, #2]
 8003874:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	887a      	ldrh	r2, [r7, #2]
 800387a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	887a      	ldrh	r2, [r7, #2]
 8003886:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d006      	beq.n	80038a4 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4a17      	ldr	r2, [pc, #92]	; (80038f8 <HAL_SPI_TransmitReceive_IT+0x118>)
 800389a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4a17      	ldr	r2, [pc, #92]	; (80038fc <HAL_SPI_TransmitReceive_IT+0x11c>)
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44
 80038a2:	e005      	b.n	80038b0 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4a16      	ldr	r2, [pc, #88]	; (8003900 <HAL_SPI_TransmitReceive_IT+0x120>)
 80038a8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4a15      	ldr	r2, [pc, #84]	; (8003904 <HAL_SPI_TransmitReceive_IT+0x124>)
 80038ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80038be:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b40      	cmp	r3, #64	; 0x40
 80038cc:	d008      	beq.n	80038e0 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	e000      	b.n	80038e2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80038e0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	08003be9 	.word	0x08003be9
 80038fc:	08003c49 	.word	0x08003c49
 8003900:	08003b25 	.word	0x08003b25
 8003904:	08003b89 	.word	0x08003b89

08003908 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	099b      	lsrs	r3, r3, #6
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10f      	bne.n	800394c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	099b      	lsrs	r3, r3, #6
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d004      	beq.n	800394c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	4798      	blx	r3
    return;
 800394a:	e0bf      	b.n	8003acc <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	085b      	lsrs	r3, r3, #1
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <HAL_SPI_IRQHandler+0x66>
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	09db      	lsrs	r3, r3, #7
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d004      	beq.n	800396e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4798      	blx	r3
    return;
 800396c:	e0ae      	b.n	8003acc <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_SPI_IRQHandler+0x80>
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	099b      	lsrs	r3, r3, #6
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80a2 	beq.w	8003acc <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 809b 	beq.w	8003acc <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	099b      	lsrs	r3, r3, #6
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d023      	beq.n	80039ea <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d011      	beq.n	80039d2 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b2:	f043 0204 	orr.w	r2, r3, #4
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	e00b      	b.n	80039ea <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	693b      	ldr	r3, [r7, #16]
        return;
 80039e8:	e070      	b.n	8003acc <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d014      	beq.n	8003a20 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	f043 0201 	orr.w	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d050      	beq.n	8003aca <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a36:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d104      	bne.n	8003a54 <HAL_SPI_IRQHandler+0x14c>
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d034      	beq.n	8003abe <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0203 	bic.w	r2, r2, #3
 8003a62:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d011      	beq.n	8003a90 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a70:	4a18      	ldr	r2, [pc, #96]	; (8003ad4 <HAL_SPI_IRQHandler+0x1cc>)
 8003a72:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe fe81 	bl	8002780 <HAL_DMA_Abort_IT>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d016      	beq.n	8003ac6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9c:	4a0d      	ldr	r2, [pc, #52]	; (8003ad4 <HAL_SPI_IRQHandler+0x1cc>)
 8003a9e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fe fe6b 	bl	8002780 <HAL_DMA_Abort_IT>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003abc:	e003      	b.n	8003ac6 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f813 	bl	8003aea <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003ac4:	e000      	b.n	8003ac8 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003ac6:	bf00      	nop
    return;
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
  }
}
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	08003afd 	.word	0x08003afd

08003ad8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr

08003aea <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr

08003afc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f7ff ffe7 	bl	8003aea <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b1c:	bf00      	nop
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f103 020c 	add.w	r2, r3, #12
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	7812      	ldrb	r2, [r2, #0]
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10f      	bne.n	8003b80 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b6e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d102      	bne.n	8003b80 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f9d4 	bl	8003f28 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	330c      	adds	r3, #12
 8003b9a:	7812      	ldrb	r2, [r2, #0]
 8003b9c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10f      	bne.n	8003be0 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bce:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d102      	bne.n	8003be0 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f9a4 	bl	8003f28 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003be0:	bf00      	nop
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	b292      	uxth	r2, r2
 8003bfc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	1c9a      	adds	r2, r3, #2
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10f      	bne.n	8003c40 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c2e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d102      	bne.n	8003c40 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f974 	bl	8003f28 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c40:	bf00      	nop
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	881a      	ldrh	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	1c9a      	adds	r2, r3, #2
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10f      	bne.n	8003c9e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c8c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d102      	bne.n	8003c9e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f945 	bl	8003f28 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f103 020c 	add.w	r2, r3, #12
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	7812      	ldrb	r2, [r2, #0]
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d102      	bne.n	8003ce8 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f994 	bl	8004010 <SPI_CloseRx_ISR>
  }
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d02:	b292      	uxth	r2, r2
 8003d04:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	1c9a      	adds	r2, r3, #2
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d102      	bne.n	8003d2e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f971 	bl	8004010 <SPI_CloseRx_ISR>
  }
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	4613      	mov	r3, r2
 8003d46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d48:	f7fe fbe0 	bl	800250c <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	4413      	add	r3, r2
 8003d56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d58:	f7fe fbd8 	bl	800250c <HAL_GetTick>
 8003d5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d5e:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	015b      	lsls	r3, r3, #5
 8003d64:	0d1b      	lsrs	r3, r3, #20
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	fb02 f303 	mul.w	r3, r2, r3
 8003d6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d6e:	e054      	b.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d76:	d050      	beq.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d78:	f7fe fbc8 	bl	800250c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d902      	bls.n	8003d8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d13d      	bne.n	8003e0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003da6:	d111      	bne.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db0:	d004      	beq.n	8003dbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dba:	d107      	bne.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd4:	d10f      	bne.n	8003df6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003df4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e017      	b.n	8003e3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4013      	ands	r3, r2
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	bf0c      	ite	eq
 8003e2a:	2301      	moveq	r3, #1
 8003e2c:	2300      	movne	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d19b      	bne.n	8003d70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000054 	.word	0x20000054

08003e48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e5c:	d111      	bne.n	8003e82 <SPI_EndRxTransaction+0x3a>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e66:	d004      	beq.n	8003e72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e70:	d107      	bne.n	8003e82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e80:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e8a:	d117      	bne.n	8003ebc <SPI_EndRxTransaction+0x74>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e94:	d112      	bne.n	8003ebc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff ff49 	bl	8003d38 <SPI_WaitFlagStateUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01a      	beq.n	8003ee2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb0:	f043 0220 	orr.w	r2, r3, #32
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e013      	b.n	8003ee4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2180      	movs	r1, #128	; 0x80
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f7ff ff36 	bl	8003d38 <SPI_WaitFlagStateUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	f043 0220 	orr.w	r2, r3, #32
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e000      	b.n	8003ee4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2200      	movs	r2, #0
 8003f00:	2180      	movs	r1, #128	; 0x80
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff ff18 	bl	8003d38 <SPI_WaitFlagStateUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d007      	beq.n	8003f1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	f043 0220 	orr.w	r2, r3, #32
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e000      	b.n	8003f20 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003f30:	4b35      	ldr	r3, [pc, #212]	; (8004008 <SPI_CloseRxTx_ISR+0xe0>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a35      	ldr	r2, [pc, #212]	; (800400c <SPI_CloseRxTx_ISR+0xe4>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	0a5b      	lsrs	r3, r3, #9
 8003f3c:	2264      	movs	r2, #100	; 0x64
 8003f3e:	fb02 f303 	mul.w	r3, r2, r3
 8003f42:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f44:	f7fe fae2 	bl	800250c <HAL_GetTick>
 8003f48:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0220 	bic.w	r2, r2, #32
 8003f58:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d106      	bne.n	8003f6e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f64:	f043 0220 	orr.w	r2, r3, #32
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f6c:	e009      	b.n	8003f82 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0eb      	beq.n	8003f5a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	2164      	movs	r1, #100	; 0x64
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff ffb0 	bl	8003eec <SPI_EndRxTxTransaction>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d005      	beq.n	8003f9e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f96:	f043 0220 	orr.w	r2, r3, #32
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10a      	bne.n	8003fbc <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d115      	bne.n	8003ff0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d107      	bne.n	8003fe0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fd fb89 	bl	80016f0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003fde:	e00e      	b.n	8003ffe <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff fd75 	bl	8003ad8 <HAL_SPI_TxRxCpltCallback>
}
 8003fee:	e006      	b.n	8003ffe <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff fd76 	bl	8003aea <HAL_SPI_ErrorCallback>
}
 8003ffe:	bf00      	nop
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20000054 	.word	0x20000054
 800400c:	057619f1 	.word	0x057619f1

08004010 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004026:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004028:	f7fe fa70 	bl	800250c <HAL_GetTick>
 800402c:	4603      	mov	r3, r0
 800402e:	461a      	mov	r2, r3
 8004030:	2164      	movs	r1, #100	; 0x64
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff ff08 	bl	8003e48 <SPI_EndRxTransaction>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10a      	bne.n	8004068 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004074:	2b00      	cmp	r3, #0
 8004076:	d103      	bne.n	8004080 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7fd fb39 	bl	80016f0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800407e:	e002      	b.n	8004086 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff fd32 	bl	8003aea <HAL_SPI_ErrorCallback>
}
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e041      	b.n	8004124 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d106      	bne.n	80040ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7fd ff6b 	bl	8001f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2202      	movs	r2, #2
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3304      	adds	r3, #4
 80040ca:	4619      	mov	r1, r3
 80040cc:	4610      	mov	r0, r2
 80040ce:	f000 ff93 	bl	8004ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b01      	cmp	r3, #1
 800413e:	d001      	beq.n	8004144 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e032      	b.n	80041aa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a18      	ldr	r2, [pc, #96]	; (80041b4 <HAL_TIM_Base_Start+0x88>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00e      	beq.n	8004174 <HAL_TIM_Base_Start+0x48>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415e:	d009      	beq.n	8004174 <HAL_TIM_Base_Start+0x48>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a14      	ldr	r2, [pc, #80]	; (80041b8 <HAL_TIM_Base_Start+0x8c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d004      	beq.n	8004174 <HAL_TIM_Base_Start+0x48>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a13      	ldr	r2, [pc, #76]	; (80041bc <HAL_TIM_Base_Start+0x90>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d111      	bne.n	8004198 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b06      	cmp	r3, #6
 8004184:	d010      	beq.n	80041a8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0201 	orr.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004196:	e007      	b.n	80041a8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr
 80041b4:	40012c00 	.word	0x40012c00
 80041b8:	40000400 	.word	0x40000400
 80041bc:	40000800 	.word	0x40000800

080041c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d001      	beq.n	80041d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e03a      	b.n	800424e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a18      	ldr	r2, [pc, #96]	; (8004258 <HAL_TIM_Base_Start_IT+0x98>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00e      	beq.n	8004218 <HAL_TIM_Base_Start_IT+0x58>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004202:	d009      	beq.n	8004218 <HAL_TIM_Base_Start_IT+0x58>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a14      	ldr	r2, [pc, #80]	; (800425c <HAL_TIM_Base_Start_IT+0x9c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <HAL_TIM_Base_Start_IT+0x58>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a13      	ldr	r2, [pc, #76]	; (8004260 <HAL_TIM_Base_Start_IT+0xa0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d111      	bne.n	800423c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b06      	cmp	r3, #6
 8004228:	d010      	beq.n	800424c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0201 	orr.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423a:	e007      	b.n	800424c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr
 8004258:	40012c00 	.word	0x40012c00
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800

08004264 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e041      	b.n	80042fa <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f839 	bl	8004302 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3304      	adds	r3, #4
 80042a0:	4619      	mov	r1, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	f000 fea8 	bl	8004ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d109      	bne.n	8004338 <HAL_TIM_OC_Start_IT+0x24>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b01      	cmp	r3, #1
 800432e:	bf14      	ite	ne
 8004330:	2301      	movne	r3, #1
 8004332:	2300      	moveq	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	e022      	b.n	800437e <HAL_TIM_OC_Start_IT+0x6a>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b04      	cmp	r3, #4
 800433c:	d109      	bne.n	8004352 <HAL_TIM_OC_Start_IT+0x3e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b01      	cmp	r3, #1
 8004348:	bf14      	ite	ne
 800434a:	2301      	movne	r3, #1
 800434c:	2300      	moveq	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	e015      	b.n	800437e <HAL_TIM_OC_Start_IT+0x6a>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b08      	cmp	r3, #8
 8004356:	d109      	bne.n	800436c <HAL_TIM_OC_Start_IT+0x58>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	e008      	b.n	800437e <HAL_TIM_OC_Start_IT+0x6a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b01      	cmp	r3, #1
 8004376:	bf14      	ite	ne
 8004378:	2301      	movne	r3, #1
 800437a:	2300      	moveq	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e0a4      	b.n	80044d0 <HAL_TIM_OC_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d104      	bne.n	8004396 <HAL_TIM_OC_Start_IT+0x82>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004394:	e013      	b.n	80043be <HAL_TIM_OC_Start_IT+0xaa>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b04      	cmp	r3, #4
 800439a:	d104      	bne.n	80043a6 <HAL_TIM_OC_Start_IT+0x92>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a4:	e00b      	b.n	80043be <HAL_TIM_OC_Start_IT+0xaa>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d104      	bne.n	80043b6 <HAL_TIM_OC_Start_IT+0xa2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043b4:	e003      	b.n	80043be <HAL_TIM_OC_Start_IT+0xaa>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b0c      	cmp	r3, #12
 80043c2:	d841      	bhi.n	8004448 <HAL_TIM_OC_Start_IT+0x134>
 80043c4:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <HAL_TIM_OC_Start_IT+0xb8>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	08004401 	.word	0x08004401
 80043d0:	08004449 	.word	0x08004449
 80043d4:	08004449 	.word	0x08004449
 80043d8:	08004449 	.word	0x08004449
 80043dc:	08004413 	.word	0x08004413
 80043e0:	08004449 	.word	0x08004449
 80043e4:	08004449 	.word	0x08004449
 80043e8:	08004449 	.word	0x08004449
 80043ec:	08004425 	.word	0x08004425
 80043f0:	08004449 	.word	0x08004449
 80043f4:	08004449 	.word	0x08004449
 80043f8:	08004449 	.word	0x08004449
 80043fc:	08004437 	.word	0x08004437
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0202 	orr.w	r2, r2, #2
 800440e:	60da      	str	r2, [r3, #12]
      break;
 8004410:	e01b      	b.n	800444a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0204 	orr.w	r2, r2, #4
 8004420:	60da      	str	r2, [r3, #12]
      break;
 8004422:	e012      	b.n	800444a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0208 	orr.w	r2, r2, #8
 8004432:	60da      	str	r2, [r3, #12]
      break;
 8004434:	e009      	b.n	800444a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0210 	orr.w	r2, r2, #16
 8004444:	60da      	str	r2, [r3, #12]
      break;
 8004446:	e000      	b.n	800444a <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8004448:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2201      	movs	r2, #1
 8004450:	6839      	ldr	r1, [r7, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f001 f850 	bl	80054f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a1e      	ldr	r2, [pc, #120]	; (80044d8 <HAL_TIM_OC_Start_IT+0x1c4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d107      	bne.n	8004472 <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004470:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a18      	ldr	r2, [pc, #96]	; (80044d8 <HAL_TIM_OC_Start_IT+0x1c4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00e      	beq.n	800449a <HAL_TIM_OC_Start_IT+0x186>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004484:	d009      	beq.n	800449a <HAL_TIM_OC_Start_IT+0x186>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a14      	ldr	r2, [pc, #80]	; (80044dc <HAL_TIM_OC_Start_IT+0x1c8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_TIM_OC_Start_IT+0x186>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a12      	ldr	r2, [pc, #72]	; (80044e0 <HAL_TIM_OC_Start_IT+0x1cc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d111      	bne.n	80044be <HAL_TIM_OC_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b06      	cmp	r3, #6
 80044aa:	d010      	beq.n	80044ce <HAL_TIM_OC_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044bc:	e007      	b.n	80044ce <HAL_TIM_OC_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0201 	orr.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40012c00 	.word	0x40012c00
 80044dc:	40000400 	.word	0x40000400
 80044e0:	40000800 	.word	0x40000800

080044e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e041      	b.n	800457a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f839 	bl	8004582 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3304      	adds	r3, #4
 8004520:	4619      	mov	r1, r3
 8004522:	4610      	mov	r0, r2
 8004524:	f000 fd68 	bl	8004ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr

08004594 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d109      	bne.n	80045b8 <HAL_TIM_PWM_Start_IT+0x24>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	bf14      	ite	ne
 80045b0:	2301      	movne	r3, #1
 80045b2:	2300      	moveq	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	e022      	b.n	80045fe <HAL_TIM_PWM_Start_IT+0x6a>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d109      	bne.n	80045d2 <HAL_TIM_PWM_Start_IT+0x3e>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	bf14      	ite	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	2300      	moveq	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	e015      	b.n	80045fe <HAL_TIM_PWM_Start_IT+0x6a>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d109      	bne.n	80045ec <HAL_TIM_PWM_Start_IT+0x58>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	bf14      	ite	ne
 80045e4:	2301      	movne	r3, #1
 80045e6:	2300      	moveq	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	e008      	b.n	80045fe <HAL_TIM_PWM_Start_IT+0x6a>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	bf14      	ite	ne
 80045f8:	2301      	movne	r3, #1
 80045fa:	2300      	moveq	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e0a4      	b.n	8004750 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d104      	bne.n	8004616 <HAL_TIM_PWM_Start_IT+0x82>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004614:	e013      	b.n	800463e <HAL_TIM_PWM_Start_IT+0xaa>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b04      	cmp	r3, #4
 800461a:	d104      	bne.n	8004626 <HAL_TIM_PWM_Start_IT+0x92>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004624:	e00b      	b.n	800463e <HAL_TIM_PWM_Start_IT+0xaa>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b08      	cmp	r3, #8
 800462a:	d104      	bne.n	8004636 <HAL_TIM_PWM_Start_IT+0xa2>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004634:	e003      	b.n	800463e <HAL_TIM_PWM_Start_IT+0xaa>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2202      	movs	r2, #2
 800463a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b0c      	cmp	r3, #12
 8004642:	d841      	bhi.n	80046c8 <HAL_TIM_PWM_Start_IT+0x134>
 8004644:	a201      	add	r2, pc, #4	; (adr r2, 800464c <HAL_TIM_PWM_Start_IT+0xb8>)
 8004646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464a:	bf00      	nop
 800464c:	08004681 	.word	0x08004681
 8004650:	080046c9 	.word	0x080046c9
 8004654:	080046c9 	.word	0x080046c9
 8004658:	080046c9 	.word	0x080046c9
 800465c:	08004693 	.word	0x08004693
 8004660:	080046c9 	.word	0x080046c9
 8004664:	080046c9 	.word	0x080046c9
 8004668:	080046c9 	.word	0x080046c9
 800466c:	080046a5 	.word	0x080046a5
 8004670:	080046c9 	.word	0x080046c9
 8004674:	080046c9 	.word	0x080046c9
 8004678:	080046c9 	.word	0x080046c9
 800467c:	080046b7 	.word	0x080046b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0202 	orr.w	r2, r2, #2
 800468e:	60da      	str	r2, [r3, #12]
      break;
 8004690:	e01b      	b.n	80046ca <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0204 	orr.w	r2, r2, #4
 80046a0:	60da      	str	r2, [r3, #12]
      break;
 80046a2:	e012      	b.n	80046ca <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0208 	orr.w	r2, r2, #8
 80046b2:	60da      	str	r2, [r3, #12]
      break;
 80046b4:	e009      	b.n	80046ca <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0210 	orr.w	r2, r2, #16
 80046c4:	60da      	str	r2, [r3, #12]
      break;
 80046c6:	e000      	b.n	80046ca <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 80046c8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2201      	movs	r2, #1
 80046d0:	6839      	ldr	r1, [r7, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 ff10 	bl	80054f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1e      	ldr	r2, [pc, #120]	; (8004758 <HAL_TIM_PWM_Start_IT+0x1c4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d107      	bne.n	80046f2 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a18      	ldr	r2, [pc, #96]	; (8004758 <HAL_TIM_PWM_Start_IT+0x1c4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00e      	beq.n	800471a <HAL_TIM_PWM_Start_IT+0x186>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004704:	d009      	beq.n	800471a <HAL_TIM_PWM_Start_IT+0x186>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a14      	ldr	r2, [pc, #80]	; (800475c <HAL_TIM_PWM_Start_IT+0x1c8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d004      	beq.n	800471a <HAL_TIM_PWM_Start_IT+0x186>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a12      	ldr	r2, [pc, #72]	; (8004760 <HAL_TIM_PWM_Start_IT+0x1cc>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d111      	bne.n	800473e <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b06      	cmp	r3, #6
 800472a:	d010      	beq.n	800474e <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473c:	e007      	b.n	800474e <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0201 	orr.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40012c00 	.word	0x40012c00
 800475c:	40000400 	.word	0x40000400
 8004760:	40000800 	.word	0x40000800

08004764 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e093      	b.n	80048a0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d106      	bne.n	8004792 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7fd fc4f 	bl	8002030 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2202      	movs	r2, #2
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047a8:	f023 0307 	bic.w	r3, r3, #7
 80047ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3304      	adds	r3, #4
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f000 fc1d 	bl	8004ff8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e6:	f023 0303 	bic.w	r3, r3, #3
 80047ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	021b      	lsls	r3, r3, #8
 80047f6:	4313      	orrs	r3, r2
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004804:	f023 030c 	bic.w	r3, r3, #12
 8004808:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004810:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	4313      	orrs	r3, r2
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	011a      	lsls	r2, r3, #4
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	031b      	lsls	r3, r3, #12
 8004834:	4313      	orrs	r3, r2
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004842:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	4313      	orrs	r3, r2
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d110      	bne.n	80048fa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d102      	bne.n	80048e4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80048de:	7b7b      	ldrb	r3, [r7, #13]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d001      	beq.n	80048e8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e088      	b.n	80049fa <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f8:	e031      	b.n	800495e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d110      	bne.n	8004922 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004900:	7bbb      	ldrb	r3, [r7, #14]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d102      	bne.n	800490c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004906:	7b3b      	ldrb	r3, [r7, #12]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d001      	beq.n	8004910 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e074      	b.n	80049fa <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004920:	e01d      	b.n	800495e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d108      	bne.n	800493a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004928:	7bbb      	ldrb	r3, [r7, #14]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d105      	bne.n	800493a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800492e:	7b7b      	ldrb	r3, [r7, #13]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d102      	bne.n	800493a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004934:	7b3b      	ldrb	r3, [r7, #12]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d001      	beq.n	800493e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e05d      	b.n	80049fa <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2202      	movs	r2, #2
 8004942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2202      	movs	r2, #2
 800495a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_TIM_Encoder_Start_IT+0xc2>
 8004964:	2b04      	cmp	r3, #4
 8004966:	d010      	beq.n	800498a <HAL_TIM_Encoder_Start_IT+0xe2>
 8004968:	e01f      	b.n	80049aa <HAL_TIM_Encoder_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2201      	movs	r2, #1
 8004970:	2100      	movs	r1, #0
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fdc0 	bl	80054f8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0202 	orr.w	r2, r2, #2
 8004986:	60da      	str	r2, [r3, #12]
      break;
 8004988:	e02e      	b.n	80049e8 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2201      	movs	r2, #1
 8004990:	2104      	movs	r1, #4
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fdb0 	bl	80054f8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0204 	orr.w	r2, r2, #4
 80049a6:	60da      	str	r2, [r3, #12]
      break;
 80049a8:	e01e      	b.n	80049e8 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2201      	movs	r2, #1
 80049b0:	2100      	movs	r1, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fda0 	bl	80054f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2201      	movs	r2, #1
 80049be:	2104      	movs	r1, #4
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fd99 	bl	80054f8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0202 	orr.w	r2, r2, #2
 80049d4:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68da      	ldr	r2, [r3, #12]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 0204 	orr.w	r2, r2, #4
 80049e4:	60da      	str	r2, [r3, #12]
      break;
 80049e6:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d122      	bne.n	8004a5e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d11b      	bne.n	8004a5e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f06f 0202 	mvn.w	r2, #2
 8004a2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fabb 	bl	8004fc0 <HAL_TIM_IC_CaptureCallback>
 8004a4a:	e005      	b.n	8004a58 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 faae 	bl	8004fae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fabd 	bl	8004fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d122      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d11b      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f06f 0204 	mvn.w	r2, #4
 8004a82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fa91 	bl	8004fc0 <HAL_TIM_IC_CaptureCallback>
 8004a9e:	e005      	b.n	8004aac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fa84 	bl	8004fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fa93 	bl	8004fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d122      	bne.n	8004b06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d11b      	bne.n	8004b06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f06f 0208 	mvn.w	r2, #8
 8004ad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2204      	movs	r2, #4
 8004adc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	f003 0303 	and.w	r3, r3, #3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fa67 	bl	8004fc0 <HAL_TIM_IC_CaptureCallback>
 8004af2:	e005      	b.n	8004b00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fa5a 	bl	8004fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fa69 	bl	8004fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f003 0310 	and.w	r3, r3, #16
 8004b10:	2b10      	cmp	r3, #16
 8004b12:	d122      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	2b10      	cmp	r3, #16
 8004b20:	d11b      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f06f 0210 	mvn.w	r2, #16
 8004b2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2208      	movs	r2, #8
 8004b30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fa3d 	bl	8004fc0 <HAL_TIM_IC_CaptureCallback>
 8004b46:	e005      	b.n	8004b54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fa30 	bl	8004fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fa3f 	bl	8004fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d10e      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d107      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f06f 0201 	mvn.w	r2, #1
 8004b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7fc fa71 	bl	8001068 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b90:	2b80      	cmp	r3, #128	; 0x80
 8004b92:	d10e      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9e:	2b80      	cmp	r3, #128	; 0x80
 8004ba0:	d107      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fd7f 	bl	80056b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b40      	cmp	r3, #64	; 0x40
 8004bbe:	d10e      	bne.n	8004bde <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bca:	2b40      	cmp	r3, #64	; 0x40
 8004bcc:	d107      	bne.n	8004bde <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fa03 	bl	8004fe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d10e      	bne.n	8004c0a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	d107      	bne.n	8004c0a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f06f 0220 	mvn.w	r2, #32
 8004c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fd4a 	bl	800569e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_TIM_OC_ConfigChannel+0x1a>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e046      	b.n	8004cbc <HAL_TIM_OC_ConfigChannel+0xa8>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b0c      	cmp	r3, #12
 8004c3a:	d839      	bhi.n	8004cb0 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004c3c:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c42:	bf00      	nop
 8004c44:	08004c79 	.word	0x08004c79
 8004c48:	08004cb1 	.word	0x08004cb1
 8004c4c:	08004cb1 	.word	0x08004cb1
 8004c50:	08004cb1 	.word	0x08004cb1
 8004c54:	08004c87 	.word	0x08004c87
 8004c58:	08004cb1 	.word	0x08004cb1
 8004c5c:	08004cb1 	.word	0x08004cb1
 8004c60:	08004cb1 	.word	0x08004cb1
 8004c64:	08004c95 	.word	0x08004c95
 8004c68:	08004cb1 	.word	0x08004cb1
 8004c6c:	08004cb1 	.word	0x08004cb1
 8004c70:	08004cb1 	.word	0x08004cb1
 8004c74:	08004ca3 	.word	0x08004ca3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fa1c 	bl	80050bc <TIM_OC1_SetConfig>
      break;
 8004c84:	e015      	b.n	8004cb2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fa7b 	bl	8005188 <TIM_OC2_SetConfig>
      break;
 8004c92:	e00e      	b.n	8004cb2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fade 	bl	800525c <TIM_OC3_SetConfig>
      break;
 8004ca0:	e007      	b.n	8004cb2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68b9      	ldr	r1, [r7, #8]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fb41 	bl	8005330 <TIM_OC4_SetConfig>
      break;
 8004cae:	e000      	b.n	8004cb2 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004cb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e0ac      	b.n	8004e38 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b0c      	cmp	r3, #12
 8004cea:	f200 809f 	bhi.w	8004e2c <HAL_TIM_PWM_ConfigChannel+0x168>
 8004cee:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf4:	08004d29 	.word	0x08004d29
 8004cf8:	08004e2d 	.word	0x08004e2d
 8004cfc:	08004e2d 	.word	0x08004e2d
 8004d00:	08004e2d 	.word	0x08004e2d
 8004d04:	08004d69 	.word	0x08004d69
 8004d08:	08004e2d 	.word	0x08004e2d
 8004d0c:	08004e2d 	.word	0x08004e2d
 8004d10:	08004e2d 	.word	0x08004e2d
 8004d14:	08004dab 	.word	0x08004dab
 8004d18:	08004e2d 	.word	0x08004e2d
 8004d1c:	08004e2d 	.word	0x08004e2d
 8004d20:	08004e2d 	.word	0x08004e2d
 8004d24:	08004deb 	.word	0x08004deb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 f9c4 	bl	80050bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699a      	ldr	r2, [r3, #24]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0208 	orr.w	r2, r2, #8
 8004d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0204 	bic.w	r2, r2, #4
 8004d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6999      	ldr	r1, [r3, #24]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	691a      	ldr	r2, [r3, #16]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	619a      	str	r2, [r3, #24]
      break;
 8004d66:	e062      	b.n	8004e2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fa0a 	bl	8005188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699a      	ldr	r2, [r3, #24]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6999      	ldr	r1, [r3, #24]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	021a      	lsls	r2, r3, #8
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	619a      	str	r2, [r3, #24]
      break;
 8004da8:	e041      	b.n	8004e2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68b9      	ldr	r1, [r7, #8]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fa53 	bl	800525c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69da      	ldr	r2, [r3, #28]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0208 	orr.w	r2, r2, #8
 8004dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0204 	bic.w	r2, r2, #4
 8004dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69d9      	ldr	r1, [r3, #28]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	61da      	str	r2, [r3, #28]
      break;
 8004de8:	e021      	b.n	8004e2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68b9      	ldr	r1, [r7, #8]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fa9d 	bl	8005330 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69da      	ldr	r2, [r3, #28]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69d9      	ldr	r1, [r3, #28]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	021a      	lsls	r2, r3, #8
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	61da      	str	r2, [r3, #28]
      break;
 8004e2a:	e000      	b.n	8004e2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004e2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_TIM_ConfigClockSource+0x18>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e0a6      	b.n	8004fa6 <HAL_TIM_ConfigClockSource+0x166>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b40      	cmp	r3, #64	; 0x40
 8004e8e:	d067      	beq.n	8004f60 <HAL_TIM_ConfigClockSource+0x120>
 8004e90:	2b40      	cmp	r3, #64	; 0x40
 8004e92:	d80b      	bhi.n	8004eac <HAL_TIM_ConfigClockSource+0x6c>
 8004e94:	2b10      	cmp	r3, #16
 8004e96:	d073      	beq.n	8004f80 <HAL_TIM_ConfigClockSource+0x140>
 8004e98:	2b10      	cmp	r3, #16
 8004e9a:	d802      	bhi.n	8004ea2 <HAL_TIM_ConfigClockSource+0x62>
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d06f      	beq.n	8004f80 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004ea0:	e078      	b.n	8004f94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	d06c      	beq.n	8004f80 <HAL_TIM_ConfigClockSource+0x140>
 8004ea6:	2b30      	cmp	r3, #48	; 0x30
 8004ea8:	d06a      	beq.n	8004f80 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004eaa:	e073      	b.n	8004f94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004eac:	2b70      	cmp	r3, #112	; 0x70
 8004eae:	d00d      	beq.n	8004ecc <HAL_TIM_ConfigClockSource+0x8c>
 8004eb0:	2b70      	cmp	r3, #112	; 0x70
 8004eb2:	d804      	bhi.n	8004ebe <HAL_TIM_ConfigClockSource+0x7e>
 8004eb4:	2b50      	cmp	r3, #80	; 0x50
 8004eb6:	d033      	beq.n	8004f20 <HAL_TIM_ConfigClockSource+0xe0>
 8004eb8:	2b60      	cmp	r3, #96	; 0x60
 8004eba:	d041      	beq.n	8004f40 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004ebc:	e06a      	b.n	8004f94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec2:	d066      	beq.n	8004f92 <HAL_TIM_ConfigClockSource+0x152>
 8004ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec8:	d017      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004eca:	e063      	b.n	8004f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	6899      	ldr	r1, [r3, #8]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f000 faed 	bl	80054ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004eee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	609a      	str	r2, [r3, #8]
      break;
 8004ef8:	e04c      	b.n	8004f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	6899      	ldr	r1, [r3, #8]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f000 fad6 	bl	80054ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f1c:	609a      	str	r2, [r3, #8]
      break;
 8004f1e:	e039      	b.n	8004f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	6859      	ldr	r1, [r3, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	f000 fa4d 	bl	80053cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2150      	movs	r1, #80	; 0x50
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 faa4 	bl	8005486 <TIM_ITRx_SetConfig>
      break;
 8004f3e:	e029      	b.n	8004f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	6859      	ldr	r1, [r3, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	f000 fa6b 	bl	8005428 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2160      	movs	r1, #96	; 0x60
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fa94 	bl	8005486 <TIM_ITRx_SetConfig>
      break;
 8004f5e:	e019      	b.n	8004f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	6859      	ldr	r1, [r3, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	f000 fa2d 	bl	80053cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2140      	movs	r1, #64	; 0x40
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fa84 	bl	8005486 <TIM_ITRx_SetConfig>
      break;
 8004f7e:	e009      	b.n	8004f94 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f000 fa7b 	bl	8005486 <TIM_ITRx_SetConfig>
        break;
 8004f90:	e000      	b.n	8004f94 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004f92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr

08004fd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr
	...

08004ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a29      	ldr	r2, [pc, #164]	; (80050b0 <TIM_Base_SetConfig+0xb8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d00b      	beq.n	8005028 <TIM_Base_SetConfig+0x30>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005016:	d007      	beq.n	8005028 <TIM_Base_SetConfig+0x30>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a26      	ldr	r2, [pc, #152]	; (80050b4 <TIM_Base_SetConfig+0xbc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_Base_SetConfig+0x30>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a25      	ldr	r2, [pc, #148]	; (80050b8 <TIM_Base_SetConfig+0xc0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d108      	bne.n	800503a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a1c      	ldr	r2, [pc, #112]	; (80050b0 <TIM_Base_SetConfig+0xb8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00b      	beq.n	800505a <TIM_Base_SetConfig+0x62>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005048:	d007      	beq.n	800505a <TIM_Base_SetConfig+0x62>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a19      	ldr	r2, [pc, #100]	; (80050b4 <TIM_Base_SetConfig+0xbc>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d003      	beq.n	800505a <TIM_Base_SetConfig+0x62>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a18      	ldr	r2, [pc, #96]	; (80050b8 <TIM_Base_SetConfig+0xc0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d108      	bne.n	800506c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4313      	orrs	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a07      	ldr	r2, [pc, #28]	; (80050b0 <TIM_Base_SetConfig+0xb8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d103      	bne.n	80050a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	615a      	str	r2, [r3, #20]
}
 80050a6:	bf00      	nop
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bc80      	pop	{r7}
 80050ae:	4770      	bx	lr
 80050b0:	40012c00 	.word	0x40012c00
 80050b4:	40000400 	.word	0x40000400
 80050b8:	40000800 	.word	0x40000800

080050bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f023 0201 	bic.w	r2, r3, #1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0303 	bic.w	r3, r3, #3
 80050f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f023 0302 	bic.w	r3, r3, #2
 8005104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a1c      	ldr	r2, [pc, #112]	; (8005184 <TIM_OC1_SetConfig+0xc8>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d10c      	bne.n	8005132 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f023 0308 	bic.w	r3, r3, #8
 800511e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f023 0304 	bic.w	r3, r3, #4
 8005130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a13      	ldr	r2, [pc, #76]	; (8005184 <TIM_OC1_SetConfig+0xc8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d111      	bne.n	800515e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	621a      	str	r2, [r3, #32]
}
 8005178:	bf00      	nop
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40012c00 	.word	0x40012c00

08005188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	f023 0210 	bic.w	r2, r3, #16
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f023 0320 	bic.w	r3, r3, #32
 80051d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4313      	orrs	r3, r2
 80051de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a1d      	ldr	r2, [pc, #116]	; (8005258 <TIM_OC2_SetConfig+0xd0>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d10d      	bne.n	8005204 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005202:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a14      	ldr	r2, [pc, #80]	; (8005258 <TIM_OC2_SetConfig+0xd0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d113      	bne.n	8005234 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005212:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800521a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr
 8005258:	40012c00 	.word	0x40012c00

0800525c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0303 	bic.w	r3, r3, #3
 8005292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a1d      	ldr	r2, [pc, #116]	; (800532c <TIM_OC3_SetConfig+0xd0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d10d      	bne.n	80052d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a14      	ldr	r2, [pc, #80]	; (800532c <TIM_OC3_SetConfig+0xd0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d113      	bne.n	8005306 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	621a      	str	r2, [r3, #32]
}
 8005320:	bf00      	nop
 8005322:	371c      	adds	r7, #28
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	40012c00 	.word	0x40012c00

08005330 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	021b      	lsls	r3, r3, #8
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800537a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	031b      	lsls	r3, r3, #12
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a0f      	ldr	r2, [pc, #60]	; (80053c8 <TIM_OC4_SetConfig+0x98>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d109      	bne.n	80053a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005396:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	019b      	lsls	r3, r3, #6
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	621a      	str	r2, [r3, #32]
}
 80053be:	bf00      	nop
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr
 80053c8:	40012c00 	.word	0x40012c00

080053cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f023 0201 	bic.w	r2, r3, #1
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f023 030a 	bic.w	r3, r3, #10
 8005408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr

08005428 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	f023 0210 	bic.w	r2, r3, #16
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005452:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	031b      	lsls	r3, r3, #12
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005464:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	621a      	str	r2, [r3, #32]
}
 800547c:	bf00      	nop
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr

08005486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005486:	b480      	push	{r7}
 8005488:	b085      	sub	sp, #20
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f043 0307 	orr.w	r3, r3, #7
 80054a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	609a      	str	r2, [r3, #8]
}
 80054b0:	bf00      	nop
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bc80      	pop	{r7}
 80054b8:	4770      	bx	lr

080054ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b087      	sub	sp, #28
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	607a      	str	r2, [r7, #4]
 80054c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	021a      	lsls	r2, r3, #8
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	431a      	orrs	r2, r3
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	609a      	str	r2, [r3, #8]
}
 80054ee:	bf00      	nop
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr

080054f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	2201      	movs	r2, #1
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a1a      	ldr	r2, [r3, #32]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	43db      	mvns	r3, r3
 800551a:	401a      	ands	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a1a      	ldr	r2, [r3, #32]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f003 031f 	and.w	r3, r3, #31
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	fa01 f303 	lsl.w	r3, r1, r3
 8005530:	431a      	orrs	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr

08005540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005554:	2302      	movs	r3, #2
 8005556:	e046      	b.n	80055e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a16      	ldr	r2, [pc, #88]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d00e      	beq.n	80055ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a4:	d009      	beq.n	80055ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a12      	ldr	r2, [pc, #72]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d004      	beq.n	80055ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a10      	ldr	r2, [pc, #64]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d10c      	bne.n	80055d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr
 80055f0:	40012c00 	.word	0x40012c00
 80055f4:	40000400 	.word	0x40000400
 80055f8:	40000800 	.word	0x40000800

080055fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005614:	2302      	movs	r3, #2
 8005616:	e03d      	b.n	8005694 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	4313      	orrs	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr

0800569e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr

080056b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr

080056c2 <atof>:
 80056c2:	2100      	movs	r1, #0
 80056c4:	f000 beb8 	b.w	8006438 <strtod>

080056c8 <__errno>:
 80056c8:	4b01      	ldr	r3, [pc, #4]	; (80056d0 <__errno+0x8>)
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	20000060 	.word	0x20000060

080056d4 <__libc_init_array>:
 80056d4:	b570      	push	{r4, r5, r6, lr}
 80056d6:	2500      	movs	r5, #0
 80056d8:	4e0c      	ldr	r6, [pc, #48]	; (800570c <__libc_init_array+0x38>)
 80056da:	4c0d      	ldr	r4, [pc, #52]	; (8005710 <__libc_init_array+0x3c>)
 80056dc:	1ba4      	subs	r4, r4, r6
 80056de:	10a4      	asrs	r4, r4, #2
 80056e0:	42a5      	cmp	r5, r4
 80056e2:	d109      	bne.n	80056f8 <__libc_init_array+0x24>
 80056e4:	f002 fa30 	bl	8007b48 <_init>
 80056e8:	2500      	movs	r5, #0
 80056ea:	4e0a      	ldr	r6, [pc, #40]	; (8005714 <__libc_init_array+0x40>)
 80056ec:	4c0a      	ldr	r4, [pc, #40]	; (8005718 <__libc_init_array+0x44>)
 80056ee:	1ba4      	subs	r4, r4, r6
 80056f0:	10a4      	asrs	r4, r4, #2
 80056f2:	42a5      	cmp	r5, r4
 80056f4:	d105      	bne.n	8005702 <__libc_init_array+0x2e>
 80056f6:	bd70      	pop	{r4, r5, r6, pc}
 80056f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056fc:	4798      	blx	r3
 80056fe:	3501      	adds	r5, #1
 8005700:	e7ee      	b.n	80056e0 <__libc_init_array+0xc>
 8005702:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005706:	4798      	blx	r3
 8005708:	3501      	adds	r5, #1
 800570a:	e7f2      	b.n	80056f2 <__libc_init_array+0x1e>
 800570c:	08007e90 	.word	0x08007e90
 8005710:	08007e90 	.word	0x08007e90
 8005714:	08007e90 	.word	0x08007e90
 8005718:	08007e94 	.word	0x08007e94

0800571c <memset>:
 800571c:	4603      	mov	r3, r0
 800571e:	4402      	add	r2, r0
 8005720:	4293      	cmp	r3, r2
 8005722:	d100      	bne.n	8005726 <memset+0xa>
 8005724:	4770      	bx	lr
 8005726:	f803 1b01 	strb.w	r1, [r3], #1
 800572a:	e7f9      	b.n	8005720 <memset+0x4>

0800572c <_puts_r>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	460e      	mov	r6, r1
 8005730:	4605      	mov	r5, r0
 8005732:	b118      	cbz	r0, 800573c <_puts_r+0x10>
 8005734:	6983      	ldr	r3, [r0, #24]
 8005736:	b90b      	cbnz	r3, 800573c <_puts_r+0x10>
 8005738:	f001 f840 	bl	80067bc <__sinit>
 800573c:	69ab      	ldr	r3, [r5, #24]
 800573e:	68ac      	ldr	r4, [r5, #8]
 8005740:	b913      	cbnz	r3, 8005748 <_puts_r+0x1c>
 8005742:	4628      	mov	r0, r5
 8005744:	f001 f83a 	bl	80067bc <__sinit>
 8005748:	4b23      	ldr	r3, [pc, #140]	; (80057d8 <_puts_r+0xac>)
 800574a:	429c      	cmp	r4, r3
 800574c:	d117      	bne.n	800577e <_puts_r+0x52>
 800574e:	686c      	ldr	r4, [r5, #4]
 8005750:	89a3      	ldrh	r3, [r4, #12]
 8005752:	071b      	lsls	r3, r3, #28
 8005754:	d51d      	bpl.n	8005792 <_puts_r+0x66>
 8005756:	6923      	ldr	r3, [r4, #16]
 8005758:	b1db      	cbz	r3, 8005792 <_puts_r+0x66>
 800575a:	3e01      	subs	r6, #1
 800575c:	68a3      	ldr	r3, [r4, #8]
 800575e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005762:	3b01      	subs	r3, #1
 8005764:	60a3      	str	r3, [r4, #8]
 8005766:	b9e9      	cbnz	r1, 80057a4 <_puts_r+0x78>
 8005768:	2b00      	cmp	r3, #0
 800576a:	da2e      	bge.n	80057ca <_puts_r+0x9e>
 800576c:	4622      	mov	r2, r4
 800576e:	210a      	movs	r1, #10
 8005770:	4628      	mov	r0, r5
 8005772:	f000 fe73 	bl	800645c <__swbuf_r>
 8005776:	3001      	adds	r0, #1
 8005778:	d011      	beq.n	800579e <_puts_r+0x72>
 800577a:	200a      	movs	r0, #10
 800577c:	e011      	b.n	80057a2 <_puts_r+0x76>
 800577e:	4b17      	ldr	r3, [pc, #92]	; (80057dc <_puts_r+0xb0>)
 8005780:	429c      	cmp	r4, r3
 8005782:	d101      	bne.n	8005788 <_puts_r+0x5c>
 8005784:	68ac      	ldr	r4, [r5, #8]
 8005786:	e7e3      	b.n	8005750 <_puts_r+0x24>
 8005788:	4b15      	ldr	r3, [pc, #84]	; (80057e0 <_puts_r+0xb4>)
 800578a:	429c      	cmp	r4, r3
 800578c:	bf08      	it	eq
 800578e:	68ec      	ldreq	r4, [r5, #12]
 8005790:	e7de      	b.n	8005750 <_puts_r+0x24>
 8005792:	4621      	mov	r1, r4
 8005794:	4628      	mov	r0, r5
 8005796:	f000 feb3 	bl	8006500 <__swsetup_r>
 800579a:	2800      	cmp	r0, #0
 800579c:	d0dd      	beq.n	800575a <_puts_r+0x2e>
 800579e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	da04      	bge.n	80057b2 <_puts_r+0x86>
 80057a8:	69a2      	ldr	r2, [r4, #24]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	dc06      	bgt.n	80057bc <_puts_r+0x90>
 80057ae:	290a      	cmp	r1, #10
 80057b0:	d004      	beq.n	80057bc <_puts_r+0x90>
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	6022      	str	r2, [r4, #0]
 80057b8:	7019      	strb	r1, [r3, #0]
 80057ba:	e7cf      	b.n	800575c <_puts_r+0x30>
 80057bc:	4622      	mov	r2, r4
 80057be:	4628      	mov	r0, r5
 80057c0:	f000 fe4c 	bl	800645c <__swbuf_r>
 80057c4:	3001      	adds	r0, #1
 80057c6:	d1c9      	bne.n	800575c <_puts_r+0x30>
 80057c8:	e7e9      	b.n	800579e <_puts_r+0x72>
 80057ca:	200a      	movs	r0, #10
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	6022      	str	r2, [r4, #0]
 80057d2:	7018      	strb	r0, [r3, #0]
 80057d4:	e7e5      	b.n	80057a2 <_puts_r+0x76>
 80057d6:	bf00      	nop
 80057d8:	08007c40 	.word	0x08007c40
 80057dc:	08007c60 	.word	0x08007c60
 80057e0:	08007c20 	.word	0x08007c20

080057e4 <puts>:
 80057e4:	4b02      	ldr	r3, [pc, #8]	; (80057f0 <puts+0xc>)
 80057e6:	4601      	mov	r1, r0
 80057e8:	6818      	ldr	r0, [r3, #0]
 80057ea:	f7ff bf9f 	b.w	800572c <_puts_r>
 80057ee:	bf00      	nop
 80057f0:	20000060 	.word	0x20000060

080057f4 <sulp>:
 80057f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f8:	460f      	mov	r7, r1
 80057fa:	4690      	mov	r8, r2
 80057fc:	f001 fede 	bl	80075bc <__ulp>
 8005800:	4604      	mov	r4, r0
 8005802:	460d      	mov	r5, r1
 8005804:	f1b8 0f00 	cmp.w	r8, #0
 8005808:	d011      	beq.n	800582e <sulp+0x3a>
 800580a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800580e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005812:	2b00      	cmp	r3, #0
 8005814:	dd0b      	ble.n	800582e <sulp+0x3a>
 8005816:	2400      	movs	r4, #0
 8005818:	051b      	lsls	r3, r3, #20
 800581a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800581e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005822:	4622      	mov	r2, r4
 8005824:	462b      	mov	r3, r5
 8005826:	f7fa fe57 	bl	80004d8 <__aeabi_dmul>
 800582a:	4604      	mov	r4, r0
 800582c:	460d      	mov	r5, r1
 800582e:	4620      	mov	r0, r4
 8005830:	4629      	mov	r1, r5
 8005832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005838 <_strtod_l>:
 8005838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583c:	461f      	mov	r7, r3
 800583e:	2300      	movs	r3, #0
 8005840:	b0a1      	sub	sp, #132	; 0x84
 8005842:	4683      	mov	fp, r0
 8005844:	4638      	mov	r0, r7
 8005846:	460e      	mov	r6, r1
 8005848:	9217      	str	r2, [sp, #92]	; 0x5c
 800584a:	931c      	str	r3, [sp, #112]	; 0x70
 800584c:	f001 fb68 	bl	8006f20 <__localeconv_l>
 8005850:	4680      	mov	r8, r0
 8005852:	6800      	ldr	r0, [r0, #0]
 8005854:	f7fa fc7c 	bl	8000150 <strlen>
 8005858:	f04f 0900 	mov.w	r9, #0
 800585c:	4604      	mov	r4, r0
 800585e:	f04f 0a00 	mov.w	sl, #0
 8005862:	961b      	str	r6, [sp, #108]	; 0x6c
 8005864:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005866:	781a      	ldrb	r2, [r3, #0]
 8005868:	2a0d      	cmp	r2, #13
 800586a:	d832      	bhi.n	80058d2 <_strtod_l+0x9a>
 800586c:	2a09      	cmp	r2, #9
 800586e:	d236      	bcs.n	80058de <_strtod_l+0xa6>
 8005870:	2a00      	cmp	r2, #0
 8005872:	d03e      	beq.n	80058f2 <_strtod_l+0xba>
 8005874:	2300      	movs	r3, #0
 8005876:	930d      	str	r3, [sp, #52]	; 0x34
 8005878:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800587a:	782b      	ldrb	r3, [r5, #0]
 800587c:	2b30      	cmp	r3, #48	; 0x30
 800587e:	f040 80ac 	bne.w	80059da <_strtod_l+0x1a2>
 8005882:	786b      	ldrb	r3, [r5, #1]
 8005884:	2b58      	cmp	r3, #88	; 0x58
 8005886:	d001      	beq.n	800588c <_strtod_l+0x54>
 8005888:	2b78      	cmp	r3, #120	; 0x78
 800588a:	d167      	bne.n	800595c <_strtod_l+0x124>
 800588c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800588e:	9702      	str	r7, [sp, #8]
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	ab1c      	add	r3, sp, #112	; 0x70
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	4a89      	ldr	r2, [pc, #548]	; (8005abc <_strtod_l+0x284>)
 8005898:	ab1d      	add	r3, sp, #116	; 0x74
 800589a:	a91b      	add	r1, sp, #108	; 0x6c
 800589c:	4658      	mov	r0, fp
 800589e:	f001 f867 	bl	8006970 <__gethex>
 80058a2:	f010 0407 	ands.w	r4, r0, #7
 80058a6:	4606      	mov	r6, r0
 80058a8:	d005      	beq.n	80058b6 <_strtod_l+0x7e>
 80058aa:	2c06      	cmp	r4, #6
 80058ac:	d12b      	bne.n	8005906 <_strtod_l+0xce>
 80058ae:	2300      	movs	r3, #0
 80058b0:	3501      	adds	r5, #1
 80058b2:	951b      	str	r5, [sp, #108]	; 0x6c
 80058b4:	930d      	str	r3, [sp, #52]	; 0x34
 80058b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f040 85a6 	bne.w	800640a <_strtod_l+0xbd2>
 80058be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058c0:	b1e3      	cbz	r3, 80058fc <_strtod_l+0xc4>
 80058c2:	464a      	mov	r2, r9
 80058c4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80058c8:	4610      	mov	r0, r2
 80058ca:	4619      	mov	r1, r3
 80058cc:	b021      	add	sp, #132	; 0x84
 80058ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d2:	2a2b      	cmp	r2, #43	; 0x2b
 80058d4:	d015      	beq.n	8005902 <_strtod_l+0xca>
 80058d6:	2a2d      	cmp	r2, #45	; 0x2d
 80058d8:	d004      	beq.n	80058e4 <_strtod_l+0xac>
 80058da:	2a20      	cmp	r2, #32
 80058dc:	d1ca      	bne.n	8005874 <_strtod_l+0x3c>
 80058de:	3301      	adds	r3, #1
 80058e0:	931b      	str	r3, [sp, #108]	; 0x6c
 80058e2:	e7bf      	b.n	8005864 <_strtod_l+0x2c>
 80058e4:	2201      	movs	r2, #1
 80058e6:	920d      	str	r2, [sp, #52]	; 0x34
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	921b      	str	r2, [sp, #108]	; 0x6c
 80058ec:	785b      	ldrb	r3, [r3, #1]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1c2      	bne.n	8005878 <_strtod_l+0x40>
 80058f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058f4:	961b      	str	r6, [sp, #108]	; 0x6c
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f040 8585 	bne.w	8006406 <_strtod_l+0xbce>
 80058fc:	464a      	mov	r2, r9
 80058fe:	4653      	mov	r3, sl
 8005900:	e7e2      	b.n	80058c8 <_strtod_l+0x90>
 8005902:	2200      	movs	r2, #0
 8005904:	e7ef      	b.n	80058e6 <_strtod_l+0xae>
 8005906:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005908:	b13a      	cbz	r2, 800591a <_strtod_l+0xe2>
 800590a:	2135      	movs	r1, #53	; 0x35
 800590c:	a81e      	add	r0, sp, #120	; 0x78
 800590e:	f001 ff48 	bl	80077a2 <__copybits>
 8005912:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005914:	4658      	mov	r0, fp
 8005916:	f001 fbba 	bl	800708e <_Bfree>
 800591a:	3c01      	subs	r4, #1
 800591c:	2c04      	cmp	r4, #4
 800591e:	d806      	bhi.n	800592e <_strtod_l+0xf6>
 8005920:	e8df f004 	tbb	[pc, r4]
 8005924:	1714030a 	.word	0x1714030a
 8005928:	0a          	.byte	0x0a
 8005929:	00          	.byte	0x00
 800592a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800592e:	0731      	lsls	r1, r6, #28
 8005930:	d5c1      	bpl.n	80058b6 <_strtod_l+0x7e>
 8005932:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8005936:	e7be      	b.n	80058b6 <_strtod_l+0x7e>
 8005938:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800593a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800593e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005942:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005946:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800594a:	e7f0      	b.n	800592e <_strtod_l+0xf6>
 800594c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005ac0 <_strtod_l+0x288>
 8005950:	e7ed      	b.n	800592e <_strtod_l+0xf6>
 8005952:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8005956:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800595a:	e7e8      	b.n	800592e <_strtod_l+0xf6>
 800595c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	921b      	str	r2, [sp, #108]	; 0x6c
 8005962:	785b      	ldrb	r3, [r3, #1]
 8005964:	2b30      	cmp	r3, #48	; 0x30
 8005966:	d0f9      	beq.n	800595c <_strtod_l+0x124>
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0a4      	beq.n	80058b6 <_strtod_l+0x7e>
 800596c:	2301      	movs	r3, #1
 800596e:	2500      	movs	r5, #0
 8005970:	220a      	movs	r2, #10
 8005972:	9307      	str	r3, [sp, #28]
 8005974:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005976:	9506      	str	r5, [sp, #24]
 8005978:	9308      	str	r3, [sp, #32]
 800597a:	9504      	str	r5, [sp, #16]
 800597c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800597e:	7807      	ldrb	r7, [r0, #0]
 8005980:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005984:	b2d9      	uxtb	r1, r3
 8005986:	2909      	cmp	r1, #9
 8005988:	d929      	bls.n	80059de <_strtod_l+0x1a6>
 800598a:	4622      	mov	r2, r4
 800598c:	f8d8 1000 	ldr.w	r1, [r8]
 8005990:	f002 f849 	bl	8007a26 <strncmp>
 8005994:	2800      	cmp	r0, #0
 8005996:	d031      	beq.n	80059fc <_strtod_l+0x1c4>
 8005998:	2000      	movs	r0, #0
 800599a:	463b      	mov	r3, r7
 800599c:	4602      	mov	r2, r0
 800599e:	9c04      	ldr	r4, [sp, #16]
 80059a0:	9005      	str	r0, [sp, #20]
 80059a2:	2b65      	cmp	r3, #101	; 0x65
 80059a4:	d001      	beq.n	80059aa <_strtod_l+0x172>
 80059a6:	2b45      	cmp	r3, #69	; 0x45
 80059a8:	d114      	bne.n	80059d4 <_strtod_l+0x19c>
 80059aa:	b924      	cbnz	r4, 80059b6 <_strtod_l+0x17e>
 80059ac:	b910      	cbnz	r0, 80059b4 <_strtod_l+0x17c>
 80059ae:	9b07      	ldr	r3, [sp, #28]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d09e      	beq.n	80058f2 <_strtod_l+0xba>
 80059b4:	2400      	movs	r4, #0
 80059b6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80059b8:	1c73      	adds	r3, r6, #1
 80059ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80059bc:	7873      	ldrb	r3, [r6, #1]
 80059be:	2b2b      	cmp	r3, #43	; 0x2b
 80059c0:	d078      	beq.n	8005ab4 <_strtod_l+0x27c>
 80059c2:	2b2d      	cmp	r3, #45	; 0x2d
 80059c4:	d070      	beq.n	8005aa8 <_strtod_l+0x270>
 80059c6:	f04f 0c00 	mov.w	ip, #0
 80059ca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80059ce:	2f09      	cmp	r7, #9
 80059d0:	d97c      	bls.n	8005acc <_strtod_l+0x294>
 80059d2:	961b      	str	r6, [sp, #108]	; 0x6c
 80059d4:	f04f 0e00 	mov.w	lr, #0
 80059d8:	e09a      	b.n	8005b10 <_strtod_l+0x2d8>
 80059da:	2300      	movs	r3, #0
 80059dc:	e7c7      	b.n	800596e <_strtod_l+0x136>
 80059de:	9904      	ldr	r1, [sp, #16]
 80059e0:	3001      	adds	r0, #1
 80059e2:	2908      	cmp	r1, #8
 80059e4:	bfd7      	itett	le
 80059e6:	9906      	ldrle	r1, [sp, #24]
 80059e8:	fb02 3505 	mlagt	r5, r2, r5, r3
 80059ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80059f0:	9306      	strle	r3, [sp, #24]
 80059f2:	9b04      	ldr	r3, [sp, #16]
 80059f4:	901b      	str	r0, [sp, #108]	; 0x6c
 80059f6:	3301      	adds	r3, #1
 80059f8:	9304      	str	r3, [sp, #16]
 80059fa:	e7bf      	b.n	800597c <_strtod_l+0x144>
 80059fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059fe:	191a      	adds	r2, r3, r4
 8005a00:	921b      	str	r2, [sp, #108]	; 0x6c
 8005a02:	9a04      	ldr	r2, [sp, #16]
 8005a04:	5d1b      	ldrb	r3, [r3, r4]
 8005a06:	2a00      	cmp	r2, #0
 8005a08:	d037      	beq.n	8005a7a <_strtod_l+0x242>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	9c04      	ldr	r4, [sp, #16]
 8005a0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005a12:	2909      	cmp	r1, #9
 8005a14:	d913      	bls.n	8005a3e <_strtod_l+0x206>
 8005a16:	2101      	movs	r1, #1
 8005a18:	9105      	str	r1, [sp, #20]
 8005a1a:	e7c2      	b.n	80059a2 <_strtod_l+0x16a>
 8005a1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a1e:	3001      	adds	r0, #1
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	921b      	str	r2, [sp, #108]	; 0x6c
 8005a24:	785b      	ldrb	r3, [r3, #1]
 8005a26:	2b30      	cmp	r3, #48	; 0x30
 8005a28:	d0f8      	beq.n	8005a1c <_strtod_l+0x1e4>
 8005a2a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005a2e:	2a08      	cmp	r2, #8
 8005a30:	f200 84f0 	bhi.w	8006414 <_strtod_l+0xbdc>
 8005a34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005a36:	9208      	str	r2, [sp, #32]
 8005a38:	4602      	mov	r2, r0
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005a42:	f100 0101 	add.w	r1, r0, #1
 8005a46:	d012      	beq.n	8005a6e <_strtod_l+0x236>
 8005a48:	440a      	add	r2, r1
 8005a4a:	270a      	movs	r7, #10
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	eb00 0c04 	add.w	ip, r0, r4
 8005a52:	458c      	cmp	ip, r1
 8005a54:	d113      	bne.n	8005a7e <_strtod_l+0x246>
 8005a56:	1821      	adds	r1, r4, r0
 8005a58:	2908      	cmp	r1, #8
 8005a5a:	f104 0401 	add.w	r4, r4, #1
 8005a5e:	4404      	add	r4, r0
 8005a60:	dc19      	bgt.n	8005a96 <_strtod_l+0x25e>
 8005a62:	210a      	movs	r1, #10
 8005a64:	9b06      	ldr	r3, [sp, #24]
 8005a66:	fb01 e303 	mla	r3, r1, r3, lr
 8005a6a:	9306      	str	r3, [sp, #24]
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a70:	1c58      	adds	r0, r3, #1
 8005a72:	901b      	str	r0, [sp, #108]	; 0x6c
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	4608      	mov	r0, r1
 8005a78:	e7c9      	b.n	8005a0e <_strtod_l+0x1d6>
 8005a7a:	9804      	ldr	r0, [sp, #16]
 8005a7c:	e7d3      	b.n	8005a26 <_strtod_l+0x1ee>
 8005a7e:	2908      	cmp	r1, #8
 8005a80:	f101 0101 	add.w	r1, r1, #1
 8005a84:	dc03      	bgt.n	8005a8e <_strtod_l+0x256>
 8005a86:	9b06      	ldr	r3, [sp, #24]
 8005a88:	437b      	muls	r3, r7
 8005a8a:	9306      	str	r3, [sp, #24]
 8005a8c:	e7e1      	b.n	8005a52 <_strtod_l+0x21a>
 8005a8e:	2910      	cmp	r1, #16
 8005a90:	bfd8      	it	le
 8005a92:	437d      	mulle	r5, r7
 8005a94:	e7dd      	b.n	8005a52 <_strtod_l+0x21a>
 8005a96:	2c10      	cmp	r4, #16
 8005a98:	bfdc      	itt	le
 8005a9a:	210a      	movle	r1, #10
 8005a9c:	fb01 e505 	mlale	r5, r1, r5, lr
 8005aa0:	e7e4      	b.n	8005a6c <_strtod_l+0x234>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	9305      	str	r3, [sp, #20]
 8005aa6:	e781      	b.n	80059ac <_strtod_l+0x174>
 8005aa8:	f04f 0c01 	mov.w	ip, #1
 8005aac:	1cb3      	adds	r3, r6, #2
 8005aae:	931b      	str	r3, [sp, #108]	; 0x6c
 8005ab0:	78b3      	ldrb	r3, [r6, #2]
 8005ab2:	e78a      	b.n	80059ca <_strtod_l+0x192>
 8005ab4:	f04f 0c00 	mov.w	ip, #0
 8005ab8:	e7f8      	b.n	8005aac <_strtod_l+0x274>
 8005aba:	bf00      	nop
 8005abc:	08007bcc 	.word	0x08007bcc
 8005ac0:	7ff00000 	.word	0x7ff00000
 8005ac4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ac6:	1c5f      	adds	r7, r3, #1
 8005ac8:	971b      	str	r7, [sp, #108]	; 0x6c
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	2b30      	cmp	r3, #48	; 0x30
 8005ace:	d0f9      	beq.n	8005ac4 <_strtod_l+0x28c>
 8005ad0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005ad4:	2f08      	cmp	r7, #8
 8005ad6:	f63f af7d 	bhi.w	80059d4 <_strtod_l+0x19c>
 8005ada:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005ade:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ae2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ae4:	1c5f      	adds	r7, r3, #1
 8005ae6:	971b      	str	r7, [sp, #108]	; 0x6c
 8005ae8:	785b      	ldrb	r3, [r3, #1]
 8005aea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005aee:	f1b8 0f09 	cmp.w	r8, #9
 8005af2:	d937      	bls.n	8005b64 <_strtod_l+0x32c>
 8005af4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005af6:	1a7f      	subs	r7, r7, r1
 8005af8:	2f08      	cmp	r7, #8
 8005afa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005afe:	dc37      	bgt.n	8005b70 <_strtod_l+0x338>
 8005b00:	45be      	cmp	lr, r7
 8005b02:	bfa8      	it	ge
 8005b04:	46be      	movge	lr, r7
 8005b06:	f1bc 0f00 	cmp.w	ip, #0
 8005b0a:	d001      	beq.n	8005b10 <_strtod_l+0x2d8>
 8005b0c:	f1ce 0e00 	rsb	lr, lr, #0
 8005b10:	2c00      	cmp	r4, #0
 8005b12:	d151      	bne.n	8005bb8 <_strtod_l+0x380>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	f47f aece 	bne.w	80058b6 <_strtod_l+0x7e>
 8005b1a:	9a07      	ldr	r2, [sp, #28]
 8005b1c:	2a00      	cmp	r2, #0
 8005b1e:	f47f aeca 	bne.w	80058b6 <_strtod_l+0x7e>
 8005b22:	9a05      	ldr	r2, [sp, #20]
 8005b24:	2a00      	cmp	r2, #0
 8005b26:	f47f aee4 	bne.w	80058f2 <_strtod_l+0xba>
 8005b2a:	2b4e      	cmp	r3, #78	; 0x4e
 8005b2c:	d027      	beq.n	8005b7e <_strtod_l+0x346>
 8005b2e:	dc21      	bgt.n	8005b74 <_strtod_l+0x33c>
 8005b30:	2b49      	cmp	r3, #73	; 0x49
 8005b32:	f47f aede 	bne.w	80058f2 <_strtod_l+0xba>
 8005b36:	49a4      	ldr	r1, [pc, #656]	; (8005dc8 <_strtod_l+0x590>)
 8005b38:	a81b      	add	r0, sp, #108	; 0x6c
 8005b3a:	f001 f94d 	bl	8006dd8 <__match>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	f43f aed7 	beq.w	80058f2 <_strtod_l+0xba>
 8005b44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b46:	49a1      	ldr	r1, [pc, #644]	; (8005dcc <_strtod_l+0x594>)
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	a81b      	add	r0, sp, #108	; 0x6c
 8005b4c:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b4e:	f001 f943 	bl	8006dd8 <__match>
 8005b52:	b910      	cbnz	r0, 8005b5a <_strtod_l+0x322>
 8005b54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b56:	3301      	adds	r3, #1
 8005b58:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b5a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005de0 <_strtod_l+0x5a8>
 8005b5e:	f04f 0900 	mov.w	r9, #0
 8005b62:	e6a8      	b.n	80058b6 <_strtod_l+0x7e>
 8005b64:	210a      	movs	r1, #10
 8005b66:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005b6a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005b6e:	e7b8      	b.n	8005ae2 <_strtod_l+0x2aa>
 8005b70:	46be      	mov	lr, r7
 8005b72:	e7c8      	b.n	8005b06 <_strtod_l+0x2ce>
 8005b74:	2b69      	cmp	r3, #105	; 0x69
 8005b76:	d0de      	beq.n	8005b36 <_strtod_l+0x2fe>
 8005b78:	2b6e      	cmp	r3, #110	; 0x6e
 8005b7a:	f47f aeba 	bne.w	80058f2 <_strtod_l+0xba>
 8005b7e:	4994      	ldr	r1, [pc, #592]	; (8005dd0 <_strtod_l+0x598>)
 8005b80:	a81b      	add	r0, sp, #108	; 0x6c
 8005b82:	f001 f929 	bl	8006dd8 <__match>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	f43f aeb3 	beq.w	80058f2 <_strtod_l+0xba>
 8005b8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b28      	cmp	r3, #40	; 0x28
 8005b92:	d10e      	bne.n	8005bb2 <_strtod_l+0x37a>
 8005b94:	aa1e      	add	r2, sp, #120	; 0x78
 8005b96:	498f      	ldr	r1, [pc, #572]	; (8005dd4 <_strtod_l+0x59c>)
 8005b98:	a81b      	add	r0, sp, #108	; 0x6c
 8005b9a:	f001 f931 	bl	8006e00 <__hexnan>
 8005b9e:	2805      	cmp	r0, #5
 8005ba0:	d107      	bne.n	8005bb2 <_strtod_l+0x37a>
 8005ba2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ba4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005ba8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8005bac:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005bb0:	e681      	b.n	80058b6 <_strtod_l+0x7e>
 8005bb2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8005de8 <_strtod_l+0x5b0>
 8005bb6:	e7d2      	b.n	8005b5e <_strtod_l+0x326>
 8005bb8:	ebae 0302 	sub.w	r3, lr, r2
 8005bbc:	9307      	str	r3, [sp, #28]
 8005bbe:	9b04      	ldr	r3, [sp, #16]
 8005bc0:	9806      	ldr	r0, [sp, #24]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	bf08      	it	eq
 8005bc6:	4623      	moveq	r3, r4
 8005bc8:	2c10      	cmp	r4, #16
 8005bca:	9304      	str	r3, [sp, #16]
 8005bcc:	46a0      	mov	r8, r4
 8005bce:	bfa8      	it	ge
 8005bd0:	f04f 0810 	movge.w	r8, #16
 8005bd4:	f7fa fc06 	bl	80003e4 <__aeabi_ui2d>
 8005bd8:	2c09      	cmp	r4, #9
 8005bda:	4681      	mov	r9, r0
 8005bdc:	468a      	mov	sl, r1
 8005bde:	dc13      	bgt.n	8005c08 <_strtod_l+0x3d0>
 8005be0:	9b07      	ldr	r3, [sp, #28]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f43f ae67 	beq.w	80058b6 <_strtod_l+0x7e>
 8005be8:	9b07      	ldr	r3, [sp, #28]
 8005bea:	dd7e      	ble.n	8005cea <_strtod_l+0x4b2>
 8005bec:	2b16      	cmp	r3, #22
 8005bee:	dc65      	bgt.n	8005cbc <_strtod_l+0x484>
 8005bf0:	4a79      	ldr	r2, [pc, #484]	; (8005dd8 <_strtod_l+0x5a0>)
 8005bf2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005bf6:	464a      	mov	r2, r9
 8005bf8:	e9de 0100 	ldrd	r0, r1, [lr]
 8005bfc:	4653      	mov	r3, sl
 8005bfe:	f7fa fc6b 	bl	80004d8 <__aeabi_dmul>
 8005c02:	4681      	mov	r9, r0
 8005c04:	468a      	mov	sl, r1
 8005c06:	e656      	b.n	80058b6 <_strtod_l+0x7e>
 8005c08:	4b73      	ldr	r3, [pc, #460]	; (8005dd8 <_strtod_l+0x5a0>)
 8005c0a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005c0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005c12:	f7fa fc61 	bl	80004d8 <__aeabi_dmul>
 8005c16:	4606      	mov	r6, r0
 8005c18:	4628      	mov	r0, r5
 8005c1a:	460f      	mov	r7, r1
 8005c1c:	f7fa fbe2 	bl	80003e4 <__aeabi_ui2d>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	4630      	mov	r0, r6
 8005c26:	4639      	mov	r1, r7
 8005c28:	f7fa faa0 	bl	800016c <__adddf3>
 8005c2c:	2c0f      	cmp	r4, #15
 8005c2e:	4681      	mov	r9, r0
 8005c30:	468a      	mov	sl, r1
 8005c32:	ddd5      	ble.n	8005be0 <_strtod_l+0x3a8>
 8005c34:	9b07      	ldr	r3, [sp, #28]
 8005c36:	eba4 0808 	sub.w	r8, r4, r8
 8005c3a:	4498      	add	r8, r3
 8005c3c:	f1b8 0f00 	cmp.w	r8, #0
 8005c40:	f340 809a 	ble.w	8005d78 <_strtod_l+0x540>
 8005c44:	f018 030f 	ands.w	r3, r8, #15
 8005c48:	d00a      	beq.n	8005c60 <_strtod_l+0x428>
 8005c4a:	4963      	ldr	r1, [pc, #396]	; (8005dd8 <_strtod_l+0x5a0>)
 8005c4c:	464a      	mov	r2, r9
 8005c4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c56:	4653      	mov	r3, sl
 8005c58:	f7fa fc3e 	bl	80004d8 <__aeabi_dmul>
 8005c5c:	4681      	mov	r9, r0
 8005c5e:	468a      	mov	sl, r1
 8005c60:	f038 080f 	bics.w	r8, r8, #15
 8005c64:	d077      	beq.n	8005d56 <_strtod_l+0x51e>
 8005c66:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005c6a:	dd4b      	ble.n	8005d04 <_strtod_l+0x4cc>
 8005c6c:	f04f 0800 	mov.w	r8, #0
 8005c70:	f8cd 8010 	str.w	r8, [sp, #16]
 8005c74:	f8cd 8020 	str.w	r8, [sp, #32]
 8005c78:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c7c:	2322      	movs	r3, #34	; 0x22
 8005c7e:	f04f 0900 	mov.w	r9, #0
 8005c82:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005de0 <_strtod_l+0x5a8>
 8005c86:	f8cb 3000 	str.w	r3, [fp]
 8005c8a:	9b08      	ldr	r3, [sp, #32]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f43f ae12 	beq.w	80058b6 <_strtod_l+0x7e>
 8005c92:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005c94:	4658      	mov	r0, fp
 8005c96:	f001 f9fa 	bl	800708e <_Bfree>
 8005c9a:	9906      	ldr	r1, [sp, #24]
 8005c9c:	4658      	mov	r0, fp
 8005c9e:	f001 f9f6 	bl	800708e <_Bfree>
 8005ca2:	9904      	ldr	r1, [sp, #16]
 8005ca4:	4658      	mov	r0, fp
 8005ca6:	f001 f9f2 	bl	800708e <_Bfree>
 8005caa:	9908      	ldr	r1, [sp, #32]
 8005cac:	4658      	mov	r0, fp
 8005cae:	f001 f9ee 	bl	800708e <_Bfree>
 8005cb2:	4641      	mov	r1, r8
 8005cb4:	4658      	mov	r0, fp
 8005cb6:	f001 f9ea 	bl	800708e <_Bfree>
 8005cba:	e5fc      	b.n	80058b6 <_strtod_l+0x7e>
 8005cbc:	9a07      	ldr	r2, [sp, #28]
 8005cbe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	dbb6      	blt.n	8005c34 <_strtod_l+0x3fc>
 8005cc6:	4d44      	ldr	r5, [pc, #272]	; (8005dd8 <_strtod_l+0x5a0>)
 8005cc8:	f1c4 040f 	rsb	r4, r4, #15
 8005ccc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005cd0:	464a      	mov	r2, r9
 8005cd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cd6:	4653      	mov	r3, sl
 8005cd8:	f7fa fbfe 	bl	80004d8 <__aeabi_dmul>
 8005cdc:	9b07      	ldr	r3, [sp, #28]
 8005cde:	1b1c      	subs	r4, r3, r4
 8005ce0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005ce4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ce8:	e789      	b.n	8005bfe <_strtod_l+0x3c6>
 8005cea:	f113 0f16 	cmn.w	r3, #22
 8005cee:	dba1      	blt.n	8005c34 <_strtod_l+0x3fc>
 8005cf0:	4a39      	ldr	r2, [pc, #228]	; (8005dd8 <_strtod_l+0x5a0>)
 8005cf2:	4648      	mov	r0, r9
 8005cf4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005cf8:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005cfc:	4651      	mov	r1, sl
 8005cfe:	f7fa fd15 	bl	800072c <__aeabi_ddiv>
 8005d02:	e77e      	b.n	8005c02 <_strtod_l+0x3ca>
 8005d04:	2300      	movs	r3, #0
 8005d06:	4648      	mov	r0, r9
 8005d08:	4651      	mov	r1, sl
 8005d0a:	461d      	mov	r5, r3
 8005d0c:	4e33      	ldr	r6, [pc, #204]	; (8005ddc <_strtod_l+0x5a4>)
 8005d0e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005d12:	f1b8 0f01 	cmp.w	r8, #1
 8005d16:	dc21      	bgt.n	8005d5c <_strtod_l+0x524>
 8005d18:	b10b      	cbz	r3, 8005d1e <_strtod_l+0x4e6>
 8005d1a:	4681      	mov	r9, r0
 8005d1c:	468a      	mov	sl, r1
 8005d1e:	4b2f      	ldr	r3, [pc, #188]	; (8005ddc <_strtod_l+0x5a4>)
 8005d20:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8005d24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005d28:	464a      	mov	r2, r9
 8005d2a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005d2e:	4653      	mov	r3, sl
 8005d30:	f7fa fbd2 	bl	80004d8 <__aeabi_dmul>
 8005d34:	4b2a      	ldr	r3, [pc, #168]	; (8005de0 <_strtod_l+0x5a8>)
 8005d36:	460a      	mov	r2, r1
 8005d38:	400b      	ands	r3, r1
 8005d3a:	492a      	ldr	r1, [pc, #168]	; (8005de4 <_strtod_l+0x5ac>)
 8005d3c:	4681      	mov	r9, r0
 8005d3e:	428b      	cmp	r3, r1
 8005d40:	d894      	bhi.n	8005c6c <_strtod_l+0x434>
 8005d42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005d46:	428b      	cmp	r3, r1
 8005d48:	bf86      	itte	hi
 8005d4a:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 8005d4e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8005dec <_strtod_l+0x5b4>
 8005d52:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8005d56:	2300      	movs	r3, #0
 8005d58:	9305      	str	r3, [sp, #20]
 8005d5a:	e07b      	b.n	8005e54 <_strtod_l+0x61c>
 8005d5c:	f018 0f01 	tst.w	r8, #1
 8005d60:	d006      	beq.n	8005d70 <_strtod_l+0x538>
 8005d62:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6a:	f7fa fbb5 	bl	80004d8 <__aeabi_dmul>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	3501      	adds	r5, #1
 8005d72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005d76:	e7cc      	b.n	8005d12 <_strtod_l+0x4da>
 8005d78:	d0ed      	beq.n	8005d56 <_strtod_l+0x51e>
 8005d7a:	f1c8 0800 	rsb	r8, r8, #0
 8005d7e:	f018 020f 	ands.w	r2, r8, #15
 8005d82:	d00a      	beq.n	8005d9a <_strtod_l+0x562>
 8005d84:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <_strtod_l+0x5a0>)
 8005d86:	4648      	mov	r0, r9
 8005d88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d8c:	4651      	mov	r1, sl
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	f7fa fccb 	bl	800072c <__aeabi_ddiv>
 8005d96:	4681      	mov	r9, r0
 8005d98:	468a      	mov	sl, r1
 8005d9a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005d9e:	d0da      	beq.n	8005d56 <_strtod_l+0x51e>
 8005da0:	f1b8 0f1f 	cmp.w	r8, #31
 8005da4:	dd24      	ble.n	8005df0 <_strtod_l+0x5b8>
 8005da6:	f04f 0800 	mov.w	r8, #0
 8005daa:	f8cd 8010 	str.w	r8, [sp, #16]
 8005dae:	f8cd 8020 	str.w	r8, [sp, #32]
 8005db2:	f8cd 8018 	str.w	r8, [sp, #24]
 8005db6:	2322      	movs	r3, #34	; 0x22
 8005db8:	f04f 0900 	mov.w	r9, #0
 8005dbc:	f04f 0a00 	mov.w	sl, #0
 8005dc0:	f8cb 3000 	str.w	r3, [fp]
 8005dc4:	e761      	b.n	8005c8a <_strtod_l+0x452>
 8005dc6:	bf00      	nop
 8005dc8:	08007bc0 	.word	0x08007bc0
 8005dcc:	08007bc3 	.word	0x08007bc3
 8005dd0:	08007bc9 	.word	0x08007bc9
 8005dd4:	08007be0 	.word	0x08007be0
 8005dd8:	08007cb8 	.word	0x08007cb8
 8005ddc:	08007c90 	.word	0x08007c90
 8005de0:	7ff00000 	.word	0x7ff00000
 8005de4:	7ca00000 	.word	0x7ca00000
 8005de8:	fff80000 	.word	0xfff80000
 8005dec:	7fefffff 	.word	0x7fefffff
 8005df0:	f018 0310 	ands.w	r3, r8, #16
 8005df4:	bf18      	it	ne
 8005df6:	236a      	movne	r3, #106	; 0x6a
 8005df8:	4648      	mov	r0, r9
 8005dfa:	9305      	str	r3, [sp, #20]
 8005dfc:	4651      	mov	r1, sl
 8005dfe:	2300      	movs	r3, #0
 8005e00:	4da1      	ldr	r5, [pc, #644]	; (8006088 <_strtod_l+0x850>)
 8005e02:	f1b8 0f00 	cmp.w	r8, #0
 8005e06:	f300 8113 	bgt.w	8006030 <_strtod_l+0x7f8>
 8005e0a:	b10b      	cbz	r3, 8005e10 <_strtod_l+0x5d8>
 8005e0c:	4681      	mov	r9, r0
 8005e0e:	468a      	mov	sl, r1
 8005e10:	9b05      	ldr	r3, [sp, #20]
 8005e12:	b1bb      	cbz	r3, 8005e44 <_strtod_l+0x60c>
 8005e14:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005e18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	4651      	mov	r1, sl
 8005e20:	dd10      	ble.n	8005e44 <_strtod_l+0x60c>
 8005e22:	2b1f      	cmp	r3, #31
 8005e24:	f340 8110 	ble.w	8006048 <_strtod_l+0x810>
 8005e28:	2b34      	cmp	r3, #52	; 0x34
 8005e2a:	bfd8      	it	le
 8005e2c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8005e30:	f04f 0900 	mov.w	r9, #0
 8005e34:	bfcf      	iteee	gt
 8005e36:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8005e3a:	3b20      	suble	r3, #32
 8005e3c:	fa02 f303 	lslle.w	r3, r2, r3
 8005e40:	ea03 0a01 	andle.w	sl, r3, r1
 8005e44:	2200      	movs	r2, #0
 8005e46:	2300      	movs	r3, #0
 8005e48:	4648      	mov	r0, r9
 8005e4a:	4651      	mov	r1, sl
 8005e4c:	f7fa fdac 	bl	80009a8 <__aeabi_dcmpeq>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	d1a8      	bne.n	8005da6 <_strtod_l+0x56e>
 8005e54:	9b06      	ldr	r3, [sp, #24]
 8005e56:	9a04      	ldr	r2, [sp, #16]
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	9908      	ldr	r1, [sp, #32]
 8005e5c:	4623      	mov	r3, r4
 8005e5e:	4658      	mov	r0, fp
 8005e60:	f001 f967 	bl	8007132 <__s2b>
 8005e64:	9008      	str	r0, [sp, #32]
 8005e66:	2800      	cmp	r0, #0
 8005e68:	f43f af00 	beq.w	8005c6c <_strtod_l+0x434>
 8005e6c:	9a07      	ldr	r2, [sp, #28]
 8005e6e:	9b07      	ldr	r3, [sp, #28]
 8005e70:	2a00      	cmp	r2, #0
 8005e72:	f1c3 0300 	rsb	r3, r3, #0
 8005e76:	bfa8      	it	ge
 8005e78:	2300      	movge	r3, #0
 8005e7a:	f04f 0800 	mov.w	r8, #0
 8005e7e:	930e      	str	r3, [sp, #56]	; 0x38
 8005e80:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005e84:	9316      	str	r3, [sp, #88]	; 0x58
 8005e86:	f8cd 8010 	str.w	r8, [sp, #16]
 8005e8a:	9b08      	ldr	r3, [sp, #32]
 8005e8c:	4658      	mov	r0, fp
 8005e8e:	6859      	ldr	r1, [r3, #4]
 8005e90:	f001 f8c9 	bl	8007026 <_Balloc>
 8005e94:	9006      	str	r0, [sp, #24]
 8005e96:	2800      	cmp	r0, #0
 8005e98:	f43f aef0 	beq.w	8005c7c <_strtod_l+0x444>
 8005e9c:	9b08      	ldr	r3, [sp, #32]
 8005e9e:	300c      	adds	r0, #12
 8005ea0:	691a      	ldr	r2, [r3, #16]
 8005ea2:	f103 010c 	add.w	r1, r3, #12
 8005ea6:	3202      	adds	r2, #2
 8005ea8:	0092      	lsls	r2, r2, #2
 8005eaa:	f001 f8b1 	bl	8007010 <memcpy>
 8005eae:	ab1e      	add	r3, sp, #120	; 0x78
 8005eb0:	9301      	str	r3, [sp, #4]
 8005eb2:	ab1d      	add	r3, sp, #116	; 0x74
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	464a      	mov	r2, r9
 8005eb8:	4653      	mov	r3, sl
 8005eba:	4658      	mov	r0, fp
 8005ebc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8005ec0:	f001 fbf2 	bl	80076a8 <__d2b>
 8005ec4:	901c      	str	r0, [sp, #112]	; 0x70
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	f43f aed8 	beq.w	8005c7c <_strtod_l+0x444>
 8005ecc:	2101      	movs	r1, #1
 8005ece:	4658      	mov	r0, fp
 8005ed0:	f001 f9bb 	bl	800724a <__i2b>
 8005ed4:	9004      	str	r0, [sp, #16]
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	f43f aecf 	beq.w	8005c7c <_strtod_l+0x444>
 8005ede:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005ee0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005ee2:	2d00      	cmp	r5, #0
 8005ee4:	bfab      	itete	ge
 8005ee6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005ee8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005eea:	18ee      	addge	r6, r5, r3
 8005eec:	1b5c      	sublt	r4, r3, r5
 8005eee:	9b05      	ldr	r3, [sp, #20]
 8005ef0:	bfa8      	it	ge
 8005ef2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005ef4:	eba5 0503 	sub.w	r5, r5, r3
 8005ef8:	4415      	add	r5, r2
 8005efa:	4b64      	ldr	r3, [pc, #400]	; (800608c <_strtod_l+0x854>)
 8005efc:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8005f00:	bfb8      	it	lt
 8005f02:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005f04:	429d      	cmp	r5, r3
 8005f06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005f0a:	f280 80af 	bge.w	800606c <_strtod_l+0x834>
 8005f0e:	1b5b      	subs	r3, r3, r5
 8005f10:	2b1f      	cmp	r3, #31
 8005f12:	eba2 0203 	sub.w	r2, r2, r3
 8005f16:	f04f 0701 	mov.w	r7, #1
 8005f1a:	f300 809c 	bgt.w	8006056 <_strtod_l+0x81e>
 8005f1e:	2500      	movs	r5, #0
 8005f20:	fa07 f303 	lsl.w	r3, r7, r3
 8005f24:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f26:	18b7      	adds	r7, r6, r2
 8005f28:	9b05      	ldr	r3, [sp, #20]
 8005f2a:	42be      	cmp	r6, r7
 8005f2c:	4414      	add	r4, r2
 8005f2e:	441c      	add	r4, r3
 8005f30:	4633      	mov	r3, r6
 8005f32:	bfa8      	it	ge
 8005f34:	463b      	movge	r3, r7
 8005f36:	42a3      	cmp	r3, r4
 8005f38:	bfa8      	it	ge
 8005f3a:	4623      	movge	r3, r4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bfc2      	ittt	gt
 8005f40:	1aff      	subgt	r7, r7, r3
 8005f42:	1ae4      	subgt	r4, r4, r3
 8005f44:	1af6      	subgt	r6, r6, r3
 8005f46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f48:	b1bb      	cbz	r3, 8005f7a <_strtod_l+0x742>
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	9904      	ldr	r1, [sp, #16]
 8005f4e:	4658      	mov	r0, fp
 8005f50:	f001 fa1a 	bl	8007388 <__pow5mult>
 8005f54:	9004      	str	r0, [sp, #16]
 8005f56:	2800      	cmp	r0, #0
 8005f58:	f43f ae90 	beq.w	8005c7c <_strtod_l+0x444>
 8005f5c:	4601      	mov	r1, r0
 8005f5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005f60:	4658      	mov	r0, fp
 8005f62:	f001 f97b 	bl	800725c <__multiply>
 8005f66:	9009      	str	r0, [sp, #36]	; 0x24
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	f43f ae87 	beq.w	8005c7c <_strtod_l+0x444>
 8005f6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005f70:	4658      	mov	r0, fp
 8005f72:	f001 f88c 	bl	800708e <_Bfree>
 8005f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f78:	931c      	str	r3, [sp, #112]	; 0x70
 8005f7a:	2f00      	cmp	r7, #0
 8005f7c:	dc7a      	bgt.n	8006074 <_strtod_l+0x83c>
 8005f7e:	9b07      	ldr	r3, [sp, #28]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	dd08      	ble.n	8005f96 <_strtod_l+0x75e>
 8005f84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005f86:	9906      	ldr	r1, [sp, #24]
 8005f88:	4658      	mov	r0, fp
 8005f8a:	f001 f9fd 	bl	8007388 <__pow5mult>
 8005f8e:	9006      	str	r0, [sp, #24]
 8005f90:	2800      	cmp	r0, #0
 8005f92:	f43f ae73 	beq.w	8005c7c <_strtod_l+0x444>
 8005f96:	2c00      	cmp	r4, #0
 8005f98:	dd08      	ble.n	8005fac <_strtod_l+0x774>
 8005f9a:	4622      	mov	r2, r4
 8005f9c:	9906      	ldr	r1, [sp, #24]
 8005f9e:	4658      	mov	r0, fp
 8005fa0:	f001 fa40 	bl	8007424 <__lshift>
 8005fa4:	9006      	str	r0, [sp, #24]
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	f43f ae68 	beq.w	8005c7c <_strtod_l+0x444>
 8005fac:	2e00      	cmp	r6, #0
 8005fae:	dd08      	ble.n	8005fc2 <_strtod_l+0x78a>
 8005fb0:	4632      	mov	r2, r6
 8005fb2:	9904      	ldr	r1, [sp, #16]
 8005fb4:	4658      	mov	r0, fp
 8005fb6:	f001 fa35 	bl	8007424 <__lshift>
 8005fba:	9004      	str	r0, [sp, #16]
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	f43f ae5d 	beq.w	8005c7c <_strtod_l+0x444>
 8005fc2:	9a06      	ldr	r2, [sp, #24]
 8005fc4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005fc6:	4658      	mov	r0, fp
 8005fc8:	f001 fa9a 	bl	8007500 <__mdiff>
 8005fcc:	4680      	mov	r8, r0
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	f43f ae54 	beq.w	8005c7c <_strtod_l+0x444>
 8005fd4:	2400      	movs	r4, #0
 8005fd6:	68c3      	ldr	r3, [r0, #12]
 8005fd8:	9904      	ldr	r1, [sp, #16]
 8005fda:	60c4      	str	r4, [r0, #12]
 8005fdc:	930c      	str	r3, [sp, #48]	; 0x30
 8005fde:	f001 fa75 	bl	80074cc <__mcmp>
 8005fe2:	42a0      	cmp	r0, r4
 8005fe4:	da54      	bge.n	8006090 <_strtod_l+0x858>
 8005fe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fe8:	b9f3      	cbnz	r3, 8006028 <_strtod_l+0x7f0>
 8005fea:	f1b9 0f00 	cmp.w	r9, #0
 8005fee:	d11b      	bne.n	8006028 <_strtod_l+0x7f0>
 8005ff0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005ff4:	b9c3      	cbnz	r3, 8006028 <_strtod_l+0x7f0>
 8005ff6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005ffa:	0d1b      	lsrs	r3, r3, #20
 8005ffc:	051b      	lsls	r3, r3, #20
 8005ffe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006002:	d911      	bls.n	8006028 <_strtod_l+0x7f0>
 8006004:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006008:	b91b      	cbnz	r3, 8006012 <_strtod_l+0x7da>
 800600a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800600e:	2b01      	cmp	r3, #1
 8006010:	dd0a      	ble.n	8006028 <_strtod_l+0x7f0>
 8006012:	4641      	mov	r1, r8
 8006014:	2201      	movs	r2, #1
 8006016:	4658      	mov	r0, fp
 8006018:	f001 fa04 	bl	8007424 <__lshift>
 800601c:	9904      	ldr	r1, [sp, #16]
 800601e:	4680      	mov	r8, r0
 8006020:	f001 fa54 	bl	80074cc <__mcmp>
 8006024:	2800      	cmp	r0, #0
 8006026:	dc68      	bgt.n	80060fa <_strtod_l+0x8c2>
 8006028:	9b05      	ldr	r3, [sp, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d172      	bne.n	8006114 <_strtod_l+0x8dc>
 800602e:	e630      	b.n	8005c92 <_strtod_l+0x45a>
 8006030:	f018 0f01 	tst.w	r8, #1
 8006034:	d004      	beq.n	8006040 <_strtod_l+0x808>
 8006036:	e9d5 2300 	ldrd	r2, r3, [r5]
 800603a:	f7fa fa4d 	bl	80004d8 <__aeabi_dmul>
 800603e:	2301      	movs	r3, #1
 8006040:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006044:	3508      	adds	r5, #8
 8006046:	e6dc      	b.n	8005e02 <_strtod_l+0x5ca>
 8006048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800604c:	fa02 f303 	lsl.w	r3, r2, r3
 8006050:	ea03 0909 	and.w	r9, r3, r9
 8006054:	e6f6      	b.n	8005e44 <_strtod_l+0x60c>
 8006056:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800605a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800605e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006062:	35e2      	adds	r5, #226	; 0xe2
 8006064:	fa07 f505 	lsl.w	r5, r7, r5
 8006068:	970f      	str	r7, [sp, #60]	; 0x3c
 800606a:	e75c      	b.n	8005f26 <_strtod_l+0x6ee>
 800606c:	2301      	movs	r3, #1
 800606e:	2500      	movs	r5, #0
 8006070:	930f      	str	r3, [sp, #60]	; 0x3c
 8006072:	e758      	b.n	8005f26 <_strtod_l+0x6ee>
 8006074:	463a      	mov	r2, r7
 8006076:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006078:	4658      	mov	r0, fp
 800607a:	f001 f9d3 	bl	8007424 <__lshift>
 800607e:	901c      	str	r0, [sp, #112]	; 0x70
 8006080:	2800      	cmp	r0, #0
 8006082:	f47f af7c 	bne.w	8005f7e <_strtod_l+0x746>
 8006086:	e5f9      	b.n	8005c7c <_strtod_l+0x444>
 8006088:	08007bf8 	.word	0x08007bf8
 800608c:	fffffc02 	.word	0xfffffc02
 8006090:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006094:	f040 8089 	bne.w	80061aa <_strtod_l+0x972>
 8006098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800609a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800609e:	b342      	cbz	r2, 80060f2 <_strtod_l+0x8ba>
 80060a0:	4aaf      	ldr	r2, [pc, #700]	; (8006360 <_strtod_l+0xb28>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d156      	bne.n	8006154 <_strtod_l+0x91c>
 80060a6:	9b05      	ldr	r3, [sp, #20]
 80060a8:	4648      	mov	r0, r9
 80060aa:	b1eb      	cbz	r3, 80060e8 <_strtod_l+0x8b0>
 80060ac:	4653      	mov	r3, sl
 80060ae:	4aad      	ldr	r2, [pc, #692]	; (8006364 <_strtod_l+0xb2c>)
 80060b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80060b4:	401a      	ands	r2, r3
 80060b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80060ba:	d818      	bhi.n	80060ee <_strtod_l+0x8b6>
 80060bc:	0d12      	lsrs	r2, r2, #20
 80060be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80060c2:	fa01 f303 	lsl.w	r3, r1, r3
 80060c6:	4298      	cmp	r0, r3
 80060c8:	d144      	bne.n	8006154 <_strtod_l+0x91c>
 80060ca:	4ba7      	ldr	r3, [pc, #668]	; (8006368 <_strtod_l+0xb30>)
 80060cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d102      	bne.n	80060d8 <_strtod_l+0x8a0>
 80060d2:	3001      	adds	r0, #1
 80060d4:	f43f add2 	beq.w	8005c7c <_strtod_l+0x444>
 80060d8:	4ba2      	ldr	r3, [pc, #648]	; (8006364 <_strtod_l+0xb2c>)
 80060da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060dc:	f04f 0900 	mov.w	r9, #0
 80060e0:	401a      	ands	r2, r3
 80060e2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80060e6:	e79f      	b.n	8006028 <_strtod_l+0x7f0>
 80060e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060ec:	e7eb      	b.n	80060c6 <_strtod_l+0x88e>
 80060ee:	460b      	mov	r3, r1
 80060f0:	e7e9      	b.n	80060c6 <_strtod_l+0x88e>
 80060f2:	bb7b      	cbnz	r3, 8006154 <_strtod_l+0x91c>
 80060f4:	f1b9 0f00 	cmp.w	r9, #0
 80060f8:	d12c      	bne.n	8006154 <_strtod_l+0x91c>
 80060fa:	9905      	ldr	r1, [sp, #20]
 80060fc:	4653      	mov	r3, sl
 80060fe:	4a99      	ldr	r2, [pc, #612]	; (8006364 <_strtod_l+0xb2c>)
 8006100:	b1f1      	cbz	r1, 8006140 <_strtod_l+0x908>
 8006102:	ea02 010a 	and.w	r1, r2, sl
 8006106:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800610a:	dc19      	bgt.n	8006140 <_strtod_l+0x908>
 800610c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006110:	f77f ae51 	ble.w	8005db6 <_strtod_l+0x57e>
 8006114:	2300      	movs	r3, #0
 8006116:	4a95      	ldr	r2, [pc, #596]	; (800636c <_strtod_l+0xb34>)
 8006118:	4648      	mov	r0, r9
 800611a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800611e:	4651      	mov	r1, sl
 8006120:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006124:	f7fa f9d8 	bl	80004d8 <__aeabi_dmul>
 8006128:	4681      	mov	r9, r0
 800612a:	468a      	mov	sl, r1
 800612c:	2900      	cmp	r1, #0
 800612e:	f47f adb0 	bne.w	8005c92 <_strtod_l+0x45a>
 8006132:	2800      	cmp	r0, #0
 8006134:	f47f adad 	bne.w	8005c92 <_strtod_l+0x45a>
 8006138:	2322      	movs	r3, #34	; 0x22
 800613a:	f8cb 3000 	str.w	r3, [fp]
 800613e:	e5a8      	b.n	8005c92 <_strtod_l+0x45a>
 8006140:	4013      	ands	r3, r2
 8006142:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006146:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800614a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800614e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8006152:	e769      	b.n	8006028 <_strtod_l+0x7f0>
 8006154:	b19d      	cbz	r5, 800617e <_strtod_l+0x946>
 8006156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006158:	421d      	tst	r5, r3
 800615a:	f43f af65 	beq.w	8006028 <_strtod_l+0x7f0>
 800615e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006160:	9a05      	ldr	r2, [sp, #20]
 8006162:	4648      	mov	r0, r9
 8006164:	4651      	mov	r1, sl
 8006166:	b173      	cbz	r3, 8006186 <_strtod_l+0x94e>
 8006168:	f7ff fb44 	bl	80057f4 <sulp>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006174:	f7f9 fffa 	bl	800016c <__adddf3>
 8006178:	4681      	mov	r9, r0
 800617a:	468a      	mov	sl, r1
 800617c:	e754      	b.n	8006028 <_strtod_l+0x7f0>
 800617e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006180:	ea13 0f09 	tst.w	r3, r9
 8006184:	e7e9      	b.n	800615a <_strtod_l+0x922>
 8006186:	f7ff fb35 	bl	80057f4 <sulp>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006192:	f7f9 ffe9 	bl	8000168 <__aeabi_dsub>
 8006196:	2200      	movs	r2, #0
 8006198:	2300      	movs	r3, #0
 800619a:	4681      	mov	r9, r0
 800619c:	468a      	mov	sl, r1
 800619e:	f7fa fc03 	bl	80009a8 <__aeabi_dcmpeq>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	f47f ae07 	bne.w	8005db6 <_strtod_l+0x57e>
 80061a8:	e73e      	b.n	8006028 <_strtod_l+0x7f0>
 80061aa:	9904      	ldr	r1, [sp, #16]
 80061ac:	4640      	mov	r0, r8
 80061ae:	f001 faca 	bl	8007746 <__ratio>
 80061b2:	2200      	movs	r2, #0
 80061b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061b8:	4606      	mov	r6, r0
 80061ba:	460f      	mov	r7, r1
 80061bc:	f7fa fc08 	bl	80009d0 <__aeabi_dcmple>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	d075      	beq.n	80062b0 <_strtod_l+0xa78>
 80061c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d047      	beq.n	800625a <_strtod_l+0xa22>
 80061ca:	2600      	movs	r6, #0
 80061cc:	4f68      	ldr	r7, [pc, #416]	; (8006370 <_strtod_l+0xb38>)
 80061ce:	4d68      	ldr	r5, [pc, #416]	; (8006370 <_strtod_l+0xb38>)
 80061d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061d6:	0d1b      	lsrs	r3, r3, #20
 80061d8:	051b      	lsls	r3, r3, #20
 80061da:	930f      	str	r3, [sp, #60]	; 0x3c
 80061dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061de:	4b65      	ldr	r3, [pc, #404]	; (8006374 <_strtod_l+0xb3c>)
 80061e0:	429a      	cmp	r2, r3
 80061e2:	f040 80cf 	bne.w	8006384 <_strtod_l+0xb4c>
 80061e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061ea:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80061ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f0:	4648      	mov	r0, r9
 80061f2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80061f6:	4651      	mov	r1, sl
 80061f8:	f001 f9e0 	bl	80075bc <__ulp>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4630      	mov	r0, r6
 8006202:	4639      	mov	r1, r7
 8006204:	f7fa f968 	bl	80004d8 <__aeabi_dmul>
 8006208:	464a      	mov	r2, r9
 800620a:	4653      	mov	r3, sl
 800620c:	f7f9 ffae 	bl	800016c <__adddf3>
 8006210:	460b      	mov	r3, r1
 8006212:	4954      	ldr	r1, [pc, #336]	; (8006364 <_strtod_l+0xb2c>)
 8006214:	4a58      	ldr	r2, [pc, #352]	; (8006378 <_strtod_l+0xb40>)
 8006216:	4019      	ands	r1, r3
 8006218:	4291      	cmp	r1, r2
 800621a:	4681      	mov	r9, r0
 800621c:	d95e      	bls.n	80062dc <_strtod_l+0xaa4>
 800621e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006220:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006224:	4293      	cmp	r3, r2
 8006226:	d103      	bne.n	8006230 <_strtod_l+0x9f8>
 8006228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800622a:	3301      	adds	r3, #1
 800622c:	f43f ad26 	beq.w	8005c7c <_strtod_l+0x444>
 8006230:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006234:	f8df a130 	ldr.w	sl, [pc, #304]	; 8006368 <_strtod_l+0xb30>
 8006238:	991c      	ldr	r1, [sp, #112]	; 0x70
 800623a:	4658      	mov	r0, fp
 800623c:	f000 ff27 	bl	800708e <_Bfree>
 8006240:	9906      	ldr	r1, [sp, #24]
 8006242:	4658      	mov	r0, fp
 8006244:	f000 ff23 	bl	800708e <_Bfree>
 8006248:	9904      	ldr	r1, [sp, #16]
 800624a:	4658      	mov	r0, fp
 800624c:	f000 ff1f 	bl	800708e <_Bfree>
 8006250:	4641      	mov	r1, r8
 8006252:	4658      	mov	r0, fp
 8006254:	f000 ff1b 	bl	800708e <_Bfree>
 8006258:	e617      	b.n	8005e8a <_strtod_l+0x652>
 800625a:	f1b9 0f00 	cmp.w	r9, #0
 800625e:	d119      	bne.n	8006294 <_strtod_l+0xa5c>
 8006260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006262:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006266:	b9e3      	cbnz	r3, 80062a2 <_strtod_l+0xa6a>
 8006268:	2200      	movs	r2, #0
 800626a:	4b41      	ldr	r3, [pc, #260]	; (8006370 <_strtod_l+0xb38>)
 800626c:	4630      	mov	r0, r6
 800626e:	4639      	mov	r1, r7
 8006270:	f7fa fba4 	bl	80009bc <__aeabi_dcmplt>
 8006274:	b9c8      	cbnz	r0, 80062aa <_strtod_l+0xa72>
 8006276:	2200      	movs	r2, #0
 8006278:	4b40      	ldr	r3, [pc, #256]	; (800637c <_strtod_l+0xb44>)
 800627a:	4630      	mov	r0, r6
 800627c:	4639      	mov	r1, r7
 800627e:	f7fa f92b 	bl	80004d8 <__aeabi_dmul>
 8006282:	4604      	mov	r4, r0
 8006284:	460d      	mov	r5, r1
 8006286:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800628a:	9418      	str	r4, [sp, #96]	; 0x60
 800628c:	9319      	str	r3, [sp, #100]	; 0x64
 800628e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006292:	e79d      	b.n	80061d0 <_strtod_l+0x998>
 8006294:	f1b9 0f01 	cmp.w	r9, #1
 8006298:	d103      	bne.n	80062a2 <_strtod_l+0xa6a>
 800629a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	f43f ad8a 	beq.w	8005db6 <_strtod_l+0x57e>
 80062a2:	2600      	movs	r6, #0
 80062a4:	4f36      	ldr	r7, [pc, #216]	; (8006380 <_strtod_l+0xb48>)
 80062a6:	2400      	movs	r4, #0
 80062a8:	e791      	b.n	80061ce <_strtod_l+0x996>
 80062aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80062ac:	4d33      	ldr	r5, [pc, #204]	; (800637c <_strtod_l+0xb44>)
 80062ae:	e7ea      	b.n	8006286 <_strtod_l+0xa4e>
 80062b0:	4b32      	ldr	r3, [pc, #200]	; (800637c <_strtod_l+0xb44>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	4630      	mov	r0, r6
 80062b6:	4639      	mov	r1, r7
 80062b8:	f7fa f90e 	bl	80004d8 <__aeabi_dmul>
 80062bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062be:	4604      	mov	r4, r0
 80062c0:	460d      	mov	r5, r1
 80062c2:	b933      	cbnz	r3, 80062d2 <_strtod_l+0xa9a>
 80062c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062c8:	9010      	str	r0, [sp, #64]	; 0x40
 80062ca:	9311      	str	r3, [sp, #68]	; 0x44
 80062cc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80062d0:	e77e      	b.n	80061d0 <_strtod_l+0x998>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80062da:	e7f7      	b.n	80062cc <_strtod_l+0xa94>
 80062dc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80062e0:	9b05      	ldr	r3, [sp, #20]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1a8      	bne.n	8006238 <_strtod_l+0xa00>
 80062e6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80062ea:	0d1b      	lsrs	r3, r3, #20
 80062ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062ee:	051b      	lsls	r3, r3, #20
 80062f0:	429a      	cmp	r2, r3
 80062f2:	4656      	mov	r6, sl
 80062f4:	d1a0      	bne.n	8006238 <_strtod_l+0xa00>
 80062f6:	4629      	mov	r1, r5
 80062f8:	4620      	mov	r0, r4
 80062fa:	f7fa fb87 	bl	8000a0c <__aeabi_d2iz>
 80062fe:	f7fa f881 	bl	8000404 <__aeabi_i2d>
 8006302:	460b      	mov	r3, r1
 8006304:	4602      	mov	r2, r0
 8006306:	4629      	mov	r1, r5
 8006308:	4620      	mov	r0, r4
 800630a:	f7f9 ff2d 	bl	8000168 <__aeabi_dsub>
 800630e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006310:	4604      	mov	r4, r0
 8006312:	460d      	mov	r5, r1
 8006314:	b933      	cbnz	r3, 8006324 <_strtod_l+0xaec>
 8006316:	f1b9 0f00 	cmp.w	r9, #0
 800631a:	d103      	bne.n	8006324 <_strtod_l+0xaec>
 800631c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8006320:	2e00      	cmp	r6, #0
 8006322:	d06a      	beq.n	80063fa <_strtod_l+0xbc2>
 8006324:	a30a      	add	r3, pc, #40	; (adr r3, 8006350 <_strtod_l+0xb18>)
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	4620      	mov	r0, r4
 800632c:	4629      	mov	r1, r5
 800632e:	f7fa fb45 	bl	80009bc <__aeabi_dcmplt>
 8006332:	2800      	cmp	r0, #0
 8006334:	f47f acad 	bne.w	8005c92 <_strtod_l+0x45a>
 8006338:	a307      	add	r3, pc, #28	; (adr r3, 8006358 <_strtod_l+0xb20>)
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	4620      	mov	r0, r4
 8006340:	4629      	mov	r1, r5
 8006342:	f7fa fb59 	bl	80009f8 <__aeabi_dcmpgt>
 8006346:	2800      	cmp	r0, #0
 8006348:	f43f af76 	beq.w	8006238 <_strtod_l+0xa00>
 800634c:	e4a1      	b.n	8005c92 <_strtod_l+0x45a>
 800634e:	bf00      	nop
 8006350:	94a03595 	.word	0x94a03595
 8006354:	3fdfffff 	.word	0x3fdfffff
 8006358:	35afe535 	.word	0x35afe535
 800635c:	3fe00000 	.word	0x3fe00000
 8006360:	000fffff 	.word	0x000fffff
 8006364:	7ff00000 	.word	0x7ff00000
 8006368:	7fefffff 	.word	0x7fefffff
 800636c:	39500000 	.word	0x39500000
 8006370:	3ff00000 	.word	0x3ff00000
 8006374:	7fe00000 	.word	0x7fe00000
 8006378:	7c9fffff 	.word	0x7c9fffff
 800637c:	3fe00000 	.word	0x3fe00000
 8006380:	bff00000 	.word	0xbff00000
 8006384:	9b05      	ldr	r3, [sp, #20]
 8006386:	b313      	cbz	r3, 80063ce <_strtod_l+0xb96>
 8006388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800638a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800638e:	d81e      	bhi.n	80063ce <_strtod_l+0xb96>
 8006390:	a325      	add	r3, pc, #148	; (adr r3, 8006428 <_strtod_l+0xbf0>)
 8006392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006396:	4620      	mov	r0, r4
 8006398:	4629      	mov	r1, r5
 800639a:	f7fa fb19 	bl	80009d0 <__aeabi_dcmple>
 800639e:	b190      	cbz	r0, 80063c6 <_strtod_l+0xb8e>
 80063a0:	4629      	mov	r1, r5
 80063a2:	4620      	mov	r0, r4
 80063a4:	f7fa fb5a 	bl	8000a5c <__aeabi_d2uiz>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	bf08      	it	eq
 80063ac:	2001      	moveq	r0, #1
 80063ae:	f7fa f819 	bl	80003e4 <__aeabi_ui2d>
 80063b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063b4:	4604      	mov	r4, r0
 80063b6:	460d      	mov	r5, r1
 80063b8:	b9d3      	cbnz	r3, 80063f0 <_strtod_l+0xbb8>
 80063ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063be:	9012      	str	r0, [sp, #72]	; 0x48
 80063c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80063c2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80063c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063c8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80063cc:	1a9f      	subs	r7, r3, r2
 80063ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063d2:	f001 f8f3 	bl	80075bc <__ulp>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4630      	mov	r0, r6
 80063dc:	4639      	mov	r1, r7
 80063de:	f7fa f87b 	bl	80004d8 <__aeabi_dmul>
 80063e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063e6:	f7f9 fec1 	bl	800016c <__adddf3>
 80063ea:	4681      	mov	r9, r0
 80063ec:	468a      	mov	sl, r1
 80063ee:	e777      	b.n	80062e0 <_strtod_l+0xaa8>
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80063f8:	e7e3      	b.n	80063c2 <_strtod_l+0xb8a>
 80063fa:	a30d      	add	r3, pc, #52	; (adr r3, 8006430 <_strtod_l+0xbf8>)
 80063fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006400:	f7fa fadc 	bl	80009bc <__aeabi_dcmplt>
 8006404:	e79f      	b.n	8006346 <_strtod_l+0xb0e>
 8006406:	2300      	movs	r3, #0
 8006408:	930d      	str	r3, [sp, #52]	; 0x34
 800640a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800640c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	f7ff ba55 	b.w	80058be <_strtod_l+0x86>
 8006414:	2b65      	cmp	r3, #101	; 0x65
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	f43f ab42 	beq.w	8005aa2 <_strtod_l+0x26a>
 800641e:	2101      	movs	r1, #1
 8006420:	4614      	mov	r4, r2
 8006422:	9105      	str	r1, [sp, #20]
 8006424:	f7ff babf 	b.w	80059a6 <_strtod_l+0x16e>
 8006428:	ffc00000 	.word	0xffc00000
 800642c:	41dfffff 	.word	0x41dfffff
 8006430:	94a03595 	.word	0x94a03595
 8006434:	3fcfffff 	.word	0x3fcfffff

08006438 <strtod>:
 8006438:	4b06      	ldr	r3, [pc, #24]	; (8006454 <strtod+0x1c>)
 800643a:	b410      	push	{r4}
 800643c:	681c      	ldr	r4, [r3, #0]
 800643e:	4a06      	ldr	r2, [pc, #24]	; (8006458 <strtod+0x20>)
 8006440:	6a23      	ldr	r3, [r4, #32]
 8006442:	2b00      	cmp	r3, #0
 8006444:	bf08      	it	eq
 8006446:	4613      	moveq	r3, r2
 8006448:	460a      	mov	r2, r1
 800644a:	4601      	mov	r1, r0
 800644c:	4620      	mov	r0, r4
 800644e:	bc10      	pop	{r4}
 8006450:	f7ff b9f2 	b.w	8005838 <_strtod_l>
 8006454:	20000060 	.word	0x20000060
 8006458:	200000c4 	.word	0x200000c4

0800645c <__swbuf_r>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	460e      	mov	r6, r1
 8006460:	4614      	mov	r4, r2
 8006462:	4605      	mov	r5, r0
 8006464:	b118      	cbz	r0, 800646e <__swbuf_r+0x12>
 8006466:	6983      	ldr	r3, [r0, #24]
 8006468:	b90b      	cbnz	r3, 800646e <__swbuf_r+0x12>
 800646a:	f000 f9a7 	bl	80067bc <__sinit>
 800646e:	4b21      	ldr	r3, [pc, #132]	; (80064f4 <__swbuf_r+0x98>)
 8006470:	429c      	cmp	r4, r3
 8006472:	d12a      	bne.n	80064ca <__swbuf_r+0x6e>
 8006474:	686c      	ldr	r4, [r5, #4]
 8006476:	69a3      	ldr	r3, [r4, #24]
 8006478:	60a3      	str	r3, [r4, #8]
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	071a      	lsls	r2, r3, #28
 800647e:	d52e      	bpl.n	80064de <__swbuf_r+0x82>
 8006480:	6923      	ldr	r3, [r4, #16]
 8006482:	b363      	cbz	r3, 80064de <__swbuf_r+0x82>
 8006484:	6923      	ldr	r3, [r4, #16]
 8006486:	6820      	ldr	r0, [r4, #0]
 8006488:	b2f6      	uxtb	r6, r6
 800648a:	1ac0      	subs	r0, r0, r3
 800648c:	6963      	ldr	r3, [r4, #20]
 800648e:	4637      	mov	r7, r6
 8006490:	4283      	cmp	r3, r0
 8006492:	dc04      	bgt.n	800649e <__swbuf_r+0x42>
 8006494:	4621      	mov	r1, r4
 8006496:	4628      	mov	r0, r5
 8006498:	f000 f926 	bl	80066e8 <_fflush_r>
 800649c:	bb28      	cbnz	r0, 80064ea <__swbuf_r+0x8e>
 800649e:	68a3      	ldr	r3, [r4, #8]
 80064a0:	3001      	adds	r0, #1
 80064a2:	3b01      	subs	r3, #1
 80064a4:	60a3      	str	r3, [r4, #8]
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	6022      	str	r2, [r4, #0]
 80064ac:	701e      	strb	r6, [r3, #0]
 80064ae:	6963      	ldr	r3, [r4, #20]
 80064b0:	4283      	cmp	r3, r0
 80064b2:	d004      	beq.n	80064be <__swbuf_r+0x62>
 80064b4:	89a3      	ldrh	r3, [r4, #12]
 80064b6:	07db      	lsls	r3, r3, #31
 80064b8:	d519      	bpl.n	80064ee <__swbuf_r+0x92>
 80064ba:	2e0a      	cmp	r6, #10
 80064bc:	d117      	bne.n	80064ee <__swbuf_r+0x92>
 80064be:	4621      	mov	r1, r4
 80064c0:	4628      	mov	r0, r5
 80064c2:	f000 f911 	bl	80066e8 <_fflush_r>
 80064c6:	b190      	cbz	r0, 80064ee <__swbuf_r+0x92>
 80064c8:	e00f      	b.n	80064ea <__swbuf_r+0x8e>
 80064ca:	4b0b      	ldr	r3, [pc, #44]	; (80064f8 <__swbuf_r+0x9c>)
 80064cc:	429c      	cmp	r4, r3
 80064ce:	d101      	bne.n	80064d4 <__swbuf_r+0x78>
 80064d0:	68ac      	ldr	r4, [r5, #8]
 80064d2:	e7d0      	b.n	8006476 <__swbuf_r+0x1a>
 80064d4:	4b09      	ldr	r3, [pc, #36]	; (80064fc <__swbuf_r+0xa0>)
 80064d6:	429c      	cmp	r4, r3
 80064d8:	bf08      	it	eq
 80064da:	68ec      	ldreq	r4, [r5, #12]
 80064dc:	e7cb      	b.n	8006476 <__swbuf_r+0x1a>
 80064de:	4621      	mov	r1, r4
 80064e0:	4628      	mov	r0, r5
 80064e2:	f000 f80d 	bl	8006500 <__swsetup_r>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d0cc      	beq.n	8006484 <__swbuf_r+0x28>
 80064ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80064ee:	4638      	mov	r0, r7
 80064f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064f2:	bf00      	nop
 80064f4:	08007c40 	.word	0x08007c40
 80064f8:	08007c60 	.word	0x08007c60
 80064fc:	08007c20 	.word	0x08007c20

08006500 <__swsetup_r>:
 8006500:	4b32      	ldr	r3, [pc, #200]	; (80065cc <__swsetup_r+0xcc>)
 8006502:	b570      	push	{r4, r5, r6, lr}
 8006504:	681d      	ldr	r5, [r3, #0]
 8006506:	4606      	mov	r6, r0
 8006508:	460c      	mov	r4, r1
 800650a:	b125      	cbz	r5, 8006516 <__swsetup_r+0x16>
 800650c:	69ab      	ldr	r3, [r5, #24]
 800650e:	b913      	cbnz	r3, 8006516 <__swsetup_r+0x16>
 8006510:	4628      	mov	r0, r5
 8006512:	f000 f953 	bl	80067bc <__sinit>
 8006516:	4b2e      	ldr	r3, [pc, #184]	; (80065d0 <__swsetup_r+0xd0>)
 8006518:	429c      	cmp	r4, r3
 800651a:	d10f      	bne.n	800653c <__swsetup_r+0x3c>
 800651c:	686c      	ldr	r4, [r5, #4]
 800651e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006522:	b29a      	uxth	r2, r3
 8006524:	0715      	lsls	r5, r2, #28
 8006526:	d42c      	bmi.n	8006582 <__swsetup_r+0x82>
 8006528:	06d0      	lsls	r0, r2, #27
 800652a:	d411      	bmi.n	8006550 <__swsetup_r+0x50>
 800652c:	2209      	movs	r2, #9
 800652e:	6032      	str	r2, [r6, #0]
 8006530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006534:	81a3      	strh	r3, [r4, #12]
 8006536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800653a:	e03e      	b.n	80065ba <__swsetup_r+0xba>
 800653c:	4b25      	ldr	r3, [pc, #148]	; (80065d4 <__swsetup_r+0xd4>)
 800653e:	429c      	cmp	r4, r3
 8006540:	d101      	bne.n	8006546 <__swsetup_r+0x46>
 8006542:	68ac      	ldr	r4, [r5, #8]
 8006544:	e7eb      	b.n	800651e <__swsetup_r+0x1e>
 8006546:	4b24      	ldr	r3, [pc, #144]	; (80065d8 <__swsetup_r+0xd8>)
 8006548:	429c      	cmp	r4, r3
 800654a:	bf08      	it	eq
 800654c:	68ec      	ldreq	r4, [r5, #12]
 800654e:	e7e6      	b.n	800651e <__swsetup_r+0x1e>
 8006550:	0751      	lsls	r1, r2, #29
 8006552:	d512      	bpl.n	800657a <__swsetup_r+0x7a>
 8006554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006556:	b141      	cbz	r1, 800656a <__swsetup_r+0x6a>
 8006558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800655c:	4299      	cmp	r1, r3
 800655e:	d002      	beq.n	8006566 <__swsetup_r+0x66>
 8006560:	4630      	mov	r0, r6
 8006562:	f001 f967 	bl	8007834 <_free_r>
 8006566:	2300      	movs	r3, #0
 8006568:	6363      	str	r3, [r4, #52]	; 0x34
 800656a:	89a3      	ldrh	r3, [r4, #12]
 800656c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006570:	81a3      	strh	r3, [r4, #12]
 8006572:	2300      	movs	r3, #0
 8006574:	6063      	str	r3, [r4, #4]
 8006576:	6923      	ldr	r3, [r4, #16]
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	89a3      	ldrh	r3, [r4, #12]
 800657c:	f043 0308 	orr.w	r3, r3, #8
 8006580:	81a3      	strh	r3, [r4, #12]
 8006582:	6923      	ldr	r3, [r4, #16]
 8006584:	b94b      	cbnz	r3, 800659a <__swsetup_r+0x9a>
 8006586:	89a3      	ldrh	r3, [r4, #12]
 8006588:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800658c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006590:	d003      	beq.n	800659a <__swsetup_r+0x9a>
 8006592:	4621      	mov	r1, r4
 8006594:	4630      	mov	r0, r6
 8006596:	f000 fce9 	bl	8006f6c <__smakebuf_r>
 800659a:	89a2      	ldrh	r2, [r4, #12]
 800659c:	f012 0301 	ands.w	r3, r2, #1
 80065a0:	d00c      	beq.n	80065bc <__swsetup_r+0xbc>
 80065a2:	2300      	movs	r3, #0
 80065a4:	60a3      	str	r3, [r4, #8]
 80065a6:	6963      	ldr	r3, [r4, #20]
 80065a8:	425b      	negs	r3, r3
 80065aa:	61a3      	str	r3, [r4, #24]
 80065ac:	6923      	ldr	r3, [r4, #16]
 80065ae:	b953      	cbnz	r3, 80065c6 <__swsetup_r+0xc6>
 80065b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80065b8:	d1ba      	bne.n	8006530 <__swsetup_r+0x30>
 80065ba:	bd70      	pop	{r4, r5, r6, pc}
 80065bc:	0792      	lsls	r2, r2, #30
 80065be:	bf58      	it	pl
 80065c0:	6963      	ldrpl	r3, [r4, #20]
 80065c2:	60a3      	str	r3, [r4, #8]
 80065c4:	e7f2      	b.n	80065ac <__swsetup_r+0xac>
 80065c6:	2000      	movs	r0, #0
 80065c8:	e7f7      	b.n	80065ba <__swsetup_r+0xba>
 80065ca:	bf00      	nop
 80065cc:	20000060 	.word	0x20000060
 80065d0:	08007c40 	.word	0x08007c40
 80065d4:	08007c60 	.word	0x08007c60
 80065d8:	08007c20 	.word	0x08007c20

080065dc <__sflush_r>:
 80065dc:	898a      	ldrh	r2, [r1, #12]
 80065de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e2:	4605      	mov	r5, r0
 80065e4:	0710      	lsls	r0, r2, #28
 80065e6:	460c      	mov	r4, r1
 80065e8:	d458      	bmi.n	800669c <__sflush_r+0xc0>
 80065ea:	684b      	ldr	r3, [r1, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	dc05      	bgt.n	80065fc <__sflush_r+0x20>
 80065f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	dc02      	bgt.n	80065fc <__sflush_r+0x20>
 80065f6:	2000      	movs	r0, #0
 80065f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065fe:	2e00      	cmp	r6, #0
 8006600:	d0f9      	beq.n	80065f6 <__sflush_r+0x1a>
 8006602:	2300      	movs	r3, #0
 8006604:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006608:	682f      	ldr	r7, [r5, #0]
 800660a:	6a21      	ldr	r1, [r4, #32]
 800660c:	602b      	str	r3, [r5, #0]
 800660e:	d032      	beq.n	8006676 <__sflush_r+0x9a>
 8006610:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	075a      	lsls	r2, r3, #29
 8006616:	d505      	bpl.n	8006624 <__sflush_r+0x48>
 8006618:	6863      	ldr	r3, [r4, #4]
 800661a:	1ac0      	subs	r0, r0, r3
 800661c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800661e:	b10b      	cbz	r3, 8006624 <__sflush_r+0x48>
 8006620:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006622:	1ac0      	subs	r0, r0, r3
 8006624:	2300      	movs	r3, #0
 8006626:	4602      	mov	r2, r0
 8006628:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800662a:	6a21      	ldr	r1, [r4, #32]
 800662c:	4628      	mov	r0, r5
 800662e:	47b0      	blx	r6
 8006630:	1c43      	adds	r3, r0, #1
 8006632:	89a3      	ldrh	r3, [r4, #12]
 8006634:	d106      	bne.n	8006644 <__sflush_r+0x68>
 8006636:	6829      	ldr	r1, [r5, #0]
 8006638:	291d      	cmp	r1, #29
 800663a:	d848      	bhi.n	80066ce <__sflush_r+0xf2>
 800663c:	4a29      	ldr	r2, [pc, #164]	; (80066e4 <__sflush_r+0x108>)
 800663e:	40ca      	lsrs	r2, r1
 8006640:	07d6      	lsls	r6, r2, #31
 8006642:	d544      	bpl.n	80066ce <__sflush_r+0xf2>
 8006644:	2200      	movs	r2, #0
 8006646:	6062      	str	r2, [r4, #4]
 8006648:	6922      	ldr	r2, [r4, #16]
 800664a:	04d9      	lsls	r1, r3, #19
 800664c:	6022      	str	r2, [r4, #0]
 800664e:	d504      	bpl.n	800665a <__sflush_r+0x7e>
 8006650:	1c42      	adds	r2, r0, #1
 8006652:	d101      	bne.n	8006658 <__sflush_r+0x7c>
 8006654:	682b      	ldr	r3, [r5, #0]
 8006656:	b903      	cbnz	r3, 800665a <__sflush_r+0x7e>
 8006658:	6560      	str	r0, [r4, #84]	; 0x54
 800665a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800665c:	602f      	str	r7, [r5, #0]
 800665e:	2900      	cmp	r1, #0
 8006660:	d0c9      	beq.n	80065f6 <__sflush_r+0x1a>
 8006662:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006666:	4299      	cmp	r1, r3
 8006668:	d002      	beq.n	8006670 <__sflush_r+0x94>
 800666a:	4628      	mov	r0, r5
 800666c:	f001 f8e2 	bl	8007834 <_free_r>
 8006670:	2000      	movs	r0, #0
 8006672:	6360      	str	r0, [r4, #52]	; 0x34
 8006674:	e7c0      	b.n	80065f8 <__sflush_r+0x1c>
 8006676:	2301      	movs	r3, #1
 8006678:	4628      	mov	r0, r5
 800667a:	47b0      	blx	r6
 800667c:	1c41      	adds	r1, r0, #1
 800667e:	d1c8      	bne.n	8006612 <__sflush_r+0x36>
 8006680:	682b      	ldr	r3, [r5, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0c5      	beq.n	8006612 <__sflush_r+0x36>
 8006686:	2b1d      	cmp	r3, #29
 8006688:	d001      	beq.n	800668e <__sflush_r+0xb2>
 800668a:	2b16      	cmp	r3, #22
 800668c:	d101      	bne.n	8006692 <__sflush_r+0xb6>
 800668e:	602f      	str	r7, [r5, #0]
 8006690:	e7b1      	b.n	80065f6 <__sflush_r+0x1a>
 8006692:	89a3      	ldrh	r3, [r4, #12]
 8006694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006698:	81a3      	strh	r3, [r4, #12]
 800669a:	e7ad      	b.n	80065f8 <__sflush_r+0x1c>
 800669c:	690f      	ldr	r7, [r1, #16]
 800669e:	2f00      	cmp	r7, #0
 80066a0:	d0a9      	beq.n	80065f6 <__sflush_r+0x1a>
 80066a2:	0793      	lsls	r3, r2, #30
 80066a4:	bf18      	it	ne
 80066a6:	2300      	movne	r3, #0
 80066a8:	680e      	ldr	r6, [r1, #0]
 80066aa:	bf08      	it	eq
 80066ac:	694b      	ldreq	r3, [r1, #20]
 80066ae:	eba6 0807 	sub.w	r8, r6, r7
 80066b2:	600f      	str	r7, [r1, #0]
 80066b4:	608b      	str	r3, [r1, #8]
 80066b6:	f1b8 0f00 	cmp.w	r8, #0
 80066ba:	dd9c      	ble.n	80065f6 <__sflush_r+0x1a>
 80066bc:	4643      	mov	r3, r8
 80066be:	463a      	mov	r2, r7
 80066c0:	6a21      	ldr	r1, [r4, #32]
 80066c2:	4628      	mov	r0, r5
 80066c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066c6:	47b0      	blx	r6
 80066c8:	2800      	cmp	r0, #0
 80066ca:	dc06      	bgt.n	80066da <__sflush_r+0xfe>
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066d2:	81a3      	strh	r3, [r4, #12]
 80066d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066d8:	e78e      	b.n	80065f8 <__sflush_r+0x1c>
 80066da:	4407      	add	r7, r0
 80066dc:	eba8 0800 	sub.w	r8, r8, r0
 80066e0:	e7e9      	b.n	80066b6 <__sflush_r+0xda>
 80066e2:	bf00      	nop
 80066e4:	20400001 	.word	0x20400001

080066e8 <_fflush_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	690b      	ldr	r3, [r1, #16]
 80066ec:	4605      	mov	r5, r0
 80066ee:	460c      	mov	r4, r1
 80066f0:	b1db      	cbz	r3, 800672a <_fflush_r+0x42>
 80066f2:	b118      	cbz	r0, 80066fc <_fflush_r+0x14>
 80066f4:	6983      	ldr	r3, [r0, #24]
 80066f6:	b90b      	cbnz	r3, 80066fc <_fflush_r+0x14>
 80066f8:	f000 f860 	bl	80067bc <__sinit>
 80066fc:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <_fflush_r+0x48>)
 80066fe:	429c      	cmp	r4, r3
 8006700:	d109      	bne.n	8006716 <_fflush_r+0x2e>
 8006702:	686c      	ldr	r4, [r5, #4]
 8006704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006708:	b17b      	cbz	r3, 800672a <_fflush_r+0x42>
 800670a:	4621      	mov	r1, r4
 800670c:	4628      	mov	r0, r5
 800670e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006712:	f7ff bf63 	b.w	80065dc <__sflush_r>
 8006716:	4b07      	ldr	r3, [pc, #28]	; (8006734 <_fflush_r+0x4c>)
 8006718:	429c      	cmp	r4, r3
 800671a:	d101      	bne.n	8006720 <_fflush_r+0x38>
 800671c:	68ac      	ldr	r4, [r5, #8]
 800671e:	e7f1      	b.n	8006704 <_fflush_r+0x1c>
 8006720:	4b05      	ldr	r3, [pc, #20]	; (8006738 <_fflush_r+0x50>)
 8006722:	429c      	cmp	r4, r3
 8006724:	bf08      	it	eq
 8006726:	68ec      	ldreq	r4, [r5, #12]
 8006728:	e7ec      	b.n	8006704 <_fflush_r+0x1c>
 800672a:	2000      	movs	r0, #0
 800672c:	bd38      	pop	{r3, r4, r5, pc}
 800672e:	bf00      	nop
 8006730:	08007c40 	.word	0x08007c40
 8006734:	08007c60 	.word	0x08007c60
 8006738:	08007c20 	.word	0x08007c20

0800673c <std>:
 800673c:	2300      	movs	r3, #0
 800673e:	b510      	push	{r4, lr}
 8006740:	4604      	mov	r4, r0
 8006742:	e9c0 3300 	strd	r3, r3, [r0]
 8006746:	6083      	str	r3, [r0, #8]
 8006748:	8181      	strh	r1, [r0, #12]
 800674a:	6643      	str	r3, [r0, #100]	; 0x64
 800674c:	81c2      	strh	r2, [r0, #14]
 800674e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006752:	6183      	str	r3, [r0, #24]
 8006754:	4619      	mov	r1, r3
 8006756:	2208      	movs	r2, #8
 8006758:	305c      	adds	r0, #92	; 0x5c
 800675a:	f7fe ffdf 	bl	800571c <memset>
 800675e:	4b05      	ldr	r3, [pc, #20]	; (8006774 <std+0x38>)
 8006760:	6224      	str	r4, [r4, #32]
 8006762:	6263      	str	r3, [r4, #36]	; 0x24
 8006764:	4b04      	ldr	r3, [pc, #16]	; (8006778 <std+0x3c>)
 8006766:	62a3      	str	r3, [r4, #40]	; 0x28
 8006768:	4b04      	ldr	r3, [pc, #16]	; (800677c <std+0x40>)
 800676a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800676c:	4b04      	ldr	r3, [pc, #16]	; (8006780 <std+0x44>)
 800676e:	6323      	str	r3, [r4, #48]	; 0x30
 8006770:	bd10      	pop	{r4, pc}
 8006772:	bf00      	nop
 8006774:	080079a1 	.word	0x080079a1
 8006778:	080079c3 	.word	0x080079c3
 800677c:	080079fb 	.word	0x080079fb
 8006780:	08007a1f 	.word	0x08007a1f

08006784 <_cleanup_r>:
 8006784:	4901      	ldr	r1, [pc, #4]	; (800678c <_cleanup_r+0x8>)
 8006786:	f000 b885 	b.w	8006894 <_fwalk_reent>
 800678a:	bf00      	nop
 800678c:	080066e9 	.word	0x080066e9

08006790 <__sfmoreglue>:
 8006790:	b570      	push	{r4, r5, r6, lr}
 8006792:	2568      	movs	r5, #104	; 0x68
 8006794:	1e4a      	subs	r2, r1, #1
 8006796:	4355      	muls	r5, r2
 8006798:	460e      	mov	r6, r1
 800679a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800679e:	f001 f895 	bl	80078cc <_malloc_r>
 80067a2:	4604      	mov	r4, r0
 80067a4:	b140      	cbz	r0, 80067b8 <__sfmoreglue+0x28>
 80067a6:	2100      	movs	r1, #0
 80067a8:	e9c0 1600 	strd	r1, r6, [r0]
 80067ac:	300c      	adds	r0, #12
 80067ae:	60a0      	str	r0, [r4, #8]
 80067b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067b4:	f7fe ffb2 	bl	800571c <memset>
 80067b8:	4620      	mov	r0, r4
 80067ba:	bd70      	pop	{r4, r5, r6, pc}

080067bc <__sinit>:
 80067bc:	6983      	ldr	r3, [r0, #24]
 80067be:	b510      	push	{r4, lr}
 80067c0:	4604      	mov	r4, r0
 80067c2:	bb33      	cbnz	r3, 8006812 <__sinit+0x56>
 80067c4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80067c8:	6503      	str	r3, [r0, #80]	; 0x50
 80067ca:	4b12      	ldr	r3, [pc, #72]	; (8006814 <__sinit+0x58>)
 80067cc:	4a12      	ldr	r2, [pc, #72]	; (8006818 <__sinit+0x5c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6282      	str	r2, [r0, #40]	; 0x28
 80067d2:	4298      	cmp	r0, r3
 80067d4:	bf04      	itt	eq
 80067d6:	2301      	moveq	r3, #1
 80067d8:	6183      	streq	r3, [r0, #24]
 80067da:	f000 f81f 	bl	800681c <__sfp>
 80067de:	6060      	str	r0, [r4, #4]
 80067e0:	4620      	mov	r0, r4
 80067e2:	f000 f81b 	bl	800681c <__sfp>
 80067e6:	60a0      	str	r0, [r4, #8]
 80067e8:	4620      	mov	r0, r4
 80067ea:	f000 f817 	bl	800681c <__sfp>
 80067ee:	2200      	movs	r2, #0
 80067f0:	60e0      	str	r0, [r4, #12]
 80067f2:	2104      	movs	r1, #4
 80067f4:	6860      	ldr	r0, [r4, #4]
 80067f6:	f7ff ffa1 	bl	800673c <std>
 80067fa:	2201      	movs	r2, #1
 80067fc:	2109      	movs	r1, #9
 80067fe:	68a0      	ldr	r0, [r4, #8]
 8006800:	f7ff ff9c 	bl	800673c <std>
 8006804:	2202      	movs	r2, #2
 8006806:	2112      	movs	r1, #18
 8006808:	68e0      	ldr	r0, [r4, #12]
 800680a:	f7ff ff97 	bl	800673c <std>
 800680e:	2301      	movs	r3, #1
 8006810:	61a3      	str	r3, [r4, #24]
 8006812:	bd10      	pop	{r4, pc}
 8006814:	08007bbc 	.word	0x08007bbc
 8006818:	08006785 	.word	0x08006785

0800681c <__sfp>:
 800681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681e:	4b1b      	ldr	r3, [pc, #108]	; (800688c <__sfp+0x70>)
 8006820:	4607      	mov	r7, r0
 8006822:	681e      	ldr	r6, [r3, #0]
 8006824:	69b3      	ldr	r3, [r6, #24]
 8006826:	b913      	cbnz	r3, 800682e <__sfp+0x12>
 8006828:	4630      	mov	r0, r6
 800682a:	f7ff ffc7 	bl	80067bc <__sinit>
 800682e:	3648      	adds	r6, #72	; 0x48
 8006830:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006834:	3b01      	subs	r3, #1
 8006836:	d503      	bpl.n	8006840 <__sfp+0x24>
 8006838:	6833      	ldr	r3, [r6, #0]
 800683a:	b133      	cbz	r3, 800684a <__sfp+0x2e>
 800683c:	6836      	ldr	r6, [r6, #0]
 800683e:	e7f7      	b.n	8006830 <__sfp+0x14>
 8006840:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006844:	b16d      	cbz	r5, 8006862 <__sfp+0x46>
 8006846:	3468      	adds	r4, #104	; 0x68
 8006848:	e7f4      	b.n	8006834 <__sfp+0x18>
 800684a:	2104      	movs	r1, #4
 800684c:	4638      	mov	r0, r7
 800684e:	f7ff ff9f 	bl	8006790 <__sfmoreglue>
 8006852:	6030      	str	r0, [r6, #0]
 8006854:	2800      	cmp	r0, #0
 8006856:	d1f1      	bne.n	800683c <__sfp+0x20>
 8006858:	230c      	movs	r3, #12
 800685a:	4604      	mov	r4, r0
 800685c:	603b      	str	r3, [r7, #0]
 800685e:	4620      	mov	r0, r4
 8006860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006862:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <__sfp+0x74>)
 8006864:	6665      	str	r5, [r4, #100]	; 0x64
 8006866:	e9c4 5500 	strd	r5, r5, [r4]
 800686a:	60a5      	str	r5, [r4, #8]
 800686c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006870:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006874:	2208      	movs	r2, #8
 8006876:	4629      	mov	r1, r5
 8006878:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800687c:	f7fe ff4e 	bl	800571c <memset>
 8006880:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006884:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006888:	e7e9      	b.n	800685e <__sfp+0x42>
 800688a:	bf00      	nop
 800688c:	08007bbc 	.word	0x08007bbc
 8006890:	ffff0001 	.word	0xffff0001

08006894 <_fwalk_reent>:
 8006894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006898:	4680      	mov	r8, r0
 800689a:	4689      	mov	r9, r1
 800689c:	2600      	movs	r6, #0
 800689e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80068a2:	b914      	cbnz	r4, 80068aa <_fwalk_reent+0x16>
 80068a4:	4630      	mov	r0, r6
 80068a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80068ae:	3f01      	subs	r7, #1
 80068b0:	d501      	bpl.n	80068b6 <_fwalk_reent+0x22>
 80068b2:	6824      	ldr	r4, [r4, #0]
 80068b4:	e7f5      	b.n	80068a2 <_fwalk_reent+0xe>
 80068b6:	89ab      	ldrh	r3, [r5, #12]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d907      	bls.n	80068cc <_fwalk_reent+0x38>
 80068bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068c0:	3301      	adds	r3, #1
 80068c2:	d003      	beq.n	80068cc <_fwalk_reent+0x38>
 80068c4:	4629      	mov	r1, r5
 80068c6:	4640      	mov	r0, r8
 80068c8:	47c8      	blx	r9
 80068ca:	4306      	orrs	r6, r0
 80068cc:	3568      	adds	r5, #104	; 0x68
 80068ce:	e7ee      	b.n	80068ae <_fwalk_reent+0x1a>

080068d0 <rshift>:
 80068d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068d2:	6906      	ldr	r6, [r0, #16]
 80068d4:	114b      	asrs	r3, r1, #5
 80068d6:	429e      	cmp	r6, r3
 80068d8:	f100 0414 	add.w	r4, r0, #20
 80068dc:	dd31      	ble.n	8006942 <rshift+0x72>
 80068de:	f011 011f 	ands.w	r1, r1, #31
 80068e2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80068e6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80068ea:	d108      	bne.n	80068fe <rshift+0x2e>
 80068ec:	4621      	mov	r1, r4
 80068ee:	42b2      	cmp	r2, r6
 80068f0:	460b      	mov	r3, r1
 80068f2:	d211      	bcs.n	8006918 <rshift+0x48>
 80068f4:	f852 3b04 	ldr.w	r3, [r2], #4
 80068f8:	f841 3b04 	str.w	r3, [r1], #4
 80068fc:	e7f7      	b.n	80068ee <rshift+0x1e>
 80068fe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006902:	4623      	mov	r3, r4
 8006904:	f1c1 0c20 	rsb	ip, r1, #32
 8006908:	40cd      	lsrs	r5, r1
 800690a:	3204      	adds	r2, #4
 800690c:	42b2      	cmp	r2, r6
 800690e:	4617      	mov	r7, r2
 8006910:	d30d      	bcc.n	800692e <rshift+0x5e>
 8006912:	601d      	str	r5, [r3, #0]
 8006914:	b105      	cbz	r5, 8006918 <rshift+0x48>
 8006916:	3304      	adds	r3, #4
 8006918:	42a3      	cmp	r3, r4
 800691a:	eba3 0204 	sub.w	r2, r3, r4
 800691e:	bf08      	it	eq
 8006920:	2300      	moveq	r3, #0
 8006922:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006926:	6102      	str	r2, [r0, #16]
 8006928:	bf08      	it	eq
 800692a:	6143      	streq	r3, [r0, #20]
 800692c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800692e:	683f      	ldr	r7, [r7, #0]
 8006930:	fa07 f70c 	lsl.w	r7, r7, ip
 8006934:	433d      	orrs	r5, r7
 8006936:	f843 5b04 	str.w	r5, [r3], #4
 800693a:	f852 5b04 	ldr.w	r5, [r2], #4
 800693e:	40cd      	lsrs	r5, r1
 8006940:	e7e4      	b.n	800690c <rshift+0x3c>
 8006942:	4623      	mov	r3, r4
 8006944:	e7e8      	b.n	8006918 <rshift+0x48>

08006946 <__hexdig_fun>:
 8006946:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800694a:	2b09      	cmp	r3, #9
 800694c:	d802      	bhi.n	8006954 <__hexdig_fun+0xe>
 800694e:	3820      	subs	r0, #32
 8006950:	b2c0      	uxtb	r0, r0
 8006952:	4770      	bx	lr
 8006954:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006958:	2b05      	cmp	r3, #5
 800695a:	d801      	bhi.n	8006960 <__hexdig_fun+0x1a>
 800695c:	3847      	subs	r0, #71	; 0x47
 800695e:	e7f7      	b.n	8006950 <__hexdig_fun+0xa>
 8006960:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006964:	2b05      	cmp	r3, #5
 8006966:	d801      	bhi.n	800696c <__hexdig_fun+0x26>
 8006968:	3827      	subs	r0, #39	; 0x27
 800696a:	e7f1      	b.n	8006950 <__hexdig_fun+0xa>
 800696c:	2000      	movs	r0, #0
 800696e:	4770      	bx	lr

08006970 <__gethex>:
 8006970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006974:	b08b      	sub	sp, #44	; 0x2c
 8006976:	9002      	str	r0, [sp, #8]
 8006978:	9816      	ldr	r0, [sp, #88]	; 0x58
 800697a:	468a      	mov	sl, r1
 800697c:	4690      	mov	r8, r2
 800697e:	9306      	str	r3, [sp, #24]
 8006980:	f000 face 	bl	8006f20 <__localeconv_l>
 8006984:	6803      	ldr	r3, [r0, #0]
 8006986:	f04f 0b00 	mov.w	fp, #0
 800698a:	4618      	mov	r0, r3
 800698c:	9303      	str	r3, [sp, #12]
 800698e:	f7f9 fbdf 	bl	8000150 <strlen>
 8006992:	9b03      	ldr	r3, [sp, #12]
 8006994:	9001      	str	r0, [sp, #4]
 8006996:	4403      	add	r3, r0
 8006998:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800699c:	9307      	str	r3, [sp, #28]
 800699e:	f8da 3000 	ldr.w	r3, [sl]
 80069a2:	3302      	adds	r3, #2
 80069a4:	461f      	mov	r7, r3
 80069a6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80069aa:	2830      	cmp	r0, #48	; 0x30
 80069ac:	d06c      	beq.n	8006a88 <__gethex+0x118>
 80069ae:	f7ff ffca 	bl	8006946 <__hexdig_fun>
 80069b2:	4604      	mov	r4, r0
 80069b4:	2800      	cmp	r0, #0
 80069b6:	d16a      	bne.n	8006a8e <__gethex+0x11e>
 80069b8:	9a01      	ldr	r2, [sp, #4]
 80069ba:	9903      	ldr	r1, [sp, #12]
 80069bc:	4638      	mov	r0, r7
 80069be:	f001 f832 	bl	8007a26 <strncmp>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d166      	bne.n	8006a94 <__gethex+0x124>
 80069c6:	9b01      	ldr	r3, [sp, #4]
 80069c8:	5cf8      	ldrb	r0, [r7, r3]
 80069ca:	18fe      	adds	r6, r7, r3
 80069cc:	f7ff ffbb 	bl	8006946 <__hexdig_fun>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d062      	beq.n	8006a9a <__gethex+0x12a>
 80069d4:	4633      	mov	r3, r6
 80069d6:	7818      	ldrb	r0, [r3, #0]
 80069d8:	461f      	mov	r7, r3
 80069da:	2830      	cmp	r0, #48	; 0x30
 80069dc:	f103 0301 	add.w	r3, r3, #1
 80069e0:	d0f9      	beq.n	80069d6 <__gethex+0x66>
 80069e2:	f7ff ffb0 	bl	8006946 <__hexdig_fun>
 80069e6:	fab0 f580 	clz	r5, r0
 80069ea:	4634      	mov	r4, r6
 80069ec:	f04f 0b01 	mov.w	fp, #1
 80069f0:	096d      	lsrs	r5, r5, #5
 80069f2:	463a      	mov	r2, r7
 80069f4:	4616      	mov	r6, r2
 80069f6:	7830      	ldrb	r0, [r6, #0]
 80069f8:	3201      	adds	r2, #1
 80069fa:	f7ff ffa4 	bl	8006946 <__hexdig_fun>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d1f8      	bne.n	80069f4 <__gethex+0x84>
 8006a02:	9a01      	ldr	r2, [sp, #4]
 8006a04:	9903      	ldr	r1, [sp, #12]
 8006a06:	4630      	mov	r0, r6
 8006a08:	f001 f80d 	bl	8007a26 <strncmp>
 8006a0c:	b950      	cbnz	r0, 8006a24 <__gethex+0xb4>
 8006a0e:	b954      	cbnz	r4, 8006a26 <__gethex+0xb6>
 8006a10:	9b01      	ldr	r3, [sp, #4]
 8006a12:	18f4      	adds	r4, r6, r3
 8006a14:	4622      	mov	r2, r4
 8006a16:	4616      	mov	r6, r2
 8006a18:	7830      	ldrb	r0, [r6, #0]
 8006a1a:	3201      	adds	r2, #1
 8006a1c:	f7ff ff93 	bl	8006946 <__hexdig_fun>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d1f8      	bne.n	8006a16 <__gethex+0xa6>
 8006a24:	b10c      	cbz	r4, 8006a2a <__gethex+0xba>
 8006a26:	1ba4      	subs	r4, r4, r6
 8006a28:	00a4      	lsls	r4, r4, #2
 8006a2a:	7833      	ldrb	r3, [r6, #0]
 8006a2c:	2b50      	cmp	r3, #80	; 0x50
 8006a2e:	d001      	beq.n	8006a34 <__gethex+0xc4>
 8006a30:	2b70      	cmp	r3, #112	; 0x70
 8006a32:	d140      	bne.n	8006ab6 <__gethex+0x146>
 8006a34:	7873      	ldrb	r3, [r6, #1]
 8006a36:	2b2b      	cmp	r3, #43	; 0x2b
 8006a38:	d031      	beq.n	8006a9e <__gethex+0x12e>
 8006a3a:	2b2d      	cmp	r3, #45	; 0x2d
 8006a3c:	d033      	beq.n	8006aa6 <__gethex+0x136>
 8006a3e:	f04f 0900 	mov.w	r9, #0
 8006a42:	1c71      	adds	r1, r6, #1
 8006a44:	7808      	ldrb	r0, [r1, #0]
 8006a46:	f7ff ff7e 	bl	8006946 <__hexdig_fun>
 8006a4a:	1e43      	subs	r3, r0, #1
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b18      	cmp	r3, #24
 8006a50:	d831      	bhi.n	8006ab6 <__gethex+0x146>
 8006a52:	f1a0 0210 	sub.w	r2, r0, #16
 8006a56:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006a5a:	f7ff ff74 	bl	8006946 <__hexdig_fun>
 8006a5e:	1e43      	subs	r3, r0, #1
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b18      	cmp	r3, #24
 8006a64:	d922      	bls.n	8006aac <__gethex+0x13c>
 8006a66:	f1b9 0f00 	cmp.w	r9, #0
 8006a6a:	d000      	beq.n	8006a6e <__gethex+0xfe>
 8006a6c:	4252      	negs	r2, r2
 8006a6e:	4414      	add	r4, r2
 8006a70:	f8ca 1000 	str.w	r1, [sl]
 8006a74:	b30d      	cbz	r5, 8006aba <__gethex+0x14a>
 8006a76:	f1bb 0f00 	cmp.w	fp, #0
 8006a7a:	bf0c      	ite	eq
 8006a7c:	2706      	moveq	r7, #6
 8006a7e:	2700      	movne	r7, #0
 8006a80:	4638      	mov	r0, r7
 8006a82:	b00b      	add	sp, #44	; 0x2c
 8006a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a88:	f10b 0b01 	add.w	fp, fp, #1
 8006a8c:	e78a      	b.n	80069a4 <__gethex+0x34>
 8006a8e:	2500      	movs	r5, #0
 8006a90:	462c      	mov	r4, r5
 8006a92:	e7ae      	b.n	80069f2 <__gethex+0x82>
 8006a94:	463e      	mov	r6, r7
 8006a96:	2501      	movs	r5, #1
 8006a98:	e7c7      	b.n	8006a2a <__gethex+0xba>
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	e7fb      	b.n	8006a96 <__gethex+0x126>
 8006a9e:	f04f 0900 	mov.w	r9, #0
 8006aa2:	1cb1      	adds	r1, r6, #2
 8006aa4:	e7ce      	b.n	8006a44 <__gethex+0xd4>
 8006aa6:	f04f 0901 	mov.w	r9, #1
 8006aaa:	e7fa      	b.n	8006aa2 <__gethex+0x132>
 8006aac:	230a      	movs	r3, #10
 8006aae:	fb03 0202 	mla	r2, r3, r2, r0
 8006ab2:	3a10      	subs	r2, #16
 8006ab4:	e7cf      	b.n	8006a56 <__gethex+0xe6>
 8006ab6:	4631      	mov	r1, r6
 8006ab8:	e7da      	b.n	8006a70 <__gethex+0x100>
 8006aba:	4629      	mov	r1, r5
 8006abc:	1bf3      	subs	r3, r6, r7
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	2b07      	cmp	r3, #7
 8006ac2:	dc49      	bgt.n	8006b58 <__gethex+0x1e8>
 8006ac4:	9802      	ldr	r0, [sp, #8]
 8006ac6:	f000 faae 	bl	8007026 <_Balloc>
 8006aca:	f04f 0b00 	mov.w	fp, #0
 8006ace:	4605      	mov	r5, r0
 8006ad0:	46da      	mov	sl, fp
 8006ad2:	9b01      	ldr	r3, [sp, #4]
 8006ad4:	f100 0914 	add.w	r9, r0, #20
 8006ad8:	f1c3 0301 	rsb	r3, r3, #1
 8006adc:	f8cd 9010 	str.w	r9, [sp, #16]
 8006ae0:	9308      	str	r3, [sp, #32]
 8006ae2:	42b7      	cmp	r7, r6
 8006ae4:	d33b      	bcc.n	8006b5e <__gethex+0x1ee>
 8006ae6:	9804      	ldr	r0, [sp, #16]
 8006ae8:	f840 ab04 	str.w	sl, [r0], #4
 8006aec:	eba0 0009 	sub.w	r0, r0, r9
 8006af0:	1080      	asrs	r0, r0, #2
 8006af2:	6128      	str	r0, [r5, #16]
 8006af4:	0147      	lsls	r7, r0, #5
 8006af6:	4650      	mov	r0, sl
 8006af8:	f000 fb59 	bl	80071ae <__hi0bits>
 8006afc:	f8d8 6000 	ldr.w	r6, [r8]
 8006b00:	1a3f      	subs	r7, r7, r0
 8006b02:	42b7      	cmp	r7, r6
 8006b04:	dd64      	ble.n	8006bd0 <__gethex+0x260>
 8006b06:	1bbf      	subs	r7, r7, r6
 8006b08:	4639      	mov	r1, r7
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	f000 fe63 	bl	80077d6 <__any_on>
 8006b10:	4682      	mov	sl, r0
 8006b12:	b178      	cbz	r0, 8006b34 <__gethex+0x1c4>
 8006b14:	f04f 0a01 	mov.w	sl, #1
 8006b18:	1e7b      	subs	r3, r7, #1
 8006b1a:	1159      	asrs	r1, r3, #5
 8006b1c:	f003 021f 	and.w	r2, r3, #31
 8006b20:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006b24:	fa0a f202 	lsl.w	r2, sl, r2
 8006b28:	420a      	tst	r2, r1
 8006b2a:	d003      	beq.n	8006b34 <__gethex+0x1c4>
 8006b2c:	4553      	cmp	r3, sl
 8006b2e:	dc46      	bgt.n	8006bbe <__gethex+0x24e>
 8006b30:	f04f 0a02 	mov.w	sl, #2
 8006b34:	4639      	mov	r1, r7
 8006b36:	4628      	mov	r0, r5
 8006b38:	f7ff feca 	bl	80068d0 <rshift>
 8006b3c:	443c      	add	r4, r7
 8006b3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b42:	42a3      	cmp	r3, r4
 8006b44:	da52      	bge.n	8006bec <__gethex+0x27c>
 8006b46:	4629      	mov	r1, r5
 8006b48:	9802      	ldr	r0, [sp, #8]
 8006b4a:	f000 faa0 	bl	800708e <_Bfree>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b52:	27a3      	movs	r7, #163	; 0xa3
 8006b54:	6013      	str	r3, [r2, #0]
 8006b56:	e793      	b.n	8006a80 <__gethex+0x110>
 8006b58:	3101      	adds	r1, #1
 8006b5a:	105b      	asrs	r3, r3, #1
 8006b5c:	e7b0      	b.n	8006ac0 <__gethex+0x150>
 8006b5e:	1e73      	subs	r3, r6, #1
 8006b60:	9305      	str	r3, [sp, #20]
 8006b62:	9a07      	ldr	r2, [sp, #28]
 8006b64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d018      	beq.n	8006b9e <__gethex+0x22e>
 8006b6c:	f1bb 0f20 	cmp.w	fp, #32
 8006b70:	d107      	bne.n	8006b82 <__gethex+0x212>
 8006b72:	9b04      	ldr	r3, [sp, #16]
 8006b74:	f8c3 a000 	str.w	sl, [r3]
 8006b78:	f04f 0a00 	mov.w	sl, #0
 8006b7c:	46d3      	mov	fp, sl
 8006b7e:	3304      	adds	r3, #4
 8006b80:	9304      	str	r3, [sp, #16]
 8006b82:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006b86:	f7ff fede 	bl	8006946 <__hexdig_fun>
 8006b8a:	f000 000f 	and.w	r0, r0, #15
 8006b8e:	fa00 f00b 	lsl.w	r0, r0, fp
 8006b92:	ea4a 0a00 	orr.w	sl, sl, r0
 8006b96:	f10b 0b04 	add.w	fp, fp, #4
 8006b9a:	9b05      	ldr	r3, [sp, #20]
 8006b9c:	e00d      	b.n	8006bba <__gethex+0x24a>
 8006b9e:	9b05      	ldr	r3, [sp, #20]
 8006ba0:	9a08      	ldr	r2, [sp, #32]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	42bb      	cmp	r3, r7
 8006ba6:	d3e1      	bcc.n	8006b6c <__gethex+0x1fc>
 8006ba8:	4618      	mov	r0, r3
 8006baa:	9a01      	ldr	r2, [sp, #4]
 8006bac:	9903      	ldr	r1, [sp, #12]
 8006bae:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb0:	f000 ff39 	bl	8007a26 <strncmp>
 8006bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d1d8      	bne.n	8006b6c <__gethex+0x1fc>
 8006bba:	461e      	mov	r6, r3
 8006bbc:	e791      	b.n	8006ae2 <__gethex+0x172>
 8006bbe:	1eb9      	subs	r1, r7, #2
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	f000 fe08 	bl	80077d6 <__any_on>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	d0b2      	beq.n	8006b30 <__gethex+0x1c0>
 8006bca:	f04f 0a03 	mov.w	sl, #3
 8006bce:	e7b1      	b.n	8006b34 <__gethex+0x1c4>
 8006bd0:	da09      	bge.n	8006be6 <__gethex+0x276>
 8006bd2:	1bf7      	subs	r7, r6, r7
 8006bd4:	4629      	mov	r1, r5
 8006bd6:	463a      	mov	r2, r7
 8006bd8:	9802      	ldr	r0, [sp, #8]
 8006bda:	f000 fc23 	bl	8007424 <__lshift>
 8006bde:	4605      	mov	r5, r0
 8006be0:	1be4      	subs	r4, r4, r7
 8006be2:	f100 0914 	add.w	r9, r0, #20
 8006be6:	f04f 0a00 	mov.w	sl, #0
 8006bea:	e7a8      	b.n	8006b3e <__gethex+0x1ce>
 8006bec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006bf0:	42a0      	cmp	r0, r4
 8006bf2:	dd6b      	ble.n	8006ccc <__gethex+0x35c>
 8006bf4:	1b04      	subs	r4, r0, r4
 8006bf6:	42a6      	cmp	r6, r4
 8006bf8:	dc2e      	bgt.n	8006c58 <__gethex+0x2e8>
 8006bfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d022      	beq.n	8006c48 <__gethex+0x2d8>
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d024      	beq.n	8006c50 <__gethex+0x2e0>
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d115      	bne.n	8006c36 <__gethex+0x2c6>
 8006c0a:	42a6      	cmp	r6, r4
 8006c0c:	d113      	bne.n	8006c36 <__gethex+0x2c6>
 8006c0e:	2e01      	cmp	r6, #1
 8006c10:	dc0b      	bgt.n	8006c2a <__gethex+0x2ba>
 8006c12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006c16:	9a06      	ldr	r2, [sp, #24]
 8006c18:	2762      	movs	r7, #98	; 0x62
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	612b      	str	r3, [r5, #16]
 8006c20:	f8c9 3000 	str.w	r3, [r9]
 8006c24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c26:	601d      	str	r5, [r3, #0]
 8006c28:	e72a      	b.n	8006a80 <__gethex+0x110>
 8006c2a:	1e71      	subs	r1, r6, #1
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	f000 fdd2 	bl	80077d6 <__any_on>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d1ed      	bne.n	8006c12 <__gethex+0x2a2>
 8006c36:	4629      	mov	r1, r5
 8006c38:	9802      	ldr	r0, [sp, #8]
 8006c3a:	f000 fa28 	bl	800708e <_Bfree>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c42:	2750      	movs	r7, #80	; 0x50
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	e71b      	b.n	8006a80 <__gethex+0x110>
 8006c48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0e1      	beq.n	8006c12 <__gethex+0x2a2>
 8006c4e:	e7f2      	b.n	8006c36 <__gethex+0x2c6>
 8006c50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1dd      	bne.n	8006c12 <__gethex+0x2a2>
 8006c56:	e7ee      	b.n	8006c36 <__gethex+0x2c6>
 8006c58:	1e67      	subs	r7, r4, #1
 8006c5a:	f1ba 0f00 	cmp.w	sl, #0
 8006c5e:	d132      	bne.n	8006cc6 <__gethex+0x356>
 8006c60:	b127      	cbz	r7, 8006c6c <__gethex+0x2fc>
 8006c62:	4639      	mov	r1, r7
 8006c64:	4628      	mov	r0, r5
 8006c66:	f000 fdb6 	bl	80077d6 <__any_on>
 8006c6a:	4682      	mov	sl, r0
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	117a      	asrs	r2, r7, #5
 8006c70:	f007 071f 	and.w	r7, r7, #31
 8006c74:	fa03 f707 	lsl.w	r7, r3, r7
 8006c78:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	421f      	tst	r7, r3
 8006c80:	f04f 0702 	mov.w	r7, #2
 8006c84:	4628      	mov	r0, r5
 8006c86:	bf18      	it	ne
 8006c88:	f04a 0a02 	orrne.w	sl, sl, #2
 8006c8c:	1b36      	subs	r6, r6, r4
 8006c8e:	f7ff fe1f 	bl	80068d0 <rshift>
 8006c92:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006c96:	f1ba 0f00 	cmp.w	sl, #0
 8006c9a:	d048      	beq.n	8006d2e <__gethex+0x3be>
 8006c9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d015      	beq.n	8006cd0 <__gethex+0x360>
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d017      	beq.n	8006cd8 <__gethex+0x368>
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d109      	bne.n	8006cc0 <__gethex+0x350>
 8006cac:	f01a 0f02 	tst.w	sl, #2
 8006cb0:	d006      	beq.n	8006cc0 <__gethex+0x350>
 8006cb2:	f8d9 3000 	ldr.w	r3, [r9]
 8006cb6:	ea4a 0a03 	orr.w	sl, sl, r3
 8006cba:	f01a 0f01 	tst.w	sl, #1
 8006cbe:	d10e      	bne.n	8006cde <__gethex+0x36e>
 8006cc0:	f047 0710 	orr.w	r7, r7, #16
 8006cc4:	e033      	b.n	8006d2e <__gethex+0x3be>
 8006cc6:	f04f 0a01 	mov.w	sl, #1
 8006cca:	e7cf      	b.n	8006c6c <__gethex+0x2fc>
 8006ccc:	2701      	movs	r7, #1
 8006cce:	e7e2      	b.n	8006c96 <__gethex+0x326>
 8006cd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cd2:	f1c3 0301 	rsb	r3, r3, #1
 8006cd6:	9315      	str	r3, [sp, #84]	; 0x54
 8006cd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0f0      	beq.n	8006cc0 <__gethex+0x350>
 8006cde:	f04f 0c00 	mov.w	ip, #0
 8006ce2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006ce6:	f105 0314 	add.w	r3, r5, #20
 8006cea:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006cee:	eb03 010a 	add.w	r1, r3, sl
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cf8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006cfc:	d01c      	beq.n	8006d38 <__gethex+0x3c8>
 8006cfe:	3201      	adds	r2, #1
 8006d00:	6002      	str	r2, [r0, #0]
 8006d02:	2f02      	cmp	r7, #2
 8006d04:	f105 0314 	add.w	r3, r5, #20
 8006d08:	d138      	bne.n	8006d7c <__gethex+0x40c>
 8006d0a:	f8d8 2000 	ldr.w	r2, [r8]
 8006d0e:	3a01      	subs	r2, #1
 8006d10:	42b2      	cmp	r2, r6
 8006d12:	d10a      	bne.n	8006d2a <__gethex+0x3ba>
 8006d14:	2201      	movs	r2, #1
 8006d16:	1171      	asrs	r1, r6, #5
 8006d18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d1c:	f006 061f 	and.w	r6, r6, #31
 8006d20:	fa02 f606 	lsl.w	r6, r2, r6
 8006d24:	421e      	tst	r6, r3
 8006d26:	bf18      	it	ne
 8006d28:	4617      	movne	r7, r2
 8006d2a:	f047 0720 	orr.w	r7, r7, #32
 8006d2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d30:	601d      	str	r5, [r3, #0]
 8006d32:	9b06      	ldr	r3, [sp, #24]
 8006d34:	601c      	str	r4, [r3, #0]
 8006d36:	e6a3      	b.n	8006a80 <__gethex+0x110>
 8006d38:	4299      	cmp	r1, r3
 8006d3a:	f843 cc04 	str.w	ip, [r3, #-4]
 8006d3e:	d8d8      	bhi.n	8006cf2 <__gethex+0x382>
 8006d40:	68ab      	ldr	r3, [r5, #8]
 8006d42:	4599      	cmp	r9, r3
 8006d44:	db12      	blt.n	8006d6c <__gethex+0x3fc>
 8006d46:	6869      	ldr	r1, [r5, #4]
 8006d48:	9802      	ldr	r0, [sp, #8]
 8006d4a:	3101      	adds	r1, #1
 8006d4c:	f000 f96b 	bl	8007026 <_Balloc>
 8006d50:	4683      	mov	fp, r0
 8006d52:	692a      	ldr	r2, [r5, #16]
 8006d54:	f105 010c 	add.w	r1, r5, #12
 8006d58:	3202      	adds	r2, #2
 8006d5a:	0092      	lsls	r2, r2, #2
 8006d5c:	300c      	adds	r0, #12
 8006d5e:	f000 f957 	bl	8007010 <memcpy>
 8006d62:	4629      	mov	r1, r5
 8006d64:	9802      	ldr	r0, [sp, #8]
 8006d66:	f000 f992 	bl	800708e <_Bfree>
 8006d6a:	465d      	mov	r5, fp
 8006d6c:	692b      	ldr	r3, [r5, #16]
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	612a      	str	r2, [r5, #16]
 8006d72:	2201      	movs	r2, #1
 8006d74:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006d78:	615a      	str	r2, [r3, #20]
 8006d7a:	e7c2      	b.n	8006d02 <__gethex+0x392>
 8006d7c:	692a      	ldr	r2, [r5, #16]
 8006d7e:	454a      	cmp	r2, r9
 8006d80:	dd0b      	ble.n	8006d9a <__gethex+0x42a>
 8006d82:	2101      	movs	r1, #1
 8006d84:	4628      	mov	r0, r5
 8006d86:	f7ff fda3 	bl	80068d0 <rshift>
 8006d8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d8e:	3401      	adds	r4, #1
 8006d90:	42a3      	cmp	r3, r4
 8006d92:	f6ff aed8 	blt.w	8006b46 <__gethex+0x1d6>
 8006d96:	2701      	movs	r7, #1
 8006d98:	e7c7      	b.n	8006d2a <__gethex+0x3ba>
 8006d9a:	f016 061f 	ands.w	r6, r6, #31
 8006d9e:	d0fa      	beq.n	8006d96 <__gethex+0x426>
 8006da0:	449a      	add	sl, r3
 8006da2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006da6:	f000 fa02 	bl	80071ae <__hi0bits>
 8006daa:	f1c6 0620 	rsb	r6, r6, #32
 8006dae:	42b0      	cmp	r0, r6
 8006db0:	dbe7      	blt.n	8006d82 <__gethex+0x412>
 8006db2:	e7f0      	b.n	8006d96 <__gethex+0x426>

08006db4 <L_shift>:
 8006db4:	f1c2 0208 	rsb	r2, r2, #8
 8006db8:	0092      	lsls	r2, r2, #2
 8006dba:	b570      	push	{r4, r5, r6, lr}
 8006dbc:	f1c2 0620 	rsb	r6, r2, #32
 8006dc0:	6843      	ldr	r3, [r0, #4]
 8006dc2:	6804      	ldr	r4, [r0, #0]
 8006dc4:	fa03 f506 	lsl.w	r5, r3, r6
 8006dc8:	432c      	orrs	r4, r5
 8006dca:	40d3      	lsrs	r3, r2
 8006dcc:	6004      	str	r4, [r0, #0]
 8006dce:	f840 3f04 	str.w	r3, [r0, #4]!
 8006dd2:	4288      	cmp	r0, r1
 8006dd4:	d3f4      	bcc.n	8006dc0 <L_shift+0xc>
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}

08006dd8 <__match>:
 8006dd8:	b530      	push	{r4, r5, lr}
 8006dda:	6803      	ldr	r3, [r0, #0]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006de2:	b914      	cbnz	r4, 8006dea <__match+0x12>
 8006de4:	6003      	str	r3, [r0, #0]
 8006de6:	2001      	movs	r0, #1
 8006de8:	bd30      	pop	{r4, r5, pc}
 8006dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006df2:	2d19      	cmp	r5, #25
 8006df4:	bf98      	it	ls
 8006df6:	3220      	addls	r2, #32
 8006df8:	42a2      	cmp	r2, r4
 8006dfa:	d0f0      	beq.n	8006dde <__match+0x6>
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	e7f3      	b.n	8006de8 <__match+0x10>

08006e00 <__hexnan>:
 8006e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e04:	2500      	movs	r5, #0
 8006e06:	680b      	ldr	r3, [r1, #0]
 8006e08:	4682      	mov	sl, r0
 8006e0a:	115f      	asrs	r7, r3, #5
 8006e0c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006e10:	f013 031f 	ands.w	r3, r3, #31
 8006e14:	bf18      	it	ne
 8006e16:	3704      	addne	r7, #4
 8006e18:	1f3e      	subs	r6, r7, #4
 8006e1a:	4690      	mov	r8, r2
 8006e1c:	46b1      	mov	r9, r6
 8006e1e:	4634      	mov	r4, r6
 8006e20:	46ab      	mov	fp, r5
 8006e22:	b087      	sub	sp, #28
 8006e24:	6801      	ldr	r1, [r0, #0]
 8006e26:	9301      	str	r3, [sp, #4]
 8006e28:	f847 5c04 	str.w	r5, [r7, #-4]
 8006e2c:	9502      	str	r5, [sp, #8]
 8006e2e:	784a      	ldrb	r2, [r1, #1]
 8006e30:	1c4b      	adds	r3, r1, #1
 8006e32:	9303      	str	r3, [sp, #12]
 8006e34:	b342      	cbz	r2, 8006e88 <__hexnan+0x88>
 8006e36:	4610      	mov	r0, r2
 8006e38:	9105      	str	r1, [sp, #20]
 8006e3a:	9204      	str	r2, [sp, #16]
 8006e3c:	f7ff fd83 	bl	8006946 <__hexdig_fun>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	d143      	bne.n	8006ecc <__hexnan+0xcc>
 8006e44:	9a04      	ldr	r2, [sp, #16]
 8006e46:	9905      	ldr	r1, [sp, #20]
 8006e48:	2a20      	cmp	r2, #32
 8006e4a:	d818      	bhi.n	8006e7e <__hexnan+0x7e>
 8006e4c:	9b02      	ldr	r3, [sp, #8]
 8006e4e:	459b      	cmp	fp, r3
 8006e50:	dd13      	ble.n	8006e7a <__hexnan+0x7a>
 8006e52:	454c      	cmp	r4, r9
 8006e54:	d206      	bcs.n	8006e64 <__hexnan+0x64>
 8006e56:	2d07      	cmp	r5, #7
 8006e58:	dc04      	bgt.n	8006e64 <__hexnan+0x64>
 8006e5a:	462a      	mov	r2, r5
 8006e5c:	4649      	mov	r1, r9
 8006e5e:	4620      	mov	r0, r4
 8006e60:	f7ff ffa8 	bl	8006db4 <L_shift>
 8006e64:	4544      	cmp	r4, r8
 8006e66:	d944      	bls.n	8006ef2 <__hexnan+0xf2>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f1a4 0904 	sub.w	r9, r4, #4
 8006e6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006e72:	461d      	mov	r5, r3
 8006e74:	464c      	mov	r4, r9
 8006e76:	f8cd b008 	str.w	fp, [sp, #8]
 8006e7a:	9903      	ldr	r1, [sp, #12]
 8006e7c:	e7d7      	b.n	8006e2e <__hexnan+0x2e>
 8006e7e:	2a29      	cmp	r2, #41	; 0x29
 8006e80:	d14a      	bne.n	8006f18 <__hexnan+0x118>
 8006e82:	3102      	adds	r1, #2
 8006e84:	f8ca 1000 	str.w	r1, [sl]
 8006e88:	f1bb 0f00 	cmp.w	fp, #0
 8006e8c:	d044      	beq.n	8006f18 <__hexnan+0x118>
 8006e8e:	454c      	cmp	r4, r9
 8006e90:	d206      	bcs.n	8006ea0 <__hexnan+0xa0>
 8006e92:	2d07      	cmp	r5, #7
 8006e94:	dc04      	bgt.n	8006ea0 <__hexnan+0xa0>
 8006e96:	462a      	mov	r2, r5
 8006e98:	4649      	mov	r1, r9
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f7ff ff8a 	bl	8006db4 <L_shift>
 8006ea0:	4544      	cmp	r4, r8
 8006ea2:	d928      	bls.n	8006ef6 <__hexnan+0xf6>
 8006ea4:	4643      	mov	r3, r8
 8006ea6:	f854 2b04 	ldr.w	r2, [r4], #4
 8006eaa:	42a6      	cmp	r6, r4
 8006eac:	f843 2b04 	str.w	r2, [r3], #4
 8006eb0:	d2f9      	bcs.n	8006ea6 <__hexnan+0xa6>
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f843 2b04 	str.w	r2, [r3], #4
 8006eb8:	429e      	cmp	r6, r3
 8006eba:	d2fb      	bcs.n	8006eb4 <__hexnan+0xb4>
 8006ebc:	6833      	ldr	r3, [r6, #0]
 8006ebe:	b91b      	cbnz	r3, 8006ec8 <__hexnan+0xc8>
 8006ec0:	4546      	cmp	r6, r8
 8006ec2:	d127      	bne.n	8006f14 <__hexnan+0x114>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	6033      	str	r3, [r6, #0]
 8006ec8:	2005      	movs	r0, #5
 8006eca:	e026      	b.n	8006f1a <__hexnan+0x11a>
 8006ecc:	3501      	adds	r5, #1
 8006ece:	2d08      	cmp	r5, #8
 8006ed0:	f10b 0b01 	add.w	fp, fp, #1
 8006ed4:	dd06      	ble.n	8006ee4 <__hexnan+0xe4>
 8006ed6:	4544      	cmp	r4, r8
 8006ed8:	d9cf      	bls.n	8006e7a <__hexnan+0x7a>
 8006eda:	2300      	movs	r3, #0
 8006edc:	2501      	movs	r5, #1
 8006ede:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ee2:	3c04      	subs	r4, #4
 8006ee4:	6822      	ldr	r2, [r4, #0]
 8006ee6:	f000 000f 	and.w	r0, r0, #15
 8006eea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006eee:	6020      	str	r0, [r4, #0]
 8006ef0:	e7c3      	b.n	8006e7a <__hexnan+0x7a>
 8006ef2:	2508      	movs	r5, #8
 8006ef4:	e7c1      	b.n	8006e7a <__hexnan+0x7a>
 8006ef6:	9b01      	ldr	r3, [sp, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0df      	beq.n	8006ebc <__hexnan+0xbc>
 8006efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f00:	f1c3 0320 	rsb	r3, r3, #32
 8006f04:	fa22 f303 	lsr.w	r3, r2, r3
 8006f08:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006f0c:	401a      	ands	r2, r3
 8006f0e:	f847 2c04 	str.w	r2, [r7, #-4]
 8006f12:	e7d3      	b.n	8006ebc <__hexnan+0xbc>
 8006f14:	3e04      	subs	r6, #4
 8006f16:	e7d1      	b.n	8006ebc <__hexnan+0xbc>
 8006f18:	2004      	movs	r0, #4
 8006f1a:	b007      	add	sp, #28
 8006f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f20 <__localeconv_l>:
 8006f20:	30f0      	adds	r0, #240	; 0xf0
 8006f22:	4770      	bx	lr

08006f24 <__swhatbuf_r>:
 8006f24:	b570      	push	{r4, r5, r6, lr}
 8006f26:	460e      	mov	r6, r1
 8006f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f2c:	b096      	sub	sp, #88	; 0x58
 8006f2e:	2900      	cmp	r1, #0
 8006f30:	4614      	mov	r4, r2
 8006f32:	461d      	mov	r5, r3
 8006f34:	da07      	bge.n	8006f46 <__swhatbuf_r+0x22>
 8006f36:	2300      	movs	r3, #0
 8006f38:	602b      	str	r3, [r5, #0]
 8006f3a:	89b3      	ldrh	r3, [r6, #12]
 8006f3c:	061a      	lsls	r2, r3, #24
 8006f3e:	d410      	bmi.n	8006f62 <__swhatbuf_r+0x3e>
 8006f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f44:	e00e      	b.n	8006f64 <__swhatbuf_r+0x40>
 8006f46:	466a      	mov	r2, sp
 8006f48:	f000 fdae 	bl	8007aa8 <_fstat_r>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	dbf2      	blt.n	8006f36 <__swhatbuf_r+0x12>
 8006f50:	9a01      	ldr	r2, [sp, #4]
 8006f52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f5a:	425a      	negs	r2, r3
 8006f5c:	415a      	adcs	r2, r3
 8006f5e:	602a      	str	r2, [r5, #0]
 8006f60:	e7ee      	b.n	8006f40 <__swhatbuf_r+0x1c>
 8006f62:	2340      	movs	r3, #64	; 0x40
 8006f64:	2000      	movs	r0, #0
 8006f66:	6023      	str	r3, [r4, #0]
 8006f68:	b016      	add	sp, #88	; 0x58
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}

08006f6c <__smakebuf_r>:
 8006f6c:	898b      	ldrh	r3, [r1, #12]
 8006f6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f70:	079d      	lsls	r5, r3, #30
 8006f72:	4606      	mov	r6, r0
 8006f74:	460c      	mov	r4, r1
 8006f76:	d507      	bpl.n	8006f88 <__smakebuf_r+0x1c>
 8006f78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	6123      	str	r3, [r4, #16]
 8006f80:	2301      	movs	r3, #1
 8006f82:	6163      	str	r3, [r4, #20]
 8006f84:	b002      	add	sp, #8
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
 8006f88:	ab01      	add	r3, sp, #4
 8006f8a:	466a      	mov	r2, sp
 8006f8c:	f7ff ffca 	bl	8006f24 <__swhatbuf_r>
 8006f90:	9900      	ldr	r1, [sp, #0]
 8006f92:	4605      	mov	r5, r0
 8006f94:	4630      	mov	r0, r6
 8006f96:	f000 fc99 	bl	80078cc <_malloc_r>
 8006f9a:	b948      	cbnz	r0, 8006fb0 <__smakebuf_r+0x44>
 8006f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fa0:	059a      	lsls	r2, r3, #22
 8006fa2:	d4ef      	bmi.n	8006f84 <__smakebuf_r+0x18>
 8006fa4:	f023 0303 	bic.w	r3, r3, #3
 8006fa8:	f043 0302 	orr.w	r3, r3, #2
 8006fac:	81a3      	strh	r3, [r4, #12]
 8006fae:	e7e3      	b.n	8006f78 <__smakebuf_r+0xc>
 8006fb0:	4b0d      	ldr	r3, [pc, #52]	; (8006fe8 <__smakebuf_r+0x7c>)
 8006fb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fb4:	89a3      	ldrh	r3, [r4, #12]
 8006fb6:	6020      	str	r0, [r4, #0]
 8006fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fbc:	81a3      	strh	r3, [r4, #12]
 8006fbe:	9b00      	ldr	r3, [sp, #0]
 8006fc0:	6120      	str	r0, [r4, #16]
 8006fc2:	6163      	str	r3, [r4, #20]
 8006fc4:	9b01      	ldr	r3, [sp, #4]
 8006fc6:	b15b      	cbz	r3, 8006fe0 <__smakebuf_r+0x74>
 8006fc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fcc:	4630      	mov	r0, r6
 8006fce:	f000 fd7d 	bl	8007acc <_isatty_r>
 8006fd2:	b128      	cbz	r0, 8006fe0 <__smakebuf_r+0x74>
 8006fd4:	89a3      	ldrh	r3, [r4, #12]
 8006fd6:	f023 0303 	bic.w	r3, r3, #3
 8006fda:	f043 0301 	orr.w	r3, r3, #1
 8006fde:	81a3      	strh	r3, [r4, #12]
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	431d      	orrs	r5, r3
 8006fe4:	81a5      	strh	r5, [r4, #12]
 8006fe6:	e7cd      	b.n	8006f84 <__smakebuf_r+0x18>
 8006fe8:	08006785 	.word	0x08006785

08006fec <__ascii_mbtowc>:
 8006fec:	b082      	sub	sp, #8
 8006fee:	b901      	cbnz	r1, 8006ff2 <__ascii_mbtowc+0x6>
 8006ff0:	a901      	add	r1, sp, #4
 8006ff2:	b142      	cbz	r2, 8007006 <__ascii_mbtowc+0x1a>
 8006ff4:	b14b      	cbz	r3, 800700a <__ascii_mbtowc+0x1e>
 8006ff6:	7813      	ldrb	r3, [r2, #0]
 8006ff8:	600b      	str	r3, [r1, #0]
 8006ffa:	7812      	ldrb	r2, [r2, #0]
 8006ffc:	1c10      	adds	r0, r2, #0
 8006ffe:	bf18      	it	ne
 8007000:	2001      	movne	r0, #1
 8007002:	b002      	add	sp, #8
 8007004:	4770      	bx	lr
 8007006:	4610      	mov	r0, r2
 8007008:	e7fb      	b.n	8007002 <__ascii_mbtowc+0x16>
 800700a:	f06f 0001 	mvn.w	r0, #1
 800700e:	e7f8      	b.n	8007002 <__ascii_mbtowc+0x16>

08007010 <memcpy>:
 8007010:	b510      	push	{r4, lr}
 8007012:	1e43      	subs	r3, r0, #1
 8007014:	440a      	add	r2, r1
 8007016:	4291      	cmp	r1, r2
 8007018:	d100      	bne.n	800701c <memcpy+0xc>
 800701a:	bd10      	pop	{r4, pc}
 800701c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007020:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007024:	e7f7      	b.n	8007016 <memcpy+0x6>

08007026 <_Balloc>:
 8007026:	b570      	push	{r4, r5, r6, lr}
 8007028:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800702a:	4604      	mov	r4, r0
 800702c:	460e      	mov	r6, r1
 800702e:	b93d      	cbnz	r5, 8007040 <_Balloc+0x1a>
 8007030:	2010      	movs	r0, #16
 8007032:	f000 fd6d 	bl	8007b10 <malloc>
 8007036:	6260      	str	r0, [r4, #36]	; 0x24
 8007038:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800703c:	6005      	str	r5, [r0, #0]
 800703e:	60c5      	str	r5, [r0, #12]
 8007040:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007042:	68eb      	ldr	r3, [r5, #12]
 8007044:	b183      	cbz	r3, 8007068 <_Balloc+0x42>
 8007046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800704e:	b9b8      	cbnz	r0, 8007080 <_Balloc+0x5a>
 8007050:	2101      	movs	r1, #1
 8007052:	fa01 f506 	lsl.w	r5, r1, r6
 8007056:	1d6a      	adds	r2, r5, #5
 8007058:	0092      	lsls	r2, r2, #2
 800705a:	4620      	mov	r0, r4
 800705c:	f000 fbdc 	bl	8007818 <_calloc_r>
 8007060:	b160      	cbz	r0, 800707c <_Balloc+0x56>
 8007062:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007066:	e00e      	b.n	8007086 <_Balloc+0x60>
 8007068:	2221      	movs	r2, #33	; 0x21
 800706a:	2104      	movs	r1, #4
 800706c:	4620      	mov	r0, r4
 800706e:	f000 fbd3 	bl	8007818 <_calloc_r>
 8007072:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007074:	60e8      	str	r0, [r5, #12]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1e4      	bne.n	8007046 <_Balloc+0x20>
 800707c:	2000      	movs	r0, #0
 800707e:	bd70      	pop	{r4, r5, r6, pc}
 8007080:	6802      	ldr	r2, [r0, #0]
 8007082:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007086:	2300      	movs	r3, #0
 8007088:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800708c:	e7f7      	b.n	800707e <_Balloc+0x58>

0800708e <_Bfree>:
 800708e:	b570      	push	{r4, r5, r6, lr}
 8007090:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007092:	4606      	mov	r6, r0
 8007094:	460d      	mov	r5, r1
 8007096:	b93c      	cbnz	r4, 80070a8 <_Bfree+0x1a>
 8007098:	2010      	movs	r0, #16
 800709a:	f000 fd39 	bl	8007b10 <malloc>
 800709e:	6270      	str	r0, [r6, #36]	; 0x24
 80070a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070a4:	6004      	str	r4, [r0, #0]
 80070a6:	60c4      	str	r4, [r0, #12]
 80070a8:	b13d      	cbz	r5, 80070ba <_Bfree+0x2c>
 80070aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80070ac:	686a      	ldr	r2, [r5, #4]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070b4:	6029      	str	r1, [r5, #0]
 80070b6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80070ba:	bd70      	pop	{r4, r5, r6, pc}

080070bc <__multadd>:
 80070bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c0:	461f      	mov	r7, r3
 80070c2:	4606      	mov	r6, r0
 80070c4:	460c      	mov	r4, r1
 80070c6:	2300      	movs	r3, #0
 80070c8:	690d      	ldr	r5, [r1, #16]
 80070ca:	f101 0c14 	add.w	ip, r1, #20
 80070ce:	f8dc 0000 	ldr.w	r0, [ip]
 80070d2:	3301      	adds	r3, #1
 80070d4:	b281      	uxth	r1, r0
 80070d6:	fb02 7101 	mla	r1, r2, r1, r7
 80070da:	0c00      	lsrs	r0, r0, #16
 80070dc:	0c0f      	lsrs	r7, r1, #16
 80070de:	fb02 7000 	mla	r0, r2, r0, r7
 80070e2:	b289      	uxth	r1, r1
 80070e4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80070e8:	429d      	cmp	r5, r3
 80070ea:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80070ee:	f84c 1b04 	str.w	r1, [ip], #4
 80070f2:	dcec      	bgt.n	80070ce <__multadd+0x12>
 80070f4:	b1d7      	cbz	r7, 800712c <__multadd+0x70>
 80070f6:	68a3      	ldr	r3, [r4, #8]
 80070f8:	42ab      	cmp	r3, r5
 80070fa:	dc12      	bgt.n	8007122 <__multadd+0x66>
 80070fc:	6861      	ldr	r1, [r4, #4]
 80070fe:	4630      	mov	r0, r6
 8007100:	3101      	adds	r1, #1
 8007102:	f7ff ff90 	bl	8007026 <_Balloc>
 8007106:	4680      	mov	r8, r0
 8007108:	6922      	ldr	r2, [r4, #16]
 800710a:	f104 010c 	add.w	r1, r4, #12
 800710e:	3202      	adds	r2, #2
 8007110:	0092      	lsls	r2, r2, #2
 8007112:	300c      	adds	r0, #12
 8007114:	f7ff ff7c 	bl	8007010 <memcpy>
 8007118:	4621      	mov	r1, r4
 800711a:	4630      	mov	r0, r6
 800711c:	f7ff ffb7 	bl	800708e <_Bfree>
 8007120:	4644      	mov	r4, r8
 8007122:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007126:	3501      	adds	r5, #1
 8007128:	615f      	str	r7, [r3, #20]
 800712a:	6125      	str	r5, [r4, #16]
 800712c:	4620      	mov	r0, r4
 800712e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007132 <__s2b>:
 8007132:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007136:	4615      	mov	r5, r2
 8007138:	2209      	movs	r2, #9
 800713a:	461f      	mov	r7, r3
 800713c:	3308      	adds	r3, #8
 800713e:	460c      	mov	r4, r1
 8007140:	fb93 f3f2 	sdiv	r3, r3, r2
 8007144:	4606      	mov	r6, r0
 8007146:	2201      	movs	r2, #1
 8007148:	2100      	movs	r1, #0
 800714a:	429a      	cmp	r2, r3
 800714c:	db20      	blt.n	8007190 <__s2b+0x5e>
 800714e:	4630      	mov	r0, r6
 8007150:	f7ff ff69 	bl	8007026 <_Balloc>
 8007154:	9b08      	ldr	r3, [sp, #32]
 8007156:	2d09      	cmp	r5, #9
 8007158:	6143      	str	r3, [r0, #20]
 800715a:	f04f 0301 	mov.w	r3, #1
 800715e:	6103      	str	r3, [r0, #16]
 8007160:	dd19      	ble.n	8007196 <__s2b+0x64>
 8007162:	f104 0809 	add.w	r8, r4, #9
 8007166:	46c1      	mov	r9, r8
 8007168:	442c      	add	r4, r5
 800716a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800716e:	4601      	mov	r1, r0
 8007170:	3b30      	subs	r3, #48	; 0x30
 8007172:	220a      	movs	r2, #10
 8007174:	4630      	mov	r0, r6
 8007176:	f7ff ffa1 	bl	80070bc <__multadd>
 800717a:	45a1      	cmp	r9, r4
 800717c:	d1f5      	bne.n	800716a <__s2b+0x38>
 800717e:	eb08 0405 	add.w	r4, r8, r5
 8007182:	3c08      	subs	r4, #8
 8007184:	1b2d      	subs	r5, r5, r4
 8007186:	1963      	adds	r3, r4, r5
 8007188:	42bb      	cmp	r3, r7
 800718a:	db07      	blt.n	800719c <__s2b+0x6a>
 800718c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007190:	0052      	lsls	r2, r2, #1
 8007192:	3101      	adds	r1, #1
 8007194:	e7d9      	b.n	800714a <__s2b+0x18>
 8007196:	340a      	adds	r4, #10
 8007198:	2509      	movs	r5, #9
 800719a:	e7f3      	b.n	8007184 <__s2b+0x52>
 800719c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80071a0:	4601      	mov	r1, r0
 80071a2:	3b30      	subs	r3, #48	; 0x30
 80071a4:	220a      	movs	r2, #10
 80071a6:	4630      	mov	r0, r6
 80071a8:	f7ff ff88 	bl	80070bc <__multadd>
 80071ac:	e7eb      	b.n	8007186 <__s2b+0x54>

080071ae <__hi0bits>:
 80071ae:	0c02      	lsrs	r2, r0, #16
 80071b0:	0412      	lsls	r2, r2, #16
 80071b2:	4603      	mov	r3, r0
 80071b4:	b9b2      	cbnz	r2, 80071e4 <__hi0bits+0x36>
 80071b6:	0403      	lsls	r3, r0, #16
 80071b8:	2010      	movs	r0, #16
 80071ba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80071be:	bf04      	itt	eq
 80071c0:	021b      	lsleq	r3, r3, #8
 80071c2:	3008      	addeq	r0, #8
 80071c4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80071c8:	bf04      	itt	eq
 80071ca:	011b      	lsleq	r3, r3, #4
 80071cc:	3004      	addeq	r0, #4
 80071ce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80071d2:	bf04      	itt	eq
 80071d4:	009b      	lsleq	r3, r3, #2
 80071d6:	3002      	addeq	r0, #2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	db06      	blt.n	80071ea <__hi0bits+0x3c>
 80071dc:	005b      	lsls	r3, r3, #1
 80071de:	d503      	bpl.n	80071e8 <__hi0bits+0x3a>
 80071e0:	3001      	adds	r0, #1
 80071e2:	4770      	bx	lr
 80071e4:	2000      	movs	r0, #0
 80071e6:	e7e8      	b.n	80071ba <__hi0bits+0xc>
 80071e8:	2020      	movs	r0, #32
 80071ea:	4770      	bx	lr

080071ec <__lo0bits>:
 80071ec:	6803      	ldr	r3, [r0, #0]
 80071ee:	4601      	mov	r1, r0
 80071f0:	f013 0207 	ands.w	r2, r3, #7
 80071f4:	d00b      	beq.n	800720e <__lo0bits+0x22>
 80071f6:	07da      	lsls	r2, r3, #31
 80071f8:	d423      	bmi.n	8007242 <__lo0bits+0x56>
 80071fa:	0798      	lsls	r0, r3, #30
 80071fc:	bf49      	itett	mi
 80071fe:	085b      	lsrmi	r3, r3, #1
 8007200:	089b      	lsrpl	r3, r3, #2
 8007202:	2001      	movmi	r0, #1
 8007204:	600b      	strmi	r3, [r1, #0]
 8007206:	bf5c      	itt	pl
 8007208:	600b      	strpl	r3, [r1, #0]
 800720a:	2002      	movpl	r0, #2
 800720c:	4770      	bx	lr
 800720e:	b298      	uxth	r0, r3
 8007210:	b9a8      	cbnz	r0, 800723e <__lo0bits+0x52>
 8007212:	2010      	movs	r0, #16
 8007214:	0c1b      	lsrs	r3, r3, #16
 8007216:	f013 0fff 	tst.w	r3, #255	; 0xff
 800721a:	bf04      	itt	eq
 800721c:	0a1b      	lsreq	r3, r3, #8
 800721e:	3008      	addeq	r0, #8
 8007220:	071a      	lsls	r2, r3, #28
 8007222:	bf04      	itt	eq
 8007224:	091b      	lsreq	r3, r3, #4
 8007226:	3004      	addeq	r0, #4
 8007228:	079a      	lsls	r2, r3, #30
 800722a:	bf04      	itt	eq
 800722c:	089b      	lsreq	r3, r3, #2
 800722e:	3002      	addeq	r0, #2
 8007230:	07da      	lsls	r2, r3, #31
 8007232:	d402      	bmi.n	800723a <__lo0bits+0x4e>
 8007234:	085b      	lsrs	r3, r3, #1
 8007236:	d006      	beq.n	8007246 <__lo0bits+0x5a>
 8007238:	3001      	adds	r0, #1
 800723a:	600b      	str	r3, [r1, #0]
 800723c:	4770      	bx	lr
 800723e:	4610      	mov	r0, r2
 8007240:	e7e9      	b.n	8007216 <__lo0bits+0x2a>
 8007242:	2000      	movs	r0, #0
 8007244:	4770      	bx	lr
 8007246:	2020      	movs	r0, #32
 8007248:	4770      	bx	lr

0800724a <__i2b>:
 800724a:	b510      	push	{r4, lr}
 800724c:	460c      	mov	r4, r1
 800724e:	2101      	movs	r1, #1
 8007250:	f7ff fee9 	bl	8007026 <_Balloc>
 8007254:	2201      	movs	r2, #1
 8007256:	6144      	str	r4, [r0, #20]
 8007258:	6102      	str	r2, [r0, #16]
 800725a:	bd10      	pop	{r4, pc}

0800725c <__multiply>:
 800725c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007260:	4614      	mov	r4, r2
 8007262:	690a      	ldr	r2, [r1, #16]
 8007264:	6923      	ldr	r3, [r4, #16]
 8007266:	4688      	mov	r8, r1
 8007268:	429a      	cmp	r2, r3
 800726a:	bfbe      	ittt	lt
 800726c:	460b      	movlt	r3, r1
 800726e:	46a0      	movlt	r8, r4
 8007270:	461c      	movlt	r4, r3
 8007272:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007276:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800727a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800727e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007282:	eb07 0609 	add.w	r6, r7, r9
 8007286:	42b3      	cmp	r3, r6
 8007288:	bfb8      	it	lt
 800728a:	3101      	addlt	r1, #1
 800728c:	f7ff fecb 	bl	8007026 <_Balloc>
 8007290:	f100 0514 	add.w	r5, r0, #20
 8007294:	462b      	mov	r3, r5
 8007296:	2200      	movs	r2, #0
 8007298:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800729c:	4573      	cmp	r3, lr
 800729e:	d316      	bcc.n	80072ce <__multiply+0x72>
 80072a0:	f104 0214 	add.w	r2, r4, #20
 80072a4:	f108 0114 	add.w	r1, r8, #20
 80072a8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80072ac:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	9b00      	ldr	r3, [sp, #0]
 80072b4:	9201      	str	r2, [sp, #4]
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d80c      	bhi.n	80072d4 <__multiply+0x78>
 80072ba:	2e00      	cmp	r6, #0
 80072bc:	dd03      	ble.n	80072c6 <__multiply+0x6a>
 80072be:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d05d      	beq.n	8007382 <__multiply+0x126>
 80072c6:	6106      	str	r6, [r0, #16]
 80072c8:	b003      	add	sp, #12
 80072ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ce:	f843 2b04 	str.w	r2, [r3], #4
 80072d2:	e7e3      	b.n	800729c <__multiply+0x40>
 80072d4:	f8b2 b000 	ldrh.w	fp, [r2]
 80072d8:	f1bb 0f00 	cmp.w	fp, #0
 80072dc:	d023      	beq.n	8007326 <__multiply+0xca>
 80072de:	4689      	mov	r9, r1
 80072e0:	46ac      	mov	ip, r5
 80072e2:	f04f 0800 	mov.w	r8, #0
 80072e6:	f859 4b04 	ldr.w	r4, [r9], #4
 80072ea:	f8dc a000 	ldr.w	sl, [ip]
 80072ee:	b2a3      	uxth	r3, r4
 80072f0:	fa1f fa8a 	uxth.w	sl, sl
 80072f4:	fb0b a303 	mla	r3, fp, r3, sl
 80072f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80072fc:	f8dc 4000 	ldr.w	r4, [ip]
 8007300:	4443      	add	r3, r8
 8007302:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007306:	fb0b 840a 	mla	r4, fp, sl, r8
 800730a:	46e2      	mov	sl, ip
 800730c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007310:	b29b      	uxth	r3, r3
 8007312:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007316:	454f      	cmp	r7, r9
 8007318:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800731c:	f84a 3b04 	str.w	r3, [sl], #4
 8007320:	d82b      	bhi.n	800737a <__multiply+0x11e>
 8007322:	f8cc 8004 	str.w	r8, [ip, #4]
 8007326:	9b01      	ldr	r3, [sp, #4]
 8007328:	3204      	adds	r2, #4
 800732a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800732e:	f1ba 0f00 	cmp.w	sl, #0
 8007332:	d020      	beq.n	8007376 <__multiply+0x11a>
 8007334:	4689      	mov	r9, r1
 8007336:	46a8      	mov	r8, r5
 8007338:	f04f 0b00 	mov.w	fp, #0
 800733c:	682b      	ldr	r3, [r5, #0]
 800733e:	f8b9 c000 	ldrh.w	ip, [r9]
 8007342:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007346:	b29b      	uxth	r3, r3
 8007348:	fb0a 440c 	mla	r4, sl, ip, r4
 800734c:	46c4      	mov	ip, r8
 800734e:	445c      	add	r4, fp
 8007350:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007354:	f84c 3b04 	str.w	r3, [ip], #4
 8007358:	f859 3b04 	ldr.w	r3, [r9], #4
 800735c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007360:	0c1b      	lsrs	r3, r3, #16
 8007362:	fb0a b303 	mla	r3, sl, r3, fp
 8007366:	454f      	cmp	r7, r9
 8007368:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800736c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007370:	d805      	bhi.n	800737e <__multiply+0x122>
 8007372:	f8c8 3004 	str.w	r3, [r8, #4]
 8007376:	3504      	adds	r5, #4
 8007378:	e79b      	b.n	80072b2 <__multiply+0x56>
 800737a:	46d4      	mov	ip, sl
 800737c:	e7b3      	b.n	80072e6 <__multiply+0x8a>
 800737e:	46e0      	mov	r8, ip
 8007380:	e7dd      	b.n	800733e <__multiply+0xe2>
 8007382:	3e01      	subs	r6, #1
 8007384:	e799      	b.n	80072ba <__multiply+0x5e>
	...

08007388 <__pow5mult>:
 8007388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800738c:	4615      	mov	r5, r2
 800738e:	f012 0203 	ands.w	r2, r2, #3
 8007392:	4606      	mov	r6, r0
 8007394:	460f      	mov	r7, r1
 8007396:	d007      	beq.n	80073a8 <__pow5mult+0x20>
 8007398:	4c21      	ldr	r4, [pc, #132]	; (8007420 <__pow5mult+0x98>)
 800739a:	3a01      	subs	r2, #1
 800739c:	2300      	movs	r3, #0
 800739e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073a2:	f7ff fe8b 	bl	80070bc <__multadd>
 80073a6:	4607      	mov	r7, r0
 80073a8:	10ad      	asrs	r5, r5, #2
 80073aa:	d035      	beq.n	8007418 <__pow5mult+0x90>
 80073ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80073ae:	b93c      	cbnz	r4, 80073c0 <__pow5mult+0x38>
 80073b0:	2010      	movs	r0, #16
 80073b2:	f000 fbad 	bl	8007b10 <malloc>
 80073b6:	6270      	str	r0, [r6, #36]	; 0x24
 80073b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073bc:	6004      	str	r4, [r0, #0]
 80073be:	60c4      	str	r4, [r0, #12]
 80073c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80073c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073c8:	b94c      	cbnz	r4, 80073de <__pow5mult+0x56>
 80073ca:	f240 2171 	movw	r1, #625	; 0x271
 80073ce:	4630      	mov	r0, r6
 80073d0:	f7ff ff3b 	bl	800724a <__i2b>
 80073d4:	2300      	movs	r3, #0
 80073d6:	4604      	mov	r4, r0
 80073d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80073dc:	6003      	str	r3, [r0, #0]
 80073de:	f04f 0800 	mov.w	r8, #0
 80073e2:	07eb      	lsls	r3, r5, #31
 80073e4:	d50a      	bpl.n	80073fc <__pow5mult+0x74>
 80073e6:	4639      	mov	r1, r7
 80073e8:	4622      	mov	r2, r4
 80073ea:	4630      	mov	r0, r6
 80073ec:	f7ff ff36 	bl	800725c <__multiply>
 80073f0:	4681      	mov	r9, r0
 80073f2:	4639      	mov	r1, r7
 80073f4:	4630      	mov	r0, r6
 80073f6:	f7ff fe4a 	bl	800708e <_Bfree>
 80073fa:	464f      	mov	r7, r9
 80073fc:	106d      	asrs	r5, r5, #1
 80073fe:	d00b      	beq.n	8007418 <__pow5mult+0x90>
 8007400:	6820      	ldr	r0, [r4, #0]
 8007402:	b938      	cbnz	r0, 8007414 <__pow5mult+0x8c>
 8007404:	4622      	mov	r2, r4
 8007406:	4621      	mov	r1, r4
 8007408:	4630      	mov	r0, r6
 800740a:	f7ff ff27 	bl	800725c <__multiply>
 800740e:	6020      	str	r0, [r4, #0]
 8007410:	f8c0 8000 	str.w	r8, [r0]
 8007414:	4604      	mov	r4, r0
 8007416:	e7e4      	b.n	80073e2 <__pow5mult+0x5a>
 8007418:	4638      	mov	r0, r7
 800741a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800741e:	bf00      	nop
 8007420:	08007d80 	.word	0x08007d80

08007424 <__lshift>:
 8007424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007428:	460c      	mov	r4, r1
 800742a:	4607      	mov	r7, r0
 800742c:	4616      	mov	r6, r2
 800742e:	6923      	ldr	r3, [r4, #16]
 8007430:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007434:	eb0a 0903 	add.w	r9, sl, r3
 8007438:	6849      	ldr	r1, [r1, #4]
 800743a:	68a3      	ldr	r3, [r4, #8]
 800743c:	f109 0501 	add.w	r5, r9, #1
 8007440:	42ab      	cmp	r3, r5
 8007442:	db32      	blt.n	80074aa <__lshift+0x86>
 8007444:	4638      	mov	r0, r7
 8007446:	f7ff fdee 	bl	8007026 <_Balloc>
 800744a:	2300      	movs	r3, #0
 800744c:	4680      	mov	r8, r0
 800744e:	461a      	mov	r2, r3
 8007450:	f100 0114 	add.w	r1, r0, #20
 8007454:	4553      	cmp	r3, sl
 8007456:	db2b      	blt.n	80074b0 <__lshift+0x8c>
 8007458:	6920      	ldr	r0, [r4, #16]
 800745a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800745e:	f104 0314 	add.w	r3, r4, #20
 8007462:	f016 021f 	ands.w	r2, r6, #31
 8007466:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800746a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800746e:	d025      	beq.n	80074bc <__lshift+0x98>
 8007470:	2000      	movs	r0, #0
 8007472:	f1c2 0e20 	rsb	lr, r2, #32
 8007476:	468a      	mov	sl, r1
 8007478:	681e      	ldr	r6, [r3, #0]
 800747a:	4096      	lsls	r6, r2
 800747c:	4330      	orrs	r0, r6
 800747e:	f84a 0b04 	str.w	r0, [sl], #4
 8007482:	f853 0b04 	ldr.w	r0, [r3], #4
 8007486:	459c      	cmp	ip, r3
 8007488:	fa20 f00e 	lsr.w	r0, r0, lr
 800748c:	d814      	bhi.n	80074b8 <__lshift+0x94>
 800748e:	6048      	str	r0, [r1, #4]
 8007490:	b108      	cbz	r0, 8007496 <__lshift+0x72>
 8007492:	f109 0502 	add.w	r5, r9, #2
 8007496:	3d01      	subs	r5, #1
 8007498:	4638      	mov	r0, r7
 800749a:	f8c8 5010 	str.w	r5, [r8, #16]
 800749e:	4621      	mov	r1, r4
 80074a0:	f7ff fdf5 	bl	800708e <_Bfree>
 80074a4:	4640      	mov	r0, r8
 80074a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074aa:	3101      	adds	r1, #1
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	e7c7      	b.n	8007440 <__lshift+0x1c>
 80074b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80074b4:	3301      	adds	r3, #1
 80074b6:	e7cd      	b.n	8007454 <__lshift+0x30>
 80074b8:	4651      	mov	r1, sl
 80074ba:	e7dc      	b.n	8007476 <__lshift+0x52>
 80074bc:	3904      	subs	r1, #4
 80074be:	f853 2b04 	ldr.w	r2, [r3], #4
 80074c2:	459c      	cmp	ip, r3
 80074c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80074c8:	d8f9      	bhi.n	80074be <__lshift+0x9a>
 80074ca:	e7e4      	b.n	8007496 <__lshift+0x72>

080074cc <__mcmp>:
 80074cc:	6903      	ldr	r3, [r0, #16]
 80074ce:	690a      	ldr	r2, [r1, #16]
 80074d0:	b530      	push	{r4, r5, lr}
 80074d2:	1a9b      	subs	r3, r3, r2
 80074d4:	d10c      	bne.n	80074f0 <__mcmp+0x24>
 80074d6:	0092      	lsls	r2, r2, #2
 80074d8:	3014      	adds	r0, #20
 80074da:	3114      	adds	r1, #20
 80074dc:	1884      	adds	r4, r0, r2
 80074de:	4411      	add	r1, r2
 80074e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80074e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80074e8:	4295      	cmp	r5, r2
 80074ea:	d003      	beq.n	80074f4 <__mcmp+0x28>
 80074ec:	d305      	bcc.n	80074fa <__mcmp+0x2e>
 80074ee:	2301      	movs	r3, #1
 80074f0:	4618      	mov	r0, r3
 80074f2:	bd30      	pop	{r4, r5, pc}
 80074f4:	42a0      	cmp	r0, r4
 80074f6:	d3f3      	bcc.n	80074e0 <__mcmp+0x14>
 80074f8:	e7fa      	b.n	80074f0 <__mcmp+0x24>
 80074fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074fe:	e7f7      	b.n	80074f0 <__mcmp+0x24>

08007500 <__mdiff>:
 8007500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007504:	460d      	mov	r5, r1
 8007506:	4607      	mov	r7, r0
 8007508:	4611      	mov	r1, r2
 800750a:	4628      	mov	r0, r5
 800750c:	4614      	mov	r4, r2
 800750e:	f7ff ffdd 	bl	80074cc <__mcmp>
 8007512:	1e06      	subs	r6, r0, #0
 8007514:	d108      	bne.n	8007528 <__mdiff+0x28>
 8007516:	4631      	mov	r1, r6
 8007518:	4638      	mov	r0, r7
 800751a:	f7ff fd84 	bl	8007026 <_Balloc>
 800751e:	2301      	movs	r3, #1
 8007520:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007528:	bfa4      	itt	ge
 800752a:	4623      	movge	r3, r4
 800752c:	462c      	movge	r4, r5
 800752e:	4638      	mov	r0, r7
 8007530:	6861      	ldr	r1, [r4, #4]
 8007532:	bfa6      	itte	ge
 8007534:	461d      	movge	r5, r3
 8007536:	2600      	movge	r6, #0
 8007538:	2601      	movlt	r6, #1
 800753a:	f7ff fd74 	bl	8007026 <_Balloc>
 800753e:	f04f 0e00 	mov.w	lr, #0
 8007542:	60c6      	str	r6, [r0, #12]
 8007544:	692b      	ldr	r3, [r5, #16]
 8007546:	6926      	ldr	r6, [r4, #16]
 8007548:	f104 0214 	add.w	r2, r4, #20
 800754c:	f105 0914 	add.w	r9, r5, #20
 8007550:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007554:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007558:	f100 0114 	add.w	r1, r0, #20
 800755c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007560:	f859 5b04 	ldr.w	r5, [r9], #4
 8007564:	fa1f f38a 	uxth.w	r3, sl
 8007568:	4473      	add	r3, lr
 800756a:	b2ac      	uxth	r4, r5
 800756c:	1b1b      	subs	r3, r3, r4
 800756e:	0c2c      	lsrs	r4, r5, #16
 8007570:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007574:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007578:	b29b      	uxth	r3, r3
 800757a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800757e:	45c8      	cmp	r8, r9
 8007580:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007584:	4694      	mov	ip, r2
 8007586:	f841 4b04 	str.w	r4, [r1], #4
 800758a:	d8e7      	bhi.n	800755c <__mdiff+0x5c>
 800758c:	45bc      	cmp	ip, r7
 800758e:	d304      	bcc.n	800759a <__mdiff+0x9a>
 8007590:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007594:	b183      	cbz	r3, 80075b8 <__mdiff+0xb8>
 8007596:	6106      	str	r6, [r0, #16]
 8007598:	e7c4      	b.n	8007524 <__mdiff+0x24>
 800759a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800759e:	b2a2      	uxth	r2, r4
 80075a0:	4472      	add	r2, lr
 80075a2:	1413      	asrs	r3, r2, #16
 80075a4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80075a8:	b292      	uxth	r2, r2
 80075aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80075ae:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80075b2:	f841 2b04 	str.w	r2, [r1], #4
 80075b6:	e7e9      	b.n	800758c <__mdiff+0x8c>
 80075b8:	3e01      	subs	r6, #1
 80075ba:	e7e9      	b.n	8007590 <__mdiff+0x90>

080075bc <__ulp>:
 80075bc:	4b10      	ldr	r3, [pc, #64]	; (8007600 <__ulp+0x44>)
 80075be:	400b      	ands	r3, r1
 80075c0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	dd02      	ble.n	80075ce <__ulp+0x12>
 80075c8:	2000      	movs	r0, #0
 80075ca:	4619      	mov	r1, r3
 80075cc:	4770      	bx	lr
 80075ce:	425b      	negs	r3, r3
 80075d0:	151b      	asrs	r3, r3, #20
 80075d2:	2b13      	cmp	r3, #19
 80075d4:	f04f 0000 	mov.w	r0, #0
 80075d8:	f04f 0100 	mov.w	r1, #0
 80075dc:	dc04      	bgt.n	80075e8 <__ulp+0x2c>
 80075de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80075e2:	fa42 f103 	asr.w	r1, r2, r3
 80075e6:	4770      	bx	lr
 80075e8:	2201      	movs	r2, #1
 80075ea:	3b14      	subs	r3, #20
 80075ec:	2b1e      	cmp	r3, #30
 80075ee:	bfce      	itee	gt
 80075f0:	4613      	movgt	r3, r2
 80075f2:	f1c3 031f 	rsble	r3, r3, #31
 80075f6:	fa02 f303 	lslle.w	r3, r2, r3
 80075fa:	4618      	mov	r0, r3
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	7ff00000 	.word	0x7ff00000

08007604 <__b2d>:
 8007604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007608:	6907      	ldr	r7, [r0, #16]
 800760a:	f100 0914 	add.w	r9, r0, #20
 800760e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007612:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007616:	f1a7 0804 	sub.w	r8, r7, #4
 800761a:	4630      	mov	r0, r6
 800761c:	f7ff fdc7 	bl	80071ae <__hi0bits>
 8007620:	f1c0 0320 	rsb	r3, r0, #32
 8007624:	280a      	cmp	r0, #10
 8007626:	600b      	str	r3, [r1, #0]
 8007628:	491e      	ldr	r1, [pc, #120]	; (80076a4 <__b2d+0xa0>)
 800762a:	dc17      	bgt.n	800765c <__b2d+0x58>
 800762c:	45c1      	cmp	r9, r8
 800762e:	bf28      	it	cs
 8007630:	2200      	movcs	r2, #0
 8007632:	f1c0 0c0b 	rsb	ip, r0, #11
 8007636:	fa26 f30c 	lsr.w	r3, r6, ip
 800763a:	bf38      	it	cc
 800763c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007640:	ea43 0501 	orr.w	r5, r3, r1
 8007644:	f100 0315 	add.w	r3, r0, #21
 8007648:	fa06 f303 	lsl.w	r3, r6, r3
 800764c:	fa22 f20c 	lsr.w	r2, r2, ip
 8007650:	ea43 0402 	orr.w	r4, r3, r2
 8007654:	4620      	mov	r0, r4
 8007656:	4629      	mov	r1, r5
 8007658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800765c:	45c1      	cmp	r9, r8
 800765e:	bf3a      	itte	cc
 8007660:	f1a7 0808 	subcc.w	r8, r7, #8
 8007664:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007668:	2200      	movcs	r2, #0
 800766a:	f1b0 030b 	subs.w	r3, r0, #11
 800766e:	d015      	beq.n	800769c <__b2d+0x98>
 8007670:	409e      	lsls	r6, r3
 8007672:	f1c3 0720 	rsb	r7, r3, #32
 8007676:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800767a:	fa22 f107 	lsr.w	r1, r2, r7
 800767e:	45c8      	cmp	r8, r9
 8007680:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007684:	ea46 0501 	orr.w	r5, r6, r1
 8007688:	bf94      	ite	ls
 800768a:	2100      	movls	r1, #0
 800768c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007690:	fa02 f003 	lsl.w	r0, r2, r3
 8007694:	40f9      	lsrs	r1, r7
 8007696:	ea40 0401 	orr.w	r4, r0, r1
 800769a:	e7db      	b.n	8007654 <__b2d+0x50>
 800769c:	ea46 0501 	orr.w	r5, r6, r1
 80076a0:	4614      	mov	r4, r2
 80076a2:	e7d7      	b.n	8007654 <__b2d+0x50>
 80076a4:	3ff00000 	.word	0x3ff00000

080076a8 <__d2b>:
 80076a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80076ac:	461c      	mov	r4, r3
 80076ae:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80076b2:	2101      	movs	r1, #1
 80076b4:	4690      	mov	r8, r2
 80076b6:	f7ff fcb6 	bl	8007026 <_Balloc>
 80076ba:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80076be:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80076c2:	4607      	mov	r7, r0
 80076c4:	bb34      	cbnz	r4, 8007714 <__d2b+0x6c>
 80076c6:	9201      	str	r2, [sp, #4]
 80076c8:	f1b8 0200 	subs.w	r2, r8, #0
 80076cc:	d027      	beq.n	800771e <__d2b+0x76>
 80076ce:	a802      	add	r0, sp, #8
 80076d0:	f840 2d08 	str.w	r2, [r0, #-8]!
 80076d4:	f7ff fd8a 	bl	80071ec <__lo0bits>
 80076d8:	9900      	ldr	r1, [sp, #0]
 80076da:	b1f0      	cbz	r0, 800771a <__d2b+0x72>
 80076dc:	9a01      	ldr	r2, [sp, #4]
 80076de:	f1c0 0320 	rsb	r3, r0, #32
 80076e2:	fa02 f303 	lsl.w	r3, r2, r3
 80076e6:	430b      	orrs	r3, r1
 80076e8:	40c2      	lsrs	r2, r0
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	9201      	str	r2, [sp, #4]
 80076ee:	9b01      	ldr	r3, [sp, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	bf14      	ite	ne
 80076f4:	2102      	movne	r1, #2
 80076f6:	2101      	moveq	r1, #1
 80076f8:	61bb      	str	r3, [r7, #24]
 80076fa:	6139      	str	r1, [r7, #16]
 80076fc:	b1c4      	cbz	r4, 8007730 <__d2b+0x88>
 80076fe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007702:	4404      	add	r4, r0
 8007704:	6034      	str	r4, [r6, #0]
 8007706:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800770a:	6028      	str	r0, [r5, #0]
 800770c:	4638      	mov	r0, r7
 800770e:	b002      	add	sp, #8
 8007710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007714:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007718:	e7d5      	b.n	80076c6 <__d2b+0x1e>
 800771a:	6179      	str	r1, [r7, #20]
 800771c:	e7e7      	b.n	80076ee <__d2b+0x46>
 800771e:	a801      	add	r0, sp, #4
 8007720:	f7ff fd64 	bl	80071ec <__lo0bits>
 8007724:	2101      	movs	r1, #1
 8007726:	9b01      	ldr	r3, [sp, #4]
 8007728:	6139      	str	r1, [r7, #16]
 800772a:	617b      	str	r3, [r7, #20]
 800772c:	3020      	adds	r0, #32
 800772e:	e7e5      	b.n	80076fc <__d2b+0x54>
 8007730:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007734:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007738:	6030      	str	r0, [r6, #0]
 800773a:	6918      	ldr	r0, [r3, #16]
 800773c:	f7ff fd37 	bl	80071ae <__hi0bits>
 8007740:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007744:	e7e1      	b.n	800770a <__d2b+0x62>

08007746 <__ratio>:
 8007746:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774a:	4688      	mov	r8, r1
 800774c:	4669      	mov	r1, sp
 800774e:	4681      	mov	r9, r0
 8007750:	f7ff ff58 	bl	8007604 <__b2d>
 8007754:	468b      	mov	fp, r1
 8007756:	4606      	mov	r6, r0
 8007758:	460f      	mov	r7, r1
 800775a:	4640      	mov	r0, r8
 800775c:	a901      	add	r1, sp, #4
 800775e:	f7ff ff51 	bl	8007604 <__b2d>
 8007762:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007766:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800776a:	460d      	mov	r5, r1
 800776c:	eba3 0c02 	sub.w	ip, r3, r2
 8007770:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007774:	1a9b      	subs	r3, r3, r2
 8007776:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800777a:	2b00      	cmp	r3, #0
 800777c:	bfd5      	itete	le
 800777e:	460a      	movle	r2, r1
 8007780:	463a      	movgt	r2, r7
 8007782:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007786:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800778a:	bfd8      	it	le
 800778c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8007790:	462b      	mov	r3, r5
 8007792:	4602      	mov	r2, r0
 8007794:	4659      	mov	r1, fp
 8007796:	4630      	mov	r0, r6
 8007798:	f7f8 ffc8 	bl	800072c <__aeabi_ddiv>
 800779c:	b003      	add	sp, #12
 800779e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080077a2 <__copybits>:
 80077a2:	3901      	subs	r1, #1
 80077a4:	b510      	push	{r4, lr}
 80077a6:	1149      	asrs	r1, r1, #5
 80077a8:	6914      	ldr	r4, [r2, #16]
 80077aa:	3101      	adds	r1, #1
 80077ac:	f102 0314 	add.w	r3, r2, #20
 80077b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80077b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80077b8:	42a3      	cmp	r3, r4
 80077ba:	4602      	mov	r2, r0
 80077bc:	d303      	bcc.n	80077c6 <__copybits+0x24>
 80077be:	2300      	movs	r3, #0
 80077c0:	428a      	cmp	r2, r1
 80077c2:	d305      	bcc.n	80077d0 <__copybits+0x2e>
 80077c4:	bd10      	pop	{r4, pc}
 80077c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ca:	f840 2b04 	str.w	r2, [r0], #4
 80077ce:	e7f3      	b.n	80077b8 <__copybits+0x16>
 80077d0:	f842 3b04 	str.w	r3, [r2], #4
 80077d4:	e7f4      	b.n	80077c0 <__copybits+0x1e>

080077d6 <__any_on>:
 80077d6:	f100 0214 	add.w	r2, r0, #20
 80077da:	6900      	ldr	r0, [r0, #16]
 80077dc:	114b      	asrs	r3, r1, #5
 80077de:	4298      	cmp	r0, r3
 80077e0:	b510      	push	{r4, lr}
 80077e2:	db11      	blt.n	8007808 <__any_on+0x32>
 80077e4:	dd0a      	ble.n	80077fc <__any_on+0x26>
 80077e6:	f011 011f 	ands.w	r1, r1, #31
 80077ea:	d007      	beq.n	80077fc <__any_on+0x26>
 80077ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80077f0:	fa24 f001 	lsr.w	r0, r4, r1
 80077f4:	fa00 f101 	lsl.w	r1, r0, r1
 80077f8:	428c      	cmp	r4, r1
 80077fa:	d10b      	bne.n	8007814 <__any_on+0x3e>
 80077fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007800:	4293      	cmp	r3, r2
 8007802:	d803      	bhi.n	800780c <__any_on+0x36>
 8007804:	2000      	movs	r0, #0
 8007806:	bd10      	pop	{r4, pc}
 8007808:	4603      	mov	r3, r0
 800780a:	e7f7      	b.n	80077fc <__any_on+0x26>
 800780c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007810:	2900      	cmp	r1, #0
 8007812:	d0f5      	beq.n	8007800 <__any_on+0x2a>
 8007814:	2001      	movs	r0, #1
 8007816:	e7f6      	b.n	8007806 <__any_on+0x30>

08007818 <_calloc_r>:
 8007818:	b538      	push	{r3, r4, r5, lr}
 800781a:	fb02 f401 	mul.w	r4, r2, r1
 800781e:	4621      	mov	r1, r4
 8007820:	f000 f854 	bl	80078cc <_malloc_r>
 8007824:	4605      	mov	r5, r0
 8007826:	b118      	cbz	r0, 8007830 <_calloc_r+0x18>
 8007828:	4622      	mov	r2, r4
 800782a:	2100      	movs	r1, #0
 800782c:	f7fd ff76 	bl	800571c <memset>
 8007830:	4628      	mov	r0, r5
 8007832:	bd38      	pop	{r3, r4, r5, pc}

08007834 <_free_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	4605      	mov	r5, r0
 8007838:	2900      	cmp	r1, #0
 800783a:	d043      	beq.n	80078c4 <_free_r+0x90>
 800783c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007840:	1f0c      	subs	r4, r1, #4
 8007842:	2b00      	cmp	r3, #0
 8007844:	bfb8      	it	lt
 8007846:	18e4      	addlt	r4, r4, r3
 8007848:	f000 f96a 	bl	8007b20 <__malloc_lock>
 800784c:	4a1e      	ldr	r2, [pc, #120]	; (80078c8 <_free_r+0x94>)
 800784e:	6813      	ldr	r3, [r2, #0]
 8007850:	4610      	mov	r0, r2
 8007852:	b933      	cbnz	r3, 8007862 <_free_r+0x2e>
 8007854:	6063      	str	r3, [r4, #4]
 8007856:	6014      	str	r4, [r2, #0]
 8007858:	4628      	mov	r0, r5
 800785a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800785e:	f000 b960 	b.w	8007b22 <__malloc_unlock>
 8007862:	42a3      	cmp	r3, r4
 8007864:	d90b      	bls.n	800787e <_free_r+0x4a>
 8007866:	6821      	ldr	r1, [r4, #0]
 8007868:	1862      	adds	r2, r4, r1
 800786a:	4293      	cmp	r3, r2
 800786c:	bf01      	itttt	eq
 800786e:	681a      	ldreq	r2, [r3, #0]
 8007870:	685b      	ldreq	r3, [r3, #4]
 8007872:	1852      	addeq	r2, r2, r1
 8007874:	6022      	streq	r2, [r4, #0]
 8007876:	6063      	str	r3, [r4, #4]
 8007878:	6004      	str	r4, [r0, #0]
 800787a:	e7ed      	b.n	8007858 <_free_r+0x24>
 800787c:	4613      	mov	r3, r2
 800787e:	685a      	ldr	r2, [r3, #4]
 8007880:	b10a      	cbz	r2, 8007886 <_free_r+0x52>
 8007882:	42a2      	cmp	r2, r4
 8007884:	d9fa      	bls.n	800787c <_free_r+0x48>
 8007886:	6819      	ldr	r1, [r3, #0]
 8007888:	1858      	adds	r0, r3, r1
 800788a:	42a0      	cmp	r0, r4
 800788c:	d10b      	bne.n	80078a6 <_free_r+0x72>
 800788e:	6820      	ldr	r0, [r4, #0]
 8007890:	4401      	add	r1, r0
 8007892:	1858      	adds	r0, r3, r1
 8007894:	4282      	cmp	r2, r0
 8007896:	6019      	str	r1, [r3, #0]
 8007898:	d1de      	bne.n	8007858 <_free_r+0x24>
 800789a:	6810      	ldr	r0, [r2, #0]
 800789c:	6852      	ldr	r2, [r2, #4]
 800789e:	4401      	add	r1, r0
 80078a0:	6019      	str	r1, [r3, #0]
 80078a2:	605a      	str	r2, [r3, #4]
 80078a4:	e7d8      	b.n	8007858 <_free_r+0x24>
 80078a6:	d902      	bls.n	80078ae <_free_r+0x7a>
 80078a8:	230c      	movs	r3, #12
 80078aa:	602b      	str	r3, [r5, #0]
 80078ac:	e7d4      	b.n	8007858 <_free_r+0x24>
 80078ae:	6820      	ldr	r0, [r4, #0]
 80078b0:	1821      	adds	r1, r4, r0
 80078b2:	428a      	cmp	r2, r1
 80078b4:	bf01      	itttt	eq
 80078b6:	6811      	ldreq	r1, [r2, #0]
 80078b8:	6852      	ldreq	r2, [r2, #4]
 80078ba:	1809      	addeq	r1, r1, r0
 80078bc:	6021      	streq	r1, [r4, #0]
 80078be:	6062      	str	r2, [r4, #4]
 80078c0:	605c      	str	r4, [r3, #4]
 80078c2:	e7c9      	b.n	8007858 <_free_r+0x24>
 80078c4:	bd38      	pop	{r3, r4, r5, pc}
 80078c6:	bf00      	nop
 80078c8:	20000314 	.word	0x20000314

080078cc <_malloc_r>:
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	1ccd      	adds	r5, r1, #3
 80078d0:	f025 0503 	bic.w	r5, r5, #3
 80078d4:	3508      	adds	r5, #8
 80078d6:	2d0c      	cmp	r5, #12
 80078d8:	bf38      	it	cc
 80078da:	250c      	movcc	r5, #12
 80078dc:	2d00      	cmp	r5, #0
 80078de:	4606      	mov	r6, r0
 80078e0:	db01      	blt.n	80078e6 <_malloc_r+0x1a>
 80078e2:	42a9      	cmp	r1, r5
 80078e4:	d903      	bls.n	80078ee <_malloc_r+0x22>
 80078e6:	230c      	movs	r3, #12
 80078e8:	6033      	str	r3, [r6, #0]
 80078ea:	2000      	movs	r0, #0
 80078ec:	bd70      	pop	{r4, r5, r6, pc}
 80078ee:	f000 f917 	bl	8007b20 <__malloc_lock>
 80078f2:	4a21      	ldr	r2, [pc, #132]	; (8007978 <_malloc_r+0xac>)
 80078f4:	6814      	ldr	r4, [r2, #0]
 80078f6:	4621      	mov	r1, r4
 80078f8:	b991      	cbnz	r1, 8007920 <_malloc_r+0x54>
 80078fa:	4c20      	ldr	r4, [pc, #128]	; (800797c <_malloc_r+0xb0>)
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	b91b      	cbnz	r3, 8007908 <_malloc_r+0x3c>
 8007900:	4630      	mov	r0, r6
 8007902:	f000 f83d 	bl	8007980 <_sbrk_r>
 8007906:	6020      	str	r0, [r4, #0]
 8007908:	4629      	mov	r1, r5
 800790a:	4630      	mov	r0, r6
 800790c:	f000 f838 	bl	8007980 <_sbrk_r>
 8007910:	1c43      	adds	r3, r0, #1
 8007912:	d124      	bne.n	800795e <_malloc_r+0x92>
 8007914:	230c      	movs	r3, #12
 8007916:	4630      	mov	r0, r6
 8007918:	6033      	str	r3, [r6, #0]
 800791a:	f000 f902 	bl	8007b22 <__malloc_unlock>
 800791e:	e7e4      	b.n	80078ea <_malloc_r+0x1e>
 8007920:	680b      	ldr	r3, [r1, #0]
 8007922:	1b5b      	subs	r3, r3, r5
 8007924:	d418      	bmi.n	8007958 <_malloc_r+0x8c>
 8007926:	2b0b      	cmp	r3, #11
 8007928:	d90f      	bls.n	800794a <_malloc_r+0x7e>
 800792a:	600b      	str	r3, [r1, #0]
 800792c:	18cc      	adds	r4, r1, r3
 800792e:	50cd      	str	r5, [r1, r3]
 8007930:	4630      	mov	r0, r6
 8007932:	f000 f8f6 	bl	8007b22 <__malloc_unlock>
 8007936:	f104 000b 	add.w	r0, r4, #11
 800793a:	1d23      	adds	r3, r4, #4
 800793c:	f020 0007 	bic.w	r0, r0, #7
 8007940:	1ac3      	subs	r3, r0, r3
 8007942:	d0d3      	beq.n	80078ec <_malloc_r+0x20>
 8007944:	425a      	negs	r2, r3
 8007946:	50e2      	str	r2, [r4, r3]
 8007948:	e7d0      	b.n	80078ec <_malloc_r+0x20>
 800794a:	684b      	ldr	r3, [r1, #4]
 800794c:	428c      	cmp	r4, r1
 800794e:	bf16      	itet	ne
 8007950:	6063      	strne	r3, [r4, #4]
 8007952:	6013      	streq	r3, [r2, #0]
 8007954:	460c      	movne	r4, r1
 8007956:	e7eb      	b.n	8007930 <_malloc_r+0x64>
 8007958:	460c      	mov	r4, r1
 800795a:	6849      	ldr	r1, [r1, #4]
 800795c:	e7cc      	b.n	80078f8 <_malloc_r+0x2c>
 800795e:	1cc4      	adds	r4, r0, #3
 8007960:	f024 0403 	bic.w	r4, r4, #3
 8007964:	42a0      	cmp	r0, r4
 8007966:	d005      	beq.n	8007974 <_malloc_r+0xa8>
 8007968:	1a21      	subs	r1, r4, r0
 800796a:	4630      	mov	r0, r6
 800796c:	f000 f808 	bl	8007980 <_sbrk_r>
 8007970:	3001      	adds	r0, #1
 8007972:	d0cf      	beq.n	8007914 <_malloc_r+0x48>
 8007974:	6025      	str	r5, [r4, #0]
 8007976:	e7db      	b.n	8007930 <_malloc_r+0x64>
 8007978:	20000314 	.word	0x20000314
 800797c:	20000318 	.word	0x20000318

08007980 <_sbrk_r>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	2300      	movs	r3, #0
 8007984:	4c05      	ldr	r4, [pc, #20]	; (800799c <_sbrk_r+0x1c>)
 8007986:	4605      	mov	r5, r0
 8007988:	4608      	mov	r0, r1
 800798a:	6023      	str	r3, [r4, #0]
 800798c:	f7fa fd04 	bl	8002398 <_sbrk>
 8007990:	1c43      	adds	r3, r0, #1
 8007992:	d102      	bne.n	800799a <_sbrk_r+0x1a>
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	b103      	cbz	r3, 800799a <_sbrk_r+0x1a>
 8007998:	602b      	str	r3, [r5, #0]
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	200004e0 	.word	0x200004e0

080079a0 <__sread>:
 80079a0:	b510      	push	{r4, lr}
 80079a2:	460c      	mov	r4, r1
 80079a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a8:	f000 f8bc 	bl	8007b24 <_read_r>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	bfab      	itete	ge
 80079b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079b2:	89a3      	ldrhlt	r3, [r4, #12]
 80079b4:	181b      	addge	r3, r3, r0
 80079b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079ba:	bfac      	ite	ge
 80079bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80079be:	81a3      	strhlt	r3, [r4, #12]
 80079c0:	bd10      	pop	{r4, pc}

080079c2 <__swrite>:
 80079c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079c6:	461f      	mov	r7, r3
 80079c8:	898b      	ldrh	r3, [r1, #12]
 80079ca:	4605      	mov	r5, r0
 80079cc:	05db      	lsls	r3, r3, #23
 80079ce:	460c      	mov	r4, r1
 80079d0:	4616      	mov	r6, r2
 80079d2:	d505      	bpl.n	80079e0 <__swrite+0x1e>
 80079d4:	2302      	movs	r3, #2
 80079d6:	2200      	movs	r2, #0
 80079d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079dc:	f000 f886 	bl	8007aec <_lseek_r>
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	4632      	mov	r2, r6
 80079e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079e8:	81a3      	strh	r3, [r4, #12]
 80079ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ee:	463b      	mov	r3, r7
 80079f0:	4628      	mov	r0, r5
 80079f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079f6:	f000 b835 	b.w	8007a64 <_write_r>

080079fa <__sseek>:
 80079fa:	b510      	push	{r4, lr}
 80079fc:	460c      	mov	r4, r1
 80079fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a02:	f000 f873 	bl	8007aec <_lseek_r>
 8007a06:	1c43      	adds	r3, r0, #1
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	bf15      	itete	ne
 8007a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a16:	81a3      	strheq	r3, [r4, #12]
 8007a18:	bf18      	it	ne
 8007a1a:	81a3      	strhne	r3, [r4, #12]
 8007a1c:	bd10      	pop	{r4, pc}

08007a1e <__sclose>:
 8007a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a22:	f000 b831 	b.w	8007a88 <_close_r>

08007a26 <strncmp>:
 8007a26:	b510      	push	{r4, lr}
 8007a28:	b16a      	cbz	r2, 8007a46 <strncmp+0x20>
 8007a2a:	3901      	subs	r1, #1
 8007a2c:	1884      	adds	r4, r0, r2
 8007a2e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007a32:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d103      	bne.n	8007a42 <strncmp+0x1c>
 8007a3a:	42a0      	cmp	r0, r4
 8007a3c:	d001      	beq.n	8007a42 <strncmp+0x1c>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1f5      	bne.n	8007a2e <strncmp+0x8>
 8007a42:	1a98      	subs	r0, r3, r2
 8007a44:	bd10      	pop	{r4, pc}
 8007a46:	4610      	mov	r0, r2
 8007a48:	e7fc      	b.n	8007a44 <strncmp+0x1e>

08007a4a <__ascii_wctomb>:
 8007a4a:	b149      	cbz	r1, 8007a60 <__ascii_wctomb+0x16>
 8007a4c:	2aff      	cmp	r2, #255	; 0xff
 8007a4e:	bf8b      	itete	hi
 8007a50:	238a      	movhi	r3, #138	; 0x8a
 8007a52:	700a      	strbls	r2, [r1, #0]
 8007a54:	6003      	strhi	r3, [r0, #0]
 8007a56:	2001      	movls	r0, #1
 8007a58:	bf88      	it	hi
 8007a5a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007a5e:	4770      	bx	lr
 8007a60:	4608      	mov	r0, r1
 8007a62:	4770      	bx	lr

08007a64 <_write_r>:
 8007a64:	b538      	push	{r3, r4, r5, lr}
 8007a66:	4605      	mov	r5, r0
 8007a68:	4608      	mov	r0, r1
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	4c05      	ldr	r4, [pc, #20]	; (8007a84 <_write_r+0x20>)
 8007a70:	6022      	str	r2, [r4, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	f7fa fc43 	bl	80022fe <_write>
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	d102      	bne.n	8007a82 <_write_r+0x1e>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	b103      	cbz	r3, 8007a82 <_write_r+0x1e>
 8007a80:	602b      	str	r3, [r5, #0]
 8007a82:	bd38      	pop	{r3, r4, r5, pc}
 8007a84:	200004e0 	.word	0x200004e0

08007a88 <_close_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	4c05      	ldr	r4, [pc, #20]	; (8007aa4 <_close_r+0x1c>)
 8007a8e:	4605      	mov	r5, r0
 8007a90:	4608      	mov	r0, r1
 8007a92:	6023      	str	r3, [r4, #0]
 8007a94:	f7fa fc4f 	bl	8002336 <_close>
 8007a98:	1c43      	adds	r3, r0, #1
 8007a9a:	d102      	bne.n	8007aa2 <_close_r+0x1a>
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	b103      	cbz	r3, 8007aa2 <_close_r+0x1a>
 8007aa0:	602b      	str	r3, [r5, #0]
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	200004e0 	.word	0x200004e0

08007aa8 <_fstat_r>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	2300      	movs	r3, #0
 8007aac:	4c06      	ldr	r4, [pc, #24]	; (8007ac8 <_fstat_r+0x20>)
 8007aae:	4605      	mov	r5, r0
 8007ab0:	4608      	mov	r0, r1
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	f7fa fc49 	bl	800234c <_fstat>
 8007aba:	1c43      	adds	r3, r0, #1
 8007abc:	d102      	bne.n	8007ac4 <_fstat_r+0x1c>
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	b103      	cbz	r3, 8007ac4 <_fstat_r+0x1c>
 8007ac2:	602b      	str	r3, [r5, #0]
 8007ac4:	bd38      	pop	{r3, r4, r5, pc}
 8007ac6:	bf00      	nop
 8007ac8:	200004e0 	.word	0x200004e0

08007acc <_isatty_r>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	2300      	movs	r3, #0
 8007ad0:	4c05      	ldr	r4, [pc, #20]	; (8007ae8 <_isatty_r+0x1c>)
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	4608      	mov	r0, r1
 8007ad6:	6023      	str	r3, [r4, #0]
 8007ad8:	f7fa fc47 	bl	800236a <_isatty>
 8007adc:	1c43      	adds	r3, r0, #1
 8007ade:	d102      	bne.n	8007ae6 <_isatty_r+0x1a>
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	b103      	cbz	r3, 8007ae6 <_isatty_r+0x1a>
 8007ae4:	602b      	str	r3, [r5, #0]
 8007ae6:	bd38      	pop	{r3, r4, r5, pc}
 8007ae8:	200004e0 	.word	0x200004e0

08007aec <_lseek_r>:
 8007aec:	b538      	push	{r3, r4, r5, lr}
 8007aee:	4605      	mov	r5, r0
 8007af0:	4608      	mov	r0, r1
 8007af2:	4611      	mov	r1, r2
 8007af4:	2200      	movs	r2, #0
 8007af6:	4c05      	ldr	r4, [pc, #20]	; (8007b0c <_lseek_r+0x20>)
 8007af8:	6022      	str	r2, [r4, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	f7fa fc3f 	bl	800237e <_lseek>
 8007b00:	1c43      	adds	r3, r0, #1
 8007b02:	d102      	bne.n	8007b0a <_lseek_r+0x1e>
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	b103      	cbz	r3, 8007b0a <_lseek_r+0x1e>
 8007b08:	602b      	str	r3, [r5, #0]
 8007b0a:	bd38      	pop	{r3, r4, r5, pc}
 8007b0c:	200004e0 	.word	0x200004e0

08007b10 <malloc>:
 8007b10:	4b02      	ldr	r3, [pc, #8]	; (8007b1c <malloc+0xc>)
 8007b12:	4601      	mov	r1, r0
 8007b14:	6818      	ldr	r0, [r3, #0]
 8007b16:	f7ff bed9 	b.w	80078cc <_malloc_r>
 8007b1a:	bf00      	nop
 8007b1c:	20000060 	.word	0x20000060

08007b20 <__malloc_lock>:
 8007b20:	4770      	bx	lr

08007b22 <__malloc_unlock>:
 8007b22:	4770      	bx	lr

08007b24 <_read_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4605      	mov	r5, r0
 8007b28:	4608      	mov	r0, r1
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	4c05      	ldr	r4, [pc, #20]	; (8007b44 <_read_r+0x20>)
 8007b30:	6022      	str	r2, [r4, #0]
 8007b32:	461a      	mov	r2, r3
 8007b34:	f7fa fbc6 	bl	80022c4 <_read>
 8007b38:	1c43      	adds	r3, r0, #1
 8007b3a:	d102      	bne.n	8007b42 <_read_r+0x1e>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	b103      	cbz	r3, 8007b42 <_read_r+0x1e>
 8007b40:	602b      	str	r3, [r5, #0]
 8007b42:	bd38      	pop	{r3, r4, r5, pc}
 8007b44:	200004e0 	.word	0x200004e0

08007b48 <_init>:
 8007b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4a:	bf00      	nop
 8007b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b4e:	bc08      	pop	{r3}
 8007b50:	469e      	mov	lr, r3
 8007b52:	4770      	bx	lr

08007b54 <_fini>:
 8007b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b56:	bf00      	nop
 8007b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b5a:	bc08      	pop	{r3}
 8007b5c:	469e      	mov	lr, r3
 8007b5e:	4770      	bx	lr
